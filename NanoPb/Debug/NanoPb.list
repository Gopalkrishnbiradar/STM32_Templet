
NanoPb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a64  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08006bf4  08006bf4  00007bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f8c  08006f8c  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006f8c  08006f8c  00007f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f94  08006f94  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f94  08006f94  00007f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f98  08006f98  00007f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006f9c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008068  2**0
                  CONTENTS
 10 .bss          00000248  20000068  20000068  00008068  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  200002b0  200002b0  00008068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010322  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026ec  00000000  00000000  000183ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f38  00000000  00000000  0001aaa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bf2  00000000  00000000  0001b9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ca2  00000000  00000000  0001c5d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001216a  00000000  00000000  0003f274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2b7c  00000000  00000000  000513de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00123f5a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004784  00000000  00000000  00123fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00128724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006bdc 	.word	0x08006bdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006bdc 	.word	0x08006bdc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000568:	1d39      	adds	r1, r7, #4
 800056a:	f04f 33ff 	mov.w	r3, #4294967295
 800056e:	2201      	movs	r2, #1
 8000570:	4803      	ldr	r0, [pc, #12]	@ (8000580 <__io_putchar+0x20>)
 8000572:	f004 ffdb 	bl	800552c <HAL_UART_Transmit>
  return ch;
 8000576:	687b      	ldr	r3, [r7, #4]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	200000cc 	.word	0x200000cc

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b0ae      	sub	sp, #184	@ 0xb8
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f003 fd6f 	bl	800406c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f881 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f931 	bl	80007f8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000596:	f000 f8db 	bl	8000750 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800059a:	f000 f903 	bl	80007a4 <MX_USART3_UART_Init>
	           * Nanopb generates simple struct definitions for all the messages.
	           * - check out the contents of simple.pb.h!
	           * It is a good idea to always initialize your structures
	           * so that you do not have garbage data from RAM in there.
	           */
	          SimpleMessage message = SimpleMessage_init_zero;
 800059e:	2300      	movs	r3, #0
 80005a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

	          /* Create a stream that will write to our buffer. */
	          pb_ostream_t stream = pb_ostream_from_buffer(buffer, sizeof(buffer));
 80005a4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80005a8:	1d39      	adds	r1, r7, #4
 80005aa:	2280      	movs	r2, #128	@ 0x80
 80005ac:	4618      	mov	r0, r3
 80005ae:	f002 fa65 	bl	8002a7c <pb_ostream_from_buffer>

	          /* Fill in the lucky number */
	          message.lucky_number = 13;
 80005b2:	230d      	movs	r3, #13
 80005b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

	          /* Now we are ready to encode the message! */
	          status = pb_encode(&stream, SimpleMessage_fields, &message);
 80005b8:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 80005bc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80005c0:	492e      	ldr	r1, [pc, #184]	@ (800067c <main+0xf8>)
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 fec7 	bl	8003356 <pb_encode>
 80005c8:	4603      	mov	r3, r0
 80005ca:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
	          message_length = stream.bytes_written;
 80005ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80005d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

	          /* Then just check for any errors.. */
	          if (!status)
 80005d6:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 80005da:	f083 0301 	eor.w	r3, r3, #1
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d00d      	beq.n	8000600 <main+0x7c>
	          {
	              printf("Encoding failed: %s\n", PB_GET_ERROR(&stream));
 80005e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d002      	beq.n	80005f2 <main+0x6e>
 80005ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80005f0:	e000      	b.n	80005f4 <main+0x70>
 80005f2:	4b23      	ldr	r3, [pc, #140]	@ (8000680 <main+0xfc>)
 80005f4:	4619      	mov	r1, r3
 80005f6:	4823      	ldr	r0, [pc, #140]	@ (8000684 <main+0x100>)
 80005f8:	f005 fc16 	bl	8005e28 <iprintf>
	              return 1;
 80005fc:	2301      	movs	r3, #1
 80005fe:	e038      	b.n	8000672 <main+0xee>

	      /* But because we are lazy, we will just decode it immediately. */

	      {
	          /* Allocate space for the decoded message. */
	          SimpleMessage message = SimpleMessage_init_zero;
 8000600:	2300      	movs	r3, #0
 8000602:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	          /* Create a stream that reads from the buffer. */
	          pb_istream_t stream = pb_istream_from_buffer(buffer, message_length);
 8000606:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800060a:	1d39      	adds	r1, r7, #4
 800060c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fd27 	bl	8001064 <pb_istream_from_buffer>

	          /* Now we are ready to decode the message. */
	          status = pb_decode(&stream, SimpleMessage_fields, &message);
 8000616:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 800061a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800061e:	4917      	ldr	r1, [pc, #92]	@ (800067c <main+0xf8>)
 8000620:	4618      	mov	r0, r3
 8000622:	f001 fe59 	bl	80022d8 <pb_decode>
 8000626:	4603      	mov	r3, r0
 8000628:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7

	          /* Check for errors... */
	          if (!status)
 800062c:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8000630:	f083 0301 	eor.w	r3, r3, #1
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	d00d      	beq.n	8000656 <main+0xd2>
	          {
	              printf("Decoding failed: %s\n", PB_GET_ERROR(&stream));
 800063a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800063e:	2b00      	cmp	r3, #0
 8000640:	d002      	beq.n	8000648 <main+0xc4>
 8000642:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000646:	e000      	b.n	800064a <main+0xc6>
 8000648:	4b0d      	ldr	r3, [pc, #52]	@ (8000680 <main+0xfc>)
 800064a:	4619      	mov	r1, r3
 800064c:	480e      	ldr	r0, [pc, #56]	@ (8000688 <main+0x104>)
 800064e:	f005 fbeb 	bl	8005e28 <iprintf>
	              return 1;
 8000652:	2301      	movs	r3, #1
 8000654:	e00d      	b.n	8000672 <main+0xee>
	          }
	          printf("JHGGGFXGFCHGH\n");
 8000656:	480d      	ldr	r0, [pc, #52]	@ (800068c <main+0x108>)
 8000658:	f005 fc4e 	bl	8005ef8 <puts>
	          /* Print the data contained in the message. */
	          printf("Your lucky number was %d!\n", (int)message.lucky_number);
 800065c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000660:	4619      	mov	r1, r3
 8000662:	480b      	ldr	r0, [pc, #44]	@ (8000690 <main+0x10c>)
 8000664:	f005 fbe0 	bl	8005e28 <iprintf>
	      }
	      HAL_Delay(1000);
 8000668:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800066c:	f003 fd40 	bl	80040f0 <HAL_Delay>
  {
 8000670:	e795      	b.n	800059e <main+0x1a>

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000672:	4618      	mov	r0, r3
 8000674:	37b8      	adds	r7, #184	@ 0xb8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	08006f28 	.word	0x08006f28
 8000680:	08006bf4 	.word	0x08006bf4
 8000684:	08006bfc 	.word	0x08006bfc
 8000688:	08006c14 	.word	0x08006c14
 800068c:	08006c2c 	.word	0x08006c2c
 8000690:	08006c3c 	.word	0x08006c3c

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	@ 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	@ 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f005 fd08 	bl	80060b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b22      	ldr	r3, [pc, #136]	@ (8000748 <SystemClock_Config+0xb4>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c0:	4a21      	ldr	r2, [pc, #132]	@ (8000748 <SystemClock_Config+0xb4>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000748 <SystemClock_Config+0xb4>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b1c      	ldr	r3, [pc, #112]	@ (800074c <SystemClock_Config+0xb8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a1b      	ldr	r2, [pc, #108]	@ (800074c <SystemClock_Config+0xb8>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b19      	ldr	r3, [pc, #100]	@ (800074c <SystemClock_Config+0xb8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	2310      	movs	r3, #16
 80006fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	4618      	mov	r0, r3
 8000706:	f003 ff95 	bl	8004634 <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000710:	f000 f8ba 	bl	8000888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000718:	2300      	movs	r3, #0
 800071a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f004 f9f8 	bl	8004b24 <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800073a:	f000 f8a5 	bl	8000888 <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3750      	adds	r7, #80	@ 0x50
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000754:	4b11      	ldr	r3, [pc, #68]	@ (800079c <MX_USART1_UART_Init+0x4c>)
 8000756:	4a12      	ldr	r2, [pc, #72]	@ (80007a0 <MX_USART1_UART_Init+0x50>)
 8000758:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800075a:	4b10      	ldr	r3, [pc, #64]	@ (800079c <MX_USART1_UART_Init+0x4c>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <MX_USART1_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <MX_USART1_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <MX_USART1_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b09      	ldr	r3, [pc, #36]	@ (800079c <MX_USART1_UART_Init+0x4c>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b08      	ldr	r3, [pc, #32]	@ (800079c <MX_USART1_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <MX_USART1_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	@ (800079c <MX_USART1_UART_Init+0x4c>)
 8000788:	f004 fe80 	bl	800548c <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000792:	f000 f879 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000084 	.word	0x20000084
 80007a0:	40011000 	.word	0x40011000

080007a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007a8:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007aa:	4a12      	ldr	r2, [pc, #72]	@ (80007f4 <MX_USART3_UART_Init+0x50>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ae:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007dc:	f004 fe56 	bl	800548c <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007e6:	f000 f84f 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000cc 	.word	0x200000cc
 80007f4:	40004800 	.word	0x40004800

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b17      	ldr	r3, [pc, #92]	@ (8000860 <MX_GPIO_Init+0x68>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a16      	ldr	r2, [pc, #88]	@ (8000860 <MX_GPIO_Init+0x68>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <MX_GPIO_Init+0x68>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b10      	ldr	r3, [pc, #64]	@ (8000860 <MX_GPIO_Init+0x68>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a0f      	ldr	r2, [pc, #60]	@ (8000860 <MX_GPIO_Init+0x68>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b0d      	ldr	r3, [pc, #52]	@ (8000860 <MX_GPIO_Init+0x68>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <MX_GPIO_Init+0x68>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a08      	ldr	r2, [pc, #32]	@ (8000860 <MX_GPIO_Init+0x68>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <MX_GPIO_Init+0x68>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000852:	bf00      	nop
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800

08000864 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a04      	ldr	r2, [pc, #16]	@ (8000884 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d101      	bne.n	800087a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000876:	f003 fc1b 	bl	80040b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40010000 	.word	0x40010000

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <Error_Handler+0x8>

08000894 <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 8000894:	b480      	push	{r7}
 8000896:	b08f      	sub	sp, #60	@ 0x3c
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	891a      	ldrh	r2, [r3, #8]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	8a1b      	ldrh	r3, [r3, #16]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d301      	bcc.n	80008ae <load_descriptor_values+0x1a>
        return false;
 80008aa:	2300      	movs	r3, #0
 80008ac:	e156      	b.n	8000b5c <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	895b      	ldrh	r3, [r3, #10]
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	4413      	add	r3, r2
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 80008c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008c2:	0a1b      	lsrs	r3, r3, #8
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 80008ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008cc:	f003 0303 	and.w	r3, r3, #3
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d05a      	beq.n	800098a <load_descriptor_values+0xf6>
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	f200 8094 	bhi.w	8000a02 <load_descriptor_values+0x16e>
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d002      	beq.n	80008e4 <load_descriptor_values+0x50>
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d01f      	beq.n	8000922 <load_descriptor_values+0x8e>
 80008e2:	e08e      	b.n	8000a02 <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2201      	movs	r2, #1
 80008e8:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 80008ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008ec:	089b      	lsrs	r3, r3, #2
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 80008fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008fc:	0e1b      	lsrs	r3, r3, #24
 80008fe:	b25b      	sxtb	r3, r3
 8000900:	f003 030f 	and.w	r3, r3, #15
 8000904:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = (word0 >> 16) & 0xFF;
 8000908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800090a:	0c1b      	lsrs	r3, r3, #16
 800090c:	b2db      	uxtb	r3, r3
 800090e:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 8000910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000912:	0f1b      	lsrs	r3, r3, #28
 8000914:	b29b      	uxth	r3, r3
 8000916:	f003 030f 	and.w	r3, r3, #15
 800091a:	b29a      	uxth	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	825a      	strh	r2, [r3, #18]
            break;
 8000920:	e0b4      	b.n	8000a8c <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	895b      	ldrh	r3, [r3, #10]
 800092c:	3301      	adds	r3, #1
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	4413      	add	r3, r2
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 8000936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000938:	0c1b      	lsrs	r3, r3, #16
 800093a:	b29b      	uxth	r3, r3
 800093c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000940:	b29a      	uxth	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 8000946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000948:	089b      	lsrs	r3, r3, #2
 800094a:	b29b      	uxth	r3, r3
 800094c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000950:	b29a      	uxth	r2, r3
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	0f1b      	lsrs	r3, r3, #28
 8000956:	b29b      	uxth	r3, r3
 8000958:	019b      	lsls	r3, r3, #6
 800095a:	b29b      	uxth	r3, r3
 800095c:	4313      	orrs	r3, r2
 800095e:	b29a      	uxth	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 8000964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000966:	0f1b      	lsrs	r3, r3, #28
 8000968:	b25b      	sxtb	r3, r3
 800096a:	f003 030f 	and.w	r3, r3, #15
 800096e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word1 & 0xFFFF;
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	b29b      	uxth	r3, r3
 8000976:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	0c1b      	lsrs	r3, r3, #16
 800097c:	b29b      	uxth	r3, r3
 800097e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000982:	b29a      	uxth	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	825a      	strh	r2, [r3, #18]
            break;
 8000988:	e080      	b.n	8000a8c <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	895b      	ldrh	r3, [r3, #10]
 8000994:	3301      	adds	r3, #1
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	4413      	add	r3, r2
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	895b      	ldrh	r3, [r3, #10]
 80009a8:	3302      	adds	r3, #2
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	4413      	add	r3, r2
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	895b      	ldrh	r3, [r3, #10]
 80009bc:	3303      	adds	r3, #3
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	4413      	add	r3, r2
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 80009c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009c8:	0c1b      	lsrs	r3, r3, #16
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 80009d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009d2:	089b      	lsrs	r3, r3, #2
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80009da:	b29a      	uxth	r2, r3
 80009dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009de:	0a1b      	lsrs	r3, r3, #8
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	019b      	lsls	r3, r3, #6
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	4313      	orrs	r3, r2
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 80009ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 80009f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f6:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 80009f8:	6a3b      	ldr	r3, [r7, #32]
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	825a      	strh	r2, [r3, #18]
            break;
 8000a00:	e044      	b.n	8000a8c <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	895b      	ldrh	r3, [r3, #10]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	4413      	add	r3, r2
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	895b      	ldrh	r3, [r3, #10]
 8000a20:	3302      	adds	r3, #2
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	4413      	add	r3, r2
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	895b      	ldrh	r3, [r3, #10]
 8000a34:	3303      	adds	r3, #3
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	4413      	add	r3, r2
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	895b      	ldrh	r3, [r3, #10]
 8000a48:	3304      	adds	r3, #4
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	4413      	add	r3, r2
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8000a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a5c:	089b      	lsrs	r3, r3, #2
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	019b      	lsls	r3, r3, #6
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	4313      	orrs	r3, r2
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	825a      	strh	r2, [r3, #18]
            break;
 8000a8a:	bf00      	nop
        }
    }

    if (!iter->message)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d106      	bne.n	8000aa2 <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
 8000aa0:	e041      	b.n	8000b26 <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	685a      	ldr	r2, [r3, #4]
 8000aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000aa8:	441a      	add	r2, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	619a      	str	r2, [r3, #24]

        if (size_offset)
 8000aae:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d008      	beq.n	8000ac8 <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	699a      	ldr	r2, [r3, #24]
 8000aba:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8000abe:	425b      	negs	r3, r3
 8000ac0:	441a      	add	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	621a      	str	r2, [r3, #32]
 8000ac6:	e01a      	b.n	8000afe <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	7d9b      	ldrb	r3, [r3, #22]
 8000acc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000ad0:	2b20      	cmp	r3, #32
 8000ad2:	d111      	bne.n	8000af8 <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	7d9b      	ldrb	r3, [r3, #22]
 8000ad8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d005      	beq.n	8000aec <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	7d9b      	ldrb	r3, [r3, #22]
 8000ae4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8000ae8:	2b80      	cmp	r3, #128	@ 0x80
 8000aea:	d105      	bne.n	8000af8 <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f103 0214 	add.w	r2, r3, #20
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	621a      	str	r2, [r3, #32]
 8000af6:	e002      	b.n	8000afe <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	7d9b      	ldrb	r3, [r3, #22]
 8000b02:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000b06:	2b80      	cmp	r3, #128	@ 0x80
 8000b08:	d109      	bne.n	8000b1e <load_descriptor_values+0x28a>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d005      	beq.n	8000b1e <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	61da      	str	r2, [r3, #28]
 8000b1c:	e003      	b.n	8000b26 <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	699a      	ldr	r2, [r3, #24]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	7d9b      	ldrb	r3, [r3, #22]
 8000b2a:	f003 030f 	and.w	r3, r3, #15
 8000b2e:	2b08      	cmp	r3, #8
 8000b30:	d005      	beq.n	8000b3e <load_descriptor_values+0x2aa>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	7d9b      	ldrb	r3, [r3, #22]
 8000b36:	f003 030f 	and.w	r3, r3, #15
 8000b3a:	2b09      	cmp	r3, #9
 8000b3c:	d10a      	bne.n	8000b54 <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	685a      	ldr	r2, [r3, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	89db      	ldrh	r3, [r3, #14]
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	4413      	add	r3, r2
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	625a      	str	r2, [r3, #36]	@ 0x24
 8000b52:	e002      	b.n	8000b5a <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return true;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	373c      	adds	r7, #60	@ 0x3c
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
    iter->index++;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	891b      	ldrh	r3, [r3, #8]
 8000b74:	3301      	adds	r3, #1
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	891a      	ldrh	r2, [r3, #8]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	8a1b      	ldrh	r3, [r3, #16]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d30c      	bcc.n	8000ba4 <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 8000ba2:	e03b      	b.n	8000c1c <advance_iterator+0xb4>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	895b      	ldrh	r3, [r3, #10]
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	4413      	add	r3, r2
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	f003 0303 	and.w	r3, r3, #3
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	895a      	ldrh	r2, [r3, #10]
 8000bce:	893b      	ldrh	r3, [r7, #8]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	899b      	ldrh	r3, [r3, #12]
 8000bdc:	7afa      	ldrb	r2, [r7, #11]
 8000bde:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	bf0c      	ite	eq
 8000be6:	2201      	moveq	r2, #1
 8000be8:	2200      	movne	r2, #0
 8000bea:	b2d2      	uxtb	r2, r2
 8000bec:	4413      	add	r3, r2
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	89da      	ldrh	r2, [r3, #14]
 8000bf8:	7afb      	ldrb	r3, [r7, #11]
 8000bfa:	f003 030f 	and.w	r3, r3, #15
 8000bfe:	2b08      	cmp	r3, #8
 8000c00:	d004      	beq.n	8000c0c <advance_iterator+0xa4>
 8000c02:	7afb      	ldrb	r3, [r7, #11]
 8000c04:	f003 030f 	and.w	r3, r3, #15
 8000c08:	2b09      	cmp	r3, #9
 8000c0a:	d101      	bne.n	8000c10 <advance_iterator+0xa8>
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e000      	b.n	8000c12 <advance_iterator+0xaa>
 8000c10:	2300      	movs	r3, #0
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	4413      	add	r3, r2
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	81da      	strh	r2, [r3, #14]
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 8000c34:	2228      	movs	r2, #40	@ 0x28
 8000c36:	2100      	movs	r1, #0
 8000c38:	68f8      	ldr	r0, [r7, #12]
 8000c3a:	f005 fa3d 	bl	80060b8 <memset>

    iter->descriptor = desc;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	68ba      	ldr	r2, [r7, #8]
 8000c42:	601a      	str	r2, [r3, #0]
    iter->message = message;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	f7ff fe22 	bl	8000894 <load_descriptor_values>
 8000c50:	4603      	mov	r3, r0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b086      	sub	sp, #24
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	0a1b      	lsrs	r3, r3, #8
 8000c78:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000c7c:	2b80      	cmp	r3, #128	@ 0x80
 8000c7e:	d109      	bne.n	8000c94 <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	3304      	adds	r3, #4
 8000c84:	461a      	mov	r2, r3
 8000c86:	6939      	ldr	r1, [r7, #16]
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ffcd 	bl	8000c28 <pb_field_iter_begin>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	75fb      	strb	r3, [r7, #23]
 8000c92:	e008      	b.n	8000ca6 <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	6939      	ldr	r1, [r7, #16]
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ffc3 	bl	8000c28 <pb_field_iter_begin>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	f103 020c 	add.w	r2, r3, #12
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	621a      	str	r2, [r3, #32]
    return status;
 8000cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ff50 	bl	8000b68 <advance_iterator>
    (void)load_descriptor_values(iter);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff fde3 	bl	8000894 <load_descriptor_values>
    return iter->index != 0;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	891b      	ldrh	r3, [r3, #8]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	bf14      	ite	ne
 8000cd6:	2301      	movne	r3, #1
 8000cd8:	2300      	moveq	r3, #0
 8000cda:	b2db      	uxtb	r3, r3
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	8a1b      	ldrh	r3, [r3, #16]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d101      	bne.n	8000cfe <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e044      	b.n	8000d88 <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	8a9b      	ldrh	r3, [r3, #20]
 8000d04:	461a      	mov	r2, r3
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d901      	bls.n	8000d10 <pb_field_iter_find+0x2c>
    {
        return false;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	e03b      	b.n	8000d88 <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	891b      	ldrh	r3, [r3, #8]
 8000d14:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	8a1b      	ldrh	r3, [r3, #16]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d204      	bcs.n	8000d2c <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	8a1a      	ldrh	r2, [r3, #16]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff ff1b 	bl	8000b68 <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	895b      	ldrh	r3, [r3, #10]
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	089a      	lsrs	r2, r3, #2
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	4053      	eors	r3, r2
 8000d4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d110      	bne.n	8000d76 <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff fd9d 	bl	8000894 <load_descriptor_values>

                if (iter->tag == tag &&
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	8a1b      	ldrh	r3, [r3, #16]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d107      	bne.n	8000d76 <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	7d9b      	ldrb	r3, [r3, #22]
 8000d6a:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 8000d6e:	2b0a      	cmp	r3, #10
 8000d70:	d001      	beq.n	8000d76 <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e008      	b.n	8000d88 <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	891b      	ldrh	r3, [r3, #8]
 8000d7a:	89fa      	ldrh	r2, [r7, #14]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d1d5      	bne.n	8000d2c <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff fd87 	bl	8000894 <load_descriptor_values>
        return false;
 8000d86:	2300      	movs	r3, #0
    }
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	7d9b      	ldrb	r3, [r3, #22]
 8000d9c:	f003 030f 	and.w	r3, r3, #15
 8000da0:	2b0a      	cmp	r3, #10
 8000da2:	d101      	bne.n	8000da8 <pb_field_iter_find_extension+0x18>
    {
        return true;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e022      	b.n	8000dee <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	891b      	ldrh	r3, [r3, #8]
 8000dac:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff feda 	bl	8000b68 <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	895b      	ldrh	r3, [r3, #10]
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	2b0a      	cmp	r3, #10
 8000dd0:	d104      	bne.n	8000ddc <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff fd5e 	bl	8000894 <load_descriptor_values>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	e008      	b.n	8000dee <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	891b      	ldrh	r3, [r3, #8]
 8000de0:	89fa      	ldrh	r2, [r7, #14]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d1e3      	bne.n	8000dae <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff fd54 	bl	8000894 <load_descriptor_values>
        return false;
 8000dec:	2300      	movs	r3, #0
    }
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <pb_const_cast>:

static void *pb_const_cast(const void *p)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b085      	sub	sp, #20
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
     * to avoid spurious compiler warnings. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	60fb      	str	r3, [r7, #12]
    return t.p1;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <pb_field_iter_begin_const>:

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ffea 	bl	8000df6 <pb_const_cast>
 8000e22:	4603      	mov	r3, r0
 8000e24:	461a      	mov	r2, r3
 8000e26:	68b9      	ldr	r1, [r7, #8]
 8000e28:	68f8      	ldr	r0, [r7, #12]
 8000e2a:	f7ff fefd 	bl	8000c28 <pb_field_iter_begin>
 8000e2e:	4603      	mov	r3, r0
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <pb_field_iter_begin_extension_const>:

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
 8000e42:	6838      	ldr	r0, [r7, #0]
 8000e44:	f7ff ffd7 	bl	8000df6 <pb_const_cast>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff ff04 	bl	8000c5a <pb_field_iter_begin_extension>
 8000e52:	4603      	mov	r3, r0
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <pb_default_field_callback>:

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
    if (field->data_size == sizeof(pb_callback_t))
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	8a5b      	ldrh	r3, [r3, #18]
 8000e6c:	2b08      	cmp	r3, #8
 8000e6e:	d125      	bne.n	8000ebc <pb_default_field_callback+0x60>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	69db      	ldr	r3, [r3, #28]
 8000e74:	617b      	str	r3, [r7, #20]

        if (pCallback != NULL)
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d01f      	beq.n	8000ebc <pb_default_field_callback+0x60>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00c      	beq.n	8000e9c <pb_default_field_callback+0x40>
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d008      	beq.n	8000e9c <pb_default_field_callback+0x40>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	3204      	adds	r2, #4
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	68f8      	ldr	r0, [r7, #12]
 8000e96:	4798      	blx	r3
 8000e98:	4603      	mov	r3, r0
 8000e9a:	e010      	b.n	8000ebe <pb_default_field_callback+0x62>
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d00c      	beq.n	8000ebc <pb_default_field_callback+0x60>
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d008      	beq.n	8000ebc <pb_default_field_callback+0x60>
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	3204      	adds	r2, #4
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	68b8      	ldr	r0, [r7, #8]
 8000eb6:	4798      	blx	r3
 8000eb8:	4603      	mov	r3, r0
 8000eba:	e000      	b.n	8000ebe <pb_default_field_callback+0x62>
            }
        }
    }

    return true; /* Success, but didn't do anything */
 8000ebc:	2301      	movs	r3, #1

}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	441a      	add	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d004      	beq.n	8000ef4 <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	6979      	ldr	r1, [r7, #20]
 8000eee:	68b8      	ldr	r0, [r7, #8]
 8000ef0:	f005 f95d 	bl	80061ae <memcpy>
    }
    
    return true;
 8000ef4:	2301      	movs	r3, #1
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
    if (count == 0)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <pb_read+0x16>
        return true;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e05f      	b.n	8000fd6 <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d123      	bne.n	8000f64 <pb_read+0x64>
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a2f      	ldr	r2, [pc, #188]	@ (8000fe0 <pb_read+0xe0>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d01e      	beq.n	8000f64 <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 8000f26:	e011      	b.n	8000f4c <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	2210      	movs	r2, #16
 8000f2e:	4619      	mov	r1, r3
 8000f30:	68f8      	ldr	r0, [r7, #12]
 8000f32:	f7ff ffe5 	bl	8000f00 <pb_read>
 8000f36:	4603      	mov	r3, r0
 8000f38:	f083 0301 	eor.w	r3, r3, #1
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <pb_read+0x46>
				return false;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e047      	b.n	8000fd6 <pb_read+0xd6>
			
			count -= 16;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3b10      	subs	r3, #16
 8000f4a:	607b      	str	r3, [r7, #4]
		while (count > 16)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b10      	cmp	r3, #16
 8000f50:	d8ea      	bhi.n	8000f28 <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	68f8      	ldr	r0, [r7, #12]
 8000f5c:	f7ff ffd0 	bl	8000f00 <pb_read>
 8000f60:	4603      	mov	r3, r0
 8000f62:	e038      	b.n	8000fd6 <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d90b      	bls.n	8000f86 <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d002      	beq.n	8000f7c <pb_read+0x7c>
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	e000      	b.n	8000f7e <pb_read+0x7e>
 8000f7c:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <pb_read+0xe4>)
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	60d3      	str	r3, [r2, #12]
 8000f82:	2300      	movs	r3, #0
 8000f84:	e027      	b.n	8000fd6 <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	68f8      	ldr	r0, [r7, #12]
 8000f90:	4798      	blx	r3
 8000f92:	4603      	mov	r3, r0
 8000f94:	f083 0301 	eor.w	r3, r3, #1
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d00b      	beq.n	8000fb6 <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d002      	beq.n	8000fac <pb_read+0xac>
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	e000      	b.n	8000fae <pb_read+0xae>
 8000fac:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <pb_read+0xe8>)
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	60d3      	str	r3, [r2, #12]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e00f      	b.n	8000fd6 <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d903      	bls.n	8000fc8 <pb_read+0xc8>
        stream->bytes_left = 0;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	e005      	b.n	8000fd4 <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	1ad2      	subs	r2, r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	609a      	str	r2, [r3, #8]

    return true;
 8000fd4:	2301      	movs	r3, #1
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3720      	adds	r7, #32
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	08000ec7 	.word	0x08000ec7
 8000fe4:	08006c58 	.word	0x08006c58
 8000fe8:	08006c68 	.word	0x08006c68

08000fec <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10b      	bne.n	8001016 <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d002      	beq.n	800100c <pb_readbyte+0x20>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	e000      	b.n	800100e <pb_readbyte+0x22>
 800100c:	4b13      	ldr	r3, [pc, #76]	@ (800105c <pb_readbyte+0x70>)
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	60d3      	str	r3, [r2, #12]
 8001012:	2300      	movs	r3, #0
 8001014:	e01d      	b.n	8001052 <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2201      	movs	r2, #1
 800101c:	6839      	ldr	r1, [r7, #0]
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	4798      	blx	r3
 8001022:	4603      	mov	r3, r0
 8001024:	f083 0301 	eor.w	r3, r3, #1
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00b      	beq.n	8001046 <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d002      	beq.n	800103c <pb_readbyte+0x50>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	e000      	b.n	800103e <pb_readbyte+0x52>
 800103c:	4b08      	ldr	r3, [pc, #32]	@ (8001060 <pb_readbyte+0x74>)
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	60d3      	str	r3, [r2, #12]
 8001042:	2300      	movs	r3, #0
 8001044:	e005      	b.n	8001052 <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	1e5a      	subs	r2, r3, #1
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	609a      	str	r2, [r3, #8]
    
    return true;    
 8001050:	2301      	movs	r3, #1
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	08006c58 	.word	0x08006c58
 8001060:	08006c68 	.word	0x08006c68

08001064 <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 8001064:	b490      	push	{r4, r7}
 8001066:	b08a      	sub	sp, #40	@ 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 8001070:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <pb_istream_from_buffer+0x38>)
 8001072:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8001080:	2300      	movs	r3, #0
 8001082:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	461c      	mov	r4, r3
 8001088:	f107 0318 	add.w	r3, r7, #24
 800108c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800108e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	3728      	adds	r7, #40	@ 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bc90      	pop	{r4, r7}
 800109a:	4770      	bx	lr
 800109c:	08000ec7 	.word	0x08000ec7

080010a0 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 80010ac:	f107 0315 	add.w	r3, r7, #21
 80010b0:	4619      	mov	r1, r3
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f7ff ff9a 	bl	8000fec <pb_readbyte>
 80010b8:	4603      	mov	r3, r0
 80010ba:	f083 0301 	eor.w	r3, r3, #1
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d00b      	beq.n	80010dc <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d105      	bne.n	80010d8 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d002      	beq.n	80010d8 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 80010d8:	2300      	movs	r3, #0
 80010da:	e084      	b.n	80011e6 <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 80010dc:	7d7b      	ldrb	r3, [r7, #21]
 80010de:	b25b      	sxtb	r3, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db02      	blt.n	80010ea <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 80010e4:	7d7b      	ldrb	r3, [r7, #21]
 80010e6:	61fb      	str	r3, [r7, #28]
 80010e8:	e079      	b.n	80011de <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 80010ea:	2307      	movs	r3, #7
 80010ec:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 80010ee:	7d7b      	ldrb	r3, [r7, #21]
 80010f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80010f4:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 80010f6:	f107 0315 	add.w	r3, r7, #21
 80010fa:	4619      	mov	r1, r3
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f7ff ff75 	bl	8000fec <pb_readbyte>
 8001102:	4603      	mov	r3, r0
 8001104:	f083 0301 	eor.w	r3, r3, #1
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <pb_decode_varint32_eof+0x72>
                return false;
 800110e:	2300      	movs	r3, #0
 8001110:	e069      	b.n	80011e6 <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	2b1f      	cmp	r3, #31
 8001116:	d92f      	bls.n	8001178 <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	2b3e      	cmp	r3, #62	@ 0x3e
 800111c:	d801      	bhi.n	8001122 <pb_decode_varint32_eof+0x82>
 800111e:	23ff      	movs	r3, #255	@ 0xff
 8001120:	e000      	b.n	8001124 <pb_decode_varint32_eof+0x84>
 8001122:	2301      	movs	r3, #1
 8001124:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8001126:	7d7b      	ldrb	r3, [r7, #21]
 8001128:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800112c:	2b00      	cmp	r3, #0
 800112e:	d006      	beq.n	800113e <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 8001130:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8001132:	2b00      	cmp	r3, #0
 8001134:	da05      	bge.n	8001142 <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 8001136:	7d7b      	ldrb	r3, [r7, #21]
 8001138:	7dfa      	ldrb	r2, [r7, #23]
 800113a:	429a      	cmp	r2, r3
 800113c:	d101      	bne.n	8001142 <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <pb_decode_varint32_eof+0xa4>
 8001142:	2300      	movs	r3, #0
 8001144:	75bb      	strb	r3, [r7, #22]
 8001146:	7dbb      	ldrb	r3, [r7, #22]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	2b3f      	cmp	r3, #63	@ 0x3f
 8001152:	d805      	bhi.n	8001160 <pb_decode_varint32_eof+0xc0>
 8001154:	7dbb      	ldrb	r3, [r7, #22]
 8001156:	f083 0301 	eor.w	r3, r3, #1
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	d037      	beq.n	80011d0 <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <pb_decode_varint32_eof+0xce>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	e000      	b.n	8001170 <pb_decode_varint32_eof+0xd0>
 800116e:	4b20      	ldr	r3, [pc, #128]	@ (80011f0 <pb_decode_varint32_eof+0x150>)
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	60d3      	str	r3, [r2, #12]
 8001174:	2300      	movs	r3, #0
 8001176:	e036      	b.n	80011e6 <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	2b1c      	cmp	r3, #28
 800117c:	d11f      	bne.n	80011be <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 800117e:	7d7b      	ldrb	r3, [r7, #21]
 8001180:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001184:	2b00      	cmp	r3, #0
 8001186:	d010      	beq.n	80011aa <pb_decode_varint32_eof+0x10a>
 8001188:	7d7b      	ldrb	r3, [r7, #21]
 800118a:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 800118e:	2b78      	cmp	r3, #120	@ 0x78
 8001190:	d00b      	beq.n	80011aa <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d002      	beq.n	80011a0 <pb_decode_varint32_eof+0x100>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	e000      	b.n	80011a2 <pb_decode_varint32_eof+0x102>
 80011a0:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <pb_decode_varint32_eof+0x150>)
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	60d3      	str	r3, [r2, #12]
 80011a6:	2300      	movs	r3, #0
 80011a8:	e01d      	b.n	80011e6 <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 80011aa:	7d7b      	ldrb	r3, [r7, #21]
 80011ac:	f003 020f 	and.w	r2, r3, #15
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	69fa      	ldr	r2, [r7, #28]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61fb      	str	r3, [r7, #28]
 80011bc:	e008      	b.n	80011d0 <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 80011be:	7d7b      	ldrb	r3, [r7, #21]
 80011c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	69fa      	ldr	r2, [r7, #28]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	3307      	adds	r3, #7
 80011d4:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 80011d6:	7d7b      	ldrb	r3, [r7, #21]
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	db8b      	blt.n	80010f6 <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	69fa      	ldr	r2, [r7, #28]
 80011e2:	601a      	str	r2, [r3, #0]
   return true;
 80011e4:	2301      	movs	r3, #1
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3720      	adds	r7, #32
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	08006c74 	.word	0x08006c74

080011f4 <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 80011fe:	2200      	movs	r2, #0
 8001200:	6839      	ldr	r1, [r7, #0]
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ff4c 	bl	80010a0 <pb_decode_varint32_eof>
 8001208:	4603      	mov	r3, r0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 8001214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001218:	b08a      	sub	sp, #40	@ 0x28
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
    uint64_t result = 0;
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 8001230:	f107 0317 	add.w	r3, r7, #23
 8001234:	4619      	mov	r1, r3
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f7ff fed8 	bl	8000fec <pb_readbyte>
 800123c:	4603      	mov	r3, r0
 800123e:	f083 0301 	eor.w	r3, r3, #1
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <pb_decode_varint+0x38>
            return false;
 8001248:	2300      	movs	r3, #0
 800124a:	e041      	b.n	80012d0 <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 800124c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001250:	d910      	bls.n	8001274 <pb_decode_varint+0x60>
 8001252:	7dfb      	ldrb	r3, [r7, #23]
 8001254:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00b      	beq.n	8001274 <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d002      	beq.n	800126a <pb_decode_varint+0x56>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	e000      	b.n	800126c <pb_decode_varint+0x58>
 800126a:	4b1c      	ldr	r3, [pc, #112]	@ (80012dc <pb_decode_varint+0xc8>)
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	60d3      	str	r3, [r2, #12]
 8001270:	2300      	movs	r3, #0
 8001272:	e02d      	b.n	80012d0 <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8001274:	7dfb      	ldrb	r3, [r7, #23]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2200      	movs	r2, #0
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	f003 087f 	and.w	r8, r3, #127	@ 0x7f
 8001284:	f04f 0900 	mov.w	r9, #0
 8001288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128a:	f1a3 0120 	sub.w	r1, r3, #32
 800128e:	f1c3 0220 	rsb	r2, r3, #32
 8001292:	fa09 f503 	lsl.w	r5, r9, r3
 8001296:	fa08 f101 	lsl.w	r1, r8, r1
 800129a:	430d      	orrs	r5, r1
 800129c:	fa28 f202 	lsr.w	r2, r8, r2
 80012a0:	4315      	orrs	r5, r2
 80012a2:	fa08 f403 	lsl.w	r4, r8, r3
 80012a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012aa:	ea42 0a04 	orr.w	sl, r2, r4
 80012ae:	ea43 0b05 	orr.w	fp, r3, r5
 80012b2:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 80012b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b8:	3307      	adds	r3, #7
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (byte & 0x80);
 80012bc:	7dfb      	ldrb	r3, [r7, #23]
 80012be:	b25b      	sxtb	r3, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	dbb5      	blt.n	8001230 <pb_decode_varint+0x1c>
    
    *dest = result;
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012ca:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3728      	adds	r7, #40	@ 0x28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80012da:	bf00      	nop
 80012dc:	08006c74 	.word	0x08006c74

080012e0 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 80012e8:	f107 030f 	add.w	r3, r7, #15
 80012ec:	2201      	movs	r2, #1
 80012ee:	4619      	mov	r1, r3
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff fe05 	bl	8000f00 <pb_read>
 80012f6:	4603      	mov	r3, r0
 80012f8:	f083 0301 	eor.w	r3, r3, #1
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <pb_skip_varint+0x26>
            return false;
 8001302:	2300      	movs	r3, #0
 8001304:	e004      	b.n	8001310 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	b25b      	sxtb	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	dbec      	blt.n	80012e8 <pb_skip_varint+0x8>
    return true;
 800130e:	2301      	movs	r3, #1
}
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	4619      	mov	r1, r3
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ff64 	bl	80011f4 <pb_decode_varint32>
 800132c:	4603      	mov	r3, r0
 800132e:	f083 0301 	eor.w	r3, r3, #1
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <pb_skip_string+0x24>
        return false;
 8001338:	2300      	movs	r3, #0
 800133a:	e006      	b.n	800134a <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	461a      	mov	r2, r3
 8001340:	2100      	movs	r1, #0
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff fddc 	bl	8000f00 <pb_read>
 8001348:	4603      	mov	r3, r0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b086      	sub	sp, #24
 8001356:	af00      	add	r7, sp, #0
 8001358:	60f8      	str	r0, [r7, #12]
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f7ff fe90 	bl	80010a0 <pb_decode_varint32_eof>
 8001380:	4603      	mov	r3, r0
 8001382:	f083 0301 	eor.w	r3, r3, #1
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <pb_decode_tag+0x3e>
    {
        return false;
 800138c:	2300      	movs	r3, #0
 800138e:	e00b      	b.n	80013a8 <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	08da      	lsrs	r2, r3, #3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	701a      	strb	r2, [r3, #0]
    return true;
 80013a6:	2301      	movs	r3, #1
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	2b05      	cmp	r3, #5
 80013c0:	d826      	bhi.n	8001410 <pb_skip_field+0x60>
 80013c2:	a201      	add	r2, pc, #4	@ (adr r2, 80013c8 <pb_skip_field+0x18>)
 80013c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c8:	080013e1 	.word	0x080013e1
 80013cc:	080013eb 	.word	0x080013eb
 80013d0:	080013f9 	.word	0x080013f9
 80013d4:	08001411 	.word	0x08001411
 80013d8:	08001411 	.word	0x08001411
 80013dc:	08001403 	.word	0x08001403
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff7d 	bl	80012e0 <pb_skip_varint>
 80013e6:	4603      	mov	r3, r0
 80013e8:	e01d      	b.n	8001426 <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 80013ea:	2208      	movs	r2, #8
 80013ec:	2100      	movs	r1, #0
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff fd86 	bl	8000f00 <pb_read>
 80013f4:	4603      	mov	r3, r0
 80013f6:	e016      	b.n	8001426 <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff8d 	bl	8001318 <pb_skip_string>
 80013fe:	4603      	mov	r3, r0
 8001400:	e011      	b.n	8001426 <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8001402:	2204      	movs	r2, #4
 8001404:	2100      	movs	r1, #0
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff fd7a 	bl	8000f00 <pb_read>
 800140c:	4603      	mov	r3, r0
 800140e:	e00a      	b.n	8001426 <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d002      	beq.n	800141e <pb_skip_field+0x6e>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	e000      	b.n	8001420 <pb_skip_field+0x70>
 800141e:	4b04      	ldr	r3, [pc, #16]	@ (8001430 <pb_skip_field+0x80>)
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	60d3      	str	r3, [r2, #12]
 8001424:	2300      	movs	r3, #0
    }
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	08006c84 	.word	0x08006c84

08001434 <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	460b      	mov	r3, r1
 8001442:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 800144a:	7afb      	ldrb	r3, [r7, #11]
 800144c:	2b05      	cmp	r3, #5
 800144e:	d03f      	beq.n	80014d0 <read_raw_value+0x9c>
 8001450:	2b05      	cmp	r3, #5
 8001452:	dc47      	bgt.n	80014e4 <read_raw_value+0xb0>
 8001454:	2b00      	cmp	r3, #0
 8001456:	d002      	beq.n	800145e <read_raw_value+0x2a>
 8001458:	2b01      	cmp	r3, #1
 800145a:	d02f      	beq.n	80014bc <read_raw_value+0x88>
 800145c:	e042      	b.n	80014e4 <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	1c5a      	adds	r2, r3, #1
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	429a      	cmp	r2, r3
 8001476:	d20b      	bcs.n	8001490 <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d002      	beq.n	8001486 <read_raw_value+0x52>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	e000      	b.n	8001488 <read_raw_value+0x54>
 8001486:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <read_raw_value+0xd0>)
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	60d3      	str	r3, [r2, #12]
 800148c:	2300      	movs	r3, #0
 800148e:	e034      	b.n	80014fa <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 8001490:	2201      	movs	r2, #1
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f7ff fd33 	bl	8000f00 <pb_read>
 800149a:	4603      	mov	r3, r0
 800149c:	f083 0301 	eor.w	r3, r3, #1
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <read_raw_value+0x76>
                    return false;
 80014a6:	2300      	movs	r3, #0
 80014a8:	e027      	b.n	80014fa <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	1c5a      	adds	r2, r3, #1
 80014ae:	607a      	str	r2, [r7, #4]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b25b      	sxtb	r3, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	dbd5      	blt.n	8001464 <read_raw_value+0x30>
            return true;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e01e      	b.n	80014fa <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	2208      	movs	r2, #8
 80014c0:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 80014c2:	2208      	movs	r2, #8
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f7ff fd1a 	bl	8000f00 <pb_read>
 80014cc:	4603      	mov	r3, r0
 80014ce:	e014      	b.n	80014fa <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	2204      	movs	r2, #4
 80014d4:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 80014d6:	2204      	movs	r2, #4
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f7ff fd10 	bl	8000f00 <pb_read>
 80014e0:	4603      	mov	r3, r0
 80014e2:	e00a      	b.n	80014fa <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <read_raw_value+0xbe>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	e000      	b.n	80014f4 <read_raw_value+0xc0>
 80014f2:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <read_raw_value+0xd4>)
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	60d3      	str	r3, [r2, #12]
 80014f8:	2300      	movs	r3, #0
    }
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	08006c74 	.word	0x08006c74
 8001508:	08006c84 	.word	0x08006c84

0800150c <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	4619      	mov	r1, r3
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff fe69 	bl	80011f4 <pb_decode_varint32>
 8001522:	4603      	mov	r3, r0
 8001524:	f083 0301 	eor.w	r3, r3, #1
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <pb_make_string_substream+0x26>
        return false;
 800152e:	2300      	movs	r3, #0
 8001530:	e020      	b.n	8001574 <pb_make_string_substream+0x68>
    
    *substream = *stream;
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4614      	mov	r4, r2
 8001538:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800153a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	429a      	cmp	r2, r3
 8001546:	d20b      	bcs.n	8001560 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <pb_make_string_substream+0x4a>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	e000      	b.n	8001558 <pb_make_string_substream+0x4c>
 8001556:	4b09      	ldr	r3, [pc, #36]	@ (800157c <pb_make_string_substream+0x70>)
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	60d3      	str	r3, [r2, #12]
 800155c:	2300      	movs	r3, #0
 800155e:	e009      	b.n	8001574 <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1ad2      	subs	r2, r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	609a      	str	r2, [r3, #8]
    return true;
 8001572:	2301      	movs	r3, #1
}
 8001574:	4618      	mov	r0, r3
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	bd90      	pop	{r4, r7, pc}
 800157c:	08006c98 	.word	0x08006c98

08001580 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00e      	beq.n	80015b0 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	461a      	mov	r2, r3
 8001598:	2100      	movs	r1, #0
 800159a:	6838      	ldr	r0, [r7, #0]
 800159c:	f7ff fcb0 	bl	8000f00 <pb_read>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f083 0301 	eor.w	r3, r3, #1
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <pb_close_string_substream+0x30>
            return false;
 80015ac:	2300      	movs	r3, #0
 80015ae:	e008      	b.n	80015c2 <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	68da      	ldr	r2, [r3, #12]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	60da      	str	r2, [r3, #12]
#endif
    return true;
 80015c0:	2301      	movs	r3, #1
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	460b      	mov	r3, r1
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	7d9b      	ldrb	r3, [r3, #22]
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	2b0b      	cmp	r3, #11
 80015e4:	f200 80d4 	bhi.w	8001790 <decode_basic_field+0x1c4>
 80015e8:	a201      	add	r2, pc, #4	@ (adr r2, 80015f0 <decode_basic_field+0x24>)
 80015ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ee:	bf00      	nop
 80015f0:	08001621 	.word	0x08001621
 80015f4:	08001651 	.word	0x08001651
 80015f8:	08001651 	.word	0x08001651
 80015fc:	08001651 	.word	0x08001651
 8001600:	08001681 	.word	0x08001681
 8001604:	080016b5 	.word	0x080016b5
 8001608:	080016e9 	.word	0x080016e9
 800160c:	08001713 	.word	0x08001713
 8001610:	0800173d 	.word	0x0800173d
 8001614:	0800173d 	.word	0x0800173d
 8001618:	08001791 	.word	0x08001791
 800161c:	08001767 	.word	0x08001767
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 8001620:	7afb      	ldrb	r3, [r7, #11]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00e      	beq.n	8001644 <decode_basic_field+0x78>
 8001626:	7afb      	ldrb	r3, [r7, #11]
 8001628:	2bff      	cmp	r3, #255	@ 0xff
 800162a:	d00b      	beq.n	8001644 <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d002      	beq.n	800163a <decode_basic_field+0x6e>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	e000      	b.n	800163c <decode_basic_field+0x70>
 800163a:	4b5d      	ldr	r3, [pc, #372]	@ (80017b0 <decode_basic_field+0x1e4>)
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	60d3      	str	r3, [r2, #12]
 8001640:	2300      	movs	r3, #0
 8001642:	e0b0      	b.n	80017a6 <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f000 fef6 	bl	8002438 <pb_dec_bool>
 800164c:	4603      	mov	r3, r0
 800164e:	e0aa      	b.n	80017a6 <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 8001650:	7afb      	ldrb	r3, [r7, #11]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00e      	beq.n	8001674 <decode_basic_field+0xa8>
 8001656:	7afb      	ldrb	r3, [r7, #11]
 8001658:	2bff      	cmp	r3, #255	@ 0xff
 800165a:	d00b      	beq.n	8001674 <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d002      	beq.n	800166a <decode_basic_field+0x9e>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	e000      	b.n	800166c <decode_basic_field+0xa0>
 800166a:	4b51      	ldr	r3, [pc, #324]	@ (80017b0 <decode_basic_field+0x1e4>)
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	60d3      	str	r3, [r2, #12]
 8001670:	2300      	movs	r3, #0
 8001672:	e098      	b.n	80017a6 <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 feee 	bl	8002458 <pb_dec_varint>
 800167c:	4603      	mov	r3, r0
 800167e:	e092      	b.n	80017a6 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 8001680:	7afb      	ldrb	r3, [r7, #11]
 8001682:	2b05      	cmp	r3, #5
 8001684:	d00e      	beq.n	80016a4 <decode_basic_field+0xd8>
 8001686:	7afb      	ldrb	r3, [r7, #11]
 8001688:	2bff      	cmp	r3, #255	@ 0xff
 800168a:	d00b      	beq.n	80016a4 <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d002      	beq.n	800169a <decode_basic_field+0xce>
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	e000      	b.n	800169c <decode_basic_field+0xd0>
 800169a:	4b45      	ldr	r3, [pc, #276]	@ (80017b0 <decode_basic_field+0x1e4>)
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	60d3      	str	r3, [r2, #12]
 80016a0:	2300      	movs	r3, #0
 80016a2:	e080      	b.n	80017a6 <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	4619      	mov	r1, r3
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f000 fe8a 	bl	80023c4 <pb_decode_fixed32>
 80016b0:	4603      	mov	r3, r0
 80016b2:	e078      	b.n	80017a6 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 80016b4:	7afb      	ldrb	r3, [r7, #11]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d00e      	beq.n	80016d8 <decode_basic_field+0x10c>
 80016ba:	7afb      	ldrb	r3, [r7, #11]
 80016bc:	2bff      	cmp	r3, #255	@ 0xff
 80016be:	d00b      	beq.n	80016d8 <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d002      	beq.n	80016ce <decode_basic_field+0x102>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	e000      	b.n	80016d0 <decode_basic_field+0x104>
 80016ce:	4b38      	ldr	r3, [pc, #224]	@ (80017b0 <decode_basic_field+0x1e4>)
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	60d3      	str	r3, [r2, #12]
 80016d4:	2300      	movs	r3, #0
 80016d6:	e066      	b.n	80017a6 <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	4619      	mov	r1, r3
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f000 fe8c 	bl	80023fc <pb_decode_fixed64>
 80016e4:	4603      	mov	r3, r0
 80016e6:	e05e      	b.n	80017a6 <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 80016e8:	7afb      	ldrb	r3, [r7, #11]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d00b      	beq.n	8001706 <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <decode_basic_field+0x130>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	e000      	b.n	80016fe <decode_basic_field+0x132>
 80016fc:	4b2c      	ldr	r3, [pc, #176]	@ (80017b0 <decode_basic_field+0x1e4>)
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	60d3      	str	r3, [r2, #12]
 8001702:	2300      	movs	r3, #0
 8001704:	e04f      	b.n	80017a6 <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f000 ffd1 	bl	80026b0 <pb_dec_bytes>
 800170e:	4603      	mov	r3, r0
 8001710:	e049      	b.n	80017a6 <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 8001712:	7afb      	ldrb	r3, [r7, #11]
 8001714:	2b02      	cmp	r3, #2
 8001716:	d00b      	beq.n	8001730 <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d002      	beq.n	8001726 <decode_basic_field+0x15a>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	e000      	b.n	8001728 <decode_basic_field+0x15c>
 8001726:	4b22      	ldr	r3, [pc, #136]	@ (80017b0 <decode_basic_field+0x1e4>)
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	60d3      	str	r3, [r2, #12]
 800172c:	2300      	movs	r3, #0
 800172e:	e03a      	b.n	80017a6 <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f001 f830 	bl	8002798 <pb_dec_string>
 8001738:	4603      	mov	r3, r0
 800173a:	e034      	b.n	80017a6 <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 800173c:	7afb      	ldrb	r3, [r7, #11]
 800173e:	2b02      	cmp	r3, #2
 8001740:	d00b      	beq.n	800175a <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d002      	beq.n	8001750 <decode_basic_field+0x184>
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	e000      	b.n	8001752 <decode_basic_field+0x186>
 8001750:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <decode_basic_field+0x1e4>)
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	60d3      	str	r3, [r2, #12]
 8001756:	2300      	movs	r3, #0
 8001758:	e025      	b.n	80017a6 <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f001 f897 	bl	8002890 <pb_dec_submessage>
 8001762:	4603      	mov	r3, r0
 8001764:	e01f      	b.n	80017a6 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 8001766:	7afb      	ldrb	r3, [r7, #11]
 8001768:	2b02      	cmp	r3, #2
 800176a:	d00b      	beq.n	8001784 <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d002      	beq.n	800177a <decode_basic_field+0x1ae>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	e000      	b.n	800177c <decode_basic_field+0x1b0>
 800177a:	4b0d      	ldr	r3, [pc, #52]	@ (80017b0 <decode_basic_field+0x1e4>)
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	60d3      	str	r3, [r2, #12]
 8001780:	2300      	movs	r3, #0
 8001782:	e010      	b.n	80017a6 <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f001 f90c 	bl	80029a4 <pb_dec_fixed_length_bytes>
 800178c:	4603      	mov	r3, r0
 800178e:	e00a      	b.n	80017a6 <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d002      	beq.n	800179e <decode_basic_field+0x1d2>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	e000      	b.n	80017a0 <decode_basic_field+0x1d4>
 800179e:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <decode_basic_field+0x1e8>)
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	60d3      	str	r3, [r2, #12]
 80017a4:	2300      	movs	r3, #0
    }
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	08006cb0 	.word	0x08006cb0
 80017b4:	08006cc0 	.word	0x08006cc0

080017b8 <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b096      	sub	sp, #88	@ 0x58
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	460b      	mov	r3, r1
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	7d9b      	ldrb	r3, [r3, #22]
 80017ca:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80017ce:	2b30      	cmp	r3, #48	@ 0x30
 80017d0:	f000 80c2 	beq.w	8001958 <decode_static_field+0x1a0>
 80017d4:	2b30      	cmp	r3, #48	@ 0x30
 80017d6:	f200 811a 	bhi.w	8001a0e <decode_static_field+0x256>
 80017da:	2b20      	cmp	r3, #32
 80017dc:	d01f      	beq.n	800181e <decode_static_field+0x66>
 80017de:	2b20      	cmp	r3, #32
 80017e0:	f200 8115 	bhi.w	8001a0e <decode_static_field+0x256>
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d002      	beq.n	80017ee <decode_static_field+0x36>
 80017e8:	2b10      	cmp	r3, #16
 80017ea:	d008      	beq.n	80017fe <decode_static_field+0x46>
 80017ec:	e10f      	b.n	8001a0e <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 80017ee:	7afb      	ldrb	r3, [r7, #11]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	4619      	mov	r1, r3
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f7ff fee9 	bl	80015cc <decode_basic_field>
 80017fa:	4603      	mov	r3, r0
 80017fc:	e112      	b.n	8001a24 <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	2201      	movs	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 800180e:	7afb      	ldrb	r3, [r7, #11]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	4619      	mov	r1, r3
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f7ff fed9 	bl	80015cc <decode_basic_field>
 800181a:	4603      	mov	r3, r0
 800181c:	e102      	b.n	8001a24 <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 800181e:	7afb      	ldrb	r3, [r7, #11]
 8001820:	2b02      	cmp	r3, #2
 8001822:	d16c      	bne.n	80018fe <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7d9b      	ldrb	r3, [r3, #22]
 8001828:	f003 030f 	and.w	r3, r3, #15
 800182c:	2b05      	cmp	r3, #5
 800182e:	d866      	bhi.n	80018fe <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 8001830:	2301      	movs	r3, #1
 8001832:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	653b      	str	r3, [r7, #80]	@ 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	8a52      	ldrh	r2, [r2, #18]
 8001844:	4611      	mov	r1, r2
 8001846:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001848:	8812      	ldrh	r2, [r2, #0]
 800184a:	fb01 f202 	mul.w	r2, r1, r2
 800184e:	441a      	add	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 8001854:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001858:	4619      	mov	r1, r3
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f7ff fe56 	bl	800150c <pb_make_string_substream>
 8001860:	4603      	mov	r3, r0
 8001862:	f083 0301 	eor.w	r3, r3, #1
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	d01f      	beq.n	80018ac <decode_static_field+0xf4>
                    return false;
 800186c:	2300      	movs	r3, #0
 800186e:	e0d9      	b.n	8001a24 <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 8001870:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	21ff      	movs	r1, #255	@ 0xff
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fea7 	bl	80015cc <decode_basic_field>
 800187e:	4603      	mov	r3, r0
 8001880:	f083 0301 	eor.w	r3, r3, #1
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <decode_static_field+0xda>
                    {
                        status = false;
 800188a:	2300      	movs	r3, #0
 800188c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                        break;
 8001890:	e015      	b.n	80018be <decode_static_field+0x106>
                    }
                    (*size)++;
 8001892:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	3301      	adds	r3, #1
 8001898:	b29a      	uxth	r2, r3
 800189a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800189c:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	8a52      	ldrh	r2, [r2, #18]
 80018a6:	441a      	add	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 80018ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d005      	beq.n	80018be <decode_static_field+0x106>
 80018b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018b4:	881a      	ldrh	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	8a9b      	ldrh	r3, [r3, #20]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d3d8      	bcc.n	8001870 <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 80018be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00b      	beq.n	80018dc <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d002      	beq.n	80018d2 <decode_static_field+0x11a>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	e000      	b.n	80018d4 <decode_static_field+0x11c>
 80018d2:	4b56      	ldr	r3, [pc, #344]	@ (8001a2c <decode_static_field+0x274>)
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	60d3      	str	r3, [r2, #12]
 80018d8:	2300      	movs	r3, #0
 80018da:	e0a3      	b.n	8001a24 <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 80018dc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80018e0:	4619      	mov	r1, r3
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f7ff fe4c 	bl	8001580 <pb_close_string_substream>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f083 0301 	eor.w	r3, r3, #1
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <decode_static_field+0x140>
                    return false;
 80018f4:	2300      	movs	r3, #0
 80018f6:	e095      	b.n	8001a24 <decode_static_field+0x26c>

                return status;
 80018f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80018fc:	e092      	b.n	8001a24 <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	64fb      	str	r3, [r7, #76]	@ 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	8a52      	ldrh	r2, [r2, #18]
 800190c:	4611      	mov	r1, r2
 800190e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001910:	8812      	ldrh	r2, [r2, #0]
 8001912:	fb01 f202 	mul.w	r2, r1, r2
 8001916:	441a      	add	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 800191c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	1c5a      	adds	r2, r3, #1
 8001922:	b291      	uxth	r1, r2
 8001924:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001926:	8011      	strh	r1, [r2, #0]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	8a92      	ldrh	r2, [r2, #20]
 800192c:	4293      	cmp	r3, r2
 800192e:	d30b      	bcc.n	8001948 <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d002      	beq.n	800193e <decode_static_field+0x186>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	e000      	b.n	8001940 <decode_static_field+0x188>
 800193e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a2c <decode_static_field+0x274>)
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	60d3      	str	r3, [r2, #12]
 8001944:	2300      	movs	r3, #0
 8001946:	e06d      	b.n	8001a24 <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 8001948:	7afb      	ldrb	r3, [r7, #11]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	4619      	mov	r1, r3
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f7ff fe3c 	bl	80015cc <decode_basic_field>
 8001954:	4603      	mov	r3, r0
 8001956:	e065      	b.n	8001a24 <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	7d9b      	ldrb	r3, [r3, #22]
 800195c:	f003 030f 	and.w	r3, r3, #15
 8001960:	2b08      	cmp	r3, #8
 8001962:	d005      	beq.n	8001970 <decode_static_field+0x1b8>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7d9b      	ldrb	r3, [r3, #22]
 8001968:	f003 030f 	and.w	r3, r3, #15
 800196c:	2b09      	cmp	r3, #9
 800196e:	d141      	bne.n	80019f4 <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	881a      	ldrh	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 800197a:	429a      	cmp	r2, r3
 800197c:	d03a      	beq.n	80019f4 <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69d8      	ldr	r0, [r3, #28]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	8a5b      	ldrh	r3, [r3, #18]
 8001986:	461a      	mov	r2, r3
 8001988:	2100      	movs	r1, #0
 800198a:	f004 fb95 	bl	80060b8 <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10a      	bne.n	80019ae <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199c:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d105      	bne.n	80019ae <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d022      	beq.n	80019f4 <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69da      	ldr	r2, [r3, #28]
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff f934 	bl	8000c28 <pb_field_iter_begin>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d016      	beq.n	80019f4 <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 fa4d 	bl	8001e6a <pb_message_set_to_defaults>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f083 0301 	eor.w	r3, r3, #1
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00b      	beq.n	80019f4 <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <decode_static_field+0x232>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	e000      	b.n	80019ec <decode_static_field+0x234>
 80019ea:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <decode_static_field+0x278>)
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	60d3      	str	r3, [r2, #12]
 80019f0:	2300      	movs	r3, #0
 80019f2:	e017      	b.n	8001a24 <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	8a12      	ldrh	r2, [r2, #16]
 80019fc:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 80019fe:	7afb      	ldrb	r3, [r7, #11]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	4619      	mov	r1, r3
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f7ff fde1 	bl	80015cc <decode_basic_field>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	e00a      	b.n	8001a24 <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d002      	beq.n	8001a1c <decode_static_field+0x264>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	e000      	b.n	8001a1e <decode_static_field+0x266>
 8001a1c:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <decode_static_field+0x27c>)
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	60d3      	str	r3, [r2, #12]
 8001a22:	2300      	movs	r3, #0
    }
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3758      	adds	r7, #88	@ 0x58
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	08006cd4 	.word	0x08006cd4
 8001a30:	08006ce4 	.word	0x08006ce4
 8001a34:	08006cc0 	.word	0x08006cc0

08001a38 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	460b      	mov	r3, r1
 8001a42:	607a      	str	r2, [r7, #4]
 8001a44:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d002      	beq.n	8001a54 <decode_pointer_field+0x1c>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	e000      	b.n	8001a56 <decode_pointer_field+0x1e>
 8001a54:	4b04      	ldr	r3, [pc, #16]	@ (8001a68 <decode_pointer_field+0x30>)
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	60d3      	str	r3, [r2, #12]
 8001a5a:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	08006cfc 	.word	0x08006cfc

08001a6c <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8001a6c:	b590      	push	{r4, r7, lr}
 8001a6e:	b097      	sub	sp, #92	@ 0x5c
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	61f8      	str	r0, [r7, #28]
 8001a74:	460b      	mov	r3, r1
 8001a76:	617a      	str	r2, [r7, #20]
 8001a78:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d106      	bne.n	8001a92 <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 8001a84:	7efb      	ldrb	r3, [r7, #27]
 8001a86:	4619      	mov	r1, r3
 8001a88:	69f8      	ldr	r0, [r7, #28]
 8001a8a:	f7ff fc91 	bl	80013b0 <pb_skip_field>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	e070      	b.n	8001b74 <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 8001a92:	7efb      	ldrb	r3, [r7, #27]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d145      	bne.n	8001b24 <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 8001a98:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	69f8      	ldr	r0, [r7, #28]
 8001aa0:	f7ff fd34 	bl	800150c <pb_make_string_substream>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f083 0301 	eor.w	r3, r3, #1
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <decode_callback_field+0x48>
            return false;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	e05f      	b.n	8001b74 <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 8001ab4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ab6:	657b      	str	r3, [r7, #84]	@ 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4798      	blx	r3
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f083 0301 	eor.w	r3, r3, #1
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d010      	beq.n	8001af6 <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d002      	beq.n	8001ae2 <decode_callback_field+0x76>
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	e005      	b.n	8001aee <decode_callback_field+0x82>
 8001ae2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <decode_callback_field+0x80>
 8001ae8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001aea:	e000      	b.n	8001aee <decode_callback_field+0x82>
 8001aec:	4b23      	ldr	r3, [pc, #140]	@ (8001b7c <decode_callback_field+0x110>)
 8001aee:	69fa      	ldr	r2, [r7, #28]
 8001af0:	60d3      	str	r3, [r2, #12]
                return false;
 8001af2:	2300      	movs	r3, #0
 8001af4:	e03e      	b.n	8001b74 <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 8001af6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <decode_callback_field+0x98>
 8001afc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001afe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d8d7      	bhi.n	8001ab4 <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 8001b04:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001b08:	4619      	mov	r1, r3
 8001b0a:	69f8      	ldr	r0, [r7, #28]
 8001b0c:	f7ff fd38 	bl	8001580 <pb_close_string_substream>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f083 0301 	eor.w	r3, r3, #1
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <decode_callback_field+0xb4>
            return false;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	e029      	b.n	8001b74 <decode_callback_field+0x108>

        return true;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e027      	b.n	8001b74 <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 8001b24:	230a      	movs	r3, #10
 8001b26:	627b      	str	r3, [r7, #36]	@ 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8001b28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b2c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001b30:	7ef9      	ldrb	r1, [r7, #27]
 8001b32:	69f8      	ldr	r0, [r7, #28]
 8001b34:	f7ff fc7e 	bl	8001434 <read_raw_value>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f083 0301 	eor.w	r3, r3, #1
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <decode_callback_field+0xdc>
            return false;
 8001b44:	2300      	movs	r3, #0
 8001b46:	e015      	b.n	8001b74 <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 8001b48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fa87 	bl	8001064 <pb_istream_from_buffer>
 8001b56:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4798      	blx	r3
 8001b72:	4603      	mov	r3, r0
    }
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	375c      	adds	r7, #92	@ 0x5c
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd90      	pop	{r4, r7, pc}
 8001b7c:	08006d10 	.word	0x08006d10

08001b80 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	7d9b      	ldrb	r3, [r3, #22]
 8001b92:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001b96:	2b80      	cmp	r3, #128	@ 0x80
 8001b98:	d00e      	beq.n	8001bb8 <decode_field+0x38>
 8001b9a:	2b80      	cmp	r3, #128	@ 0x80
 8001b9c:	d81c      	bhi.n	8001bd8 <decode_field+0x58>
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <decode_field+0x28>
 8001ba2:	2b40      	cmp	r3, #64	@ 0x40
 8001ba4:	d010      	beq.n	8001bc8 <decode_field+0x48>
 8001ba6:	e017      	b.n	8001bd8 <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 8001ba8:	7afb      	ldrb	r3, [r7, #11]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	4619      	mov	r1, r3
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f7ff fe02 	bl	80017b8 <decode_static_field>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	e01a      	b.n	8001bee <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 8001bb8:	7afb      	ldrb	r3, [r7, #11]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f7ff ff3a 	bl	8001a38 <decode_pointer_field>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	e012      	b.n	8001bee <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 8001bc8:	7afb      	ldrb	r3, [r7, #11]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f7ff ff4c 	bl	8001a6c <decode_callback_field>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	e00a      	b.n	8001bee <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d002      	beq.n	8001be6 <decode_field+0x66>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	e000      	b.n	8001be8 <decode_field+0x68>
 8001be6:	4b04      	ldr	r3, [pc, #16]	@ (8001bf8 <decode_field+0x78>)
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	60d3      	str	r3, [r2, #12]
 8001bec:	2300      	movs	r3, #0
    }
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	08006cc0 	.word	0x08006cc0

08001bfc <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08e      	sub	sp, #56	@ 0x38
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 8001c0a:	f107 0310 	add.w	r3, r7, #16
 8001c0e:	68b9      	ldr	r1, [r7, #8]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff f822 	bl	8000c5a <pb_field_iter_begin_extension>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f083 0301 	eor.w	r3, r3, #1
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00b      	beq.n	8001c3a <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <default_extension_decoder+0x34>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	e000      	b.n	8001c32 <default_extension_decoder+0x36>
 8001c30:	4b0e      	ldr	r3, [pc, #56]	@ (8001c6c <default_extension_decoder+0x70>)
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	60d3      	str	r3, [r2, #12]
 8001c36:	2300      	movs	r3, #0
 8001c38:	e014      	b.n	8001c64 <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 8001c3a:	8c3b      	ldrh	r3, [r7, #32]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d102      	bne.n	8001c4a <default_extension_decoder+0x4e>
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <default_extension_decoder+0x52>
        return true;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00a      	b.n	8001c64 <default_extension_decoder+0x68>

    extension->found = true;
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2201      	movs	r2, #1
 8001c52:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 8001c54:	f107 0210 	add.w	r2, r7, #16
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f7ff ff8f 	bl	8001b80 <decode_field>
 8001c62:	4603      	mov	r3, r0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3738      	adds	r7, #56	@ 0x38
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	08006d20 	.word	0x08006d20

08001c70 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 8001c70:	b590      	push	{r4, r7, lr}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 8001c86:	e022      	b.n	8001cce <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00a      	beq.n	8001ca8 <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681c      	ldr	r4, [r3, #0]
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	6839      	ldr	r1, [r7, #0]
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	47a0      	blx	r4
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	75fb      	strb	r3, [r7, #23]
 8001ca6:	e007      	b.n	8001cb8 <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	6839      	ldr	r1, [r7, #0]
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f7ff ffa4 	bl	8001bfc <default_extension_decoder>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	75fb      	strb	r3, [r7, #23]

        if (!status)
 8001cb8:	7dfb      	ldrb	r3, [r7, #23]
 8001cba:	f083 0301 	eor.w	r3, r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <decode_extension+0x58>
            return false;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	e00b      	b.n	8001ce0 <decode_extension+0x70>
        
        extension = extension->next;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d004      	beq.n	8001cde <decode_extension+0x6e>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d0d4      	beq.n	8001c88 <decode_extension+0x18>
    }
    
    return true;
 8001cde:	2301      	movs	r3, #1
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	371c      	adds	r7, #28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd90      	pop	{r4, r7, pc}

08001ce8 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08e      	sub	sp, #56	@ 0x38
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	7d9b      	ldrb	r3, [r3, #22]
 8001cf4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8001cf8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001cfc:	f003 030f 	and.w	r3, r3, #15
 8001d00:	2b0a      	cmp	r3, #10
 8001d02:	d124      	bne.n	8001d4e <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 8001d0c:	e01b      	b.n	8001d46 <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 8001d0e:	f107 0308 	add.w	r3, r7, #8
 8001d12:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe ffa0 	bl	8000c5a <pb_field_iter_begin_extension>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00f      	beq.n	8001d40 <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 8001d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d22:	2200      	movs	r2, #0
 8001d24:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 8001d26:	f107 0308 	add.w	r3, r7, #8
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 f89d 	bl	8001e6a <pb_message_set_to_defaults>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f083 0301 	eor.w	r3, r3, #1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <pb_field_set_to_default+0x58>
                    return false;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e090      	b.n	8001e62 <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 8001d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 8001d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1e0      	bne.n	8001d0e <pb_field_set_to_default+0x26>
 8001d4c:	e088      	b.n	8001e60 <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8001d4e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001d52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d166      	bne.n	8001e28 <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8001d60:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001d64:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001d68:	2b10      	cmp	r3, #16
 8001d6a:	d108      	bne.n	8001d7e <pb_field_set_to_default+0x96>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d004      	beq.n	8001d7e <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
 8001d7c:	e012      	b.n	8001da4 <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8001d7e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001d82:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001d86:	2b20      	cmp	r3, #32
 8001d88:	d005      	beq.n	8001d96 <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8001d8a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001d8e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8001d92:	2b30      	cmp	r3, #48	@ 0x30
 8001d94:	d106      	bne.n	8001da4 <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	801a      	strh	r2, [r3, #0]
            init_data = false;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        }

        if (init_data)
 8001da4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d059      	beq.n	8001e60 <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	7d9b      	ldrb	r3, [r3, #22]
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d005      	beq.n	8001dc4 <pb_field_set_to_default+0xdc>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	7d9b      	ldrb	r3, [r3, #22]
 8001dbc:	f003 030f 	and.w	r3, r3, #15
 8001dc0:	2b09      	cmp	r3, #9
 8001dc2:	d128      	bne.n	8001e16 <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc8:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10a      	bne.n	8001de4 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd2:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d105      	bne.n	8001de4 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d018      	beq.n	8001e16 <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69da      	ldr	r2, [r3, #28]
 8001dec:	f107 0308 	add.w	r3, r7, #8
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe ff19 	bl	8000c28 <pb_field_iter_begin>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d030      	beq.n	8001e5e <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 8001dfc:	f107 0308 	add.w	r3, r7, #8
 8001e00:	4618      	mov	r0, r3
 8001e02:	f000 f832 	bl	8001e6a <pb_message_set_to_defaults>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f083 0301 	eor.w	r3, r3, #1
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d025      	beq.n	8001e5e <pb_field_set_to_default+0x176>
                        return false;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e025      	b.n	8001e62 <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69d8      	ldr	r0, [r3, #28]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	8a5b      	ldrh	r3, [r3, #18]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	2100      	movs	r1, #0
 8001e22:	f004 f949 	bl	80060b8 <memset>
 8001e26:	e01b      	b.n	8001e60 <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8001e28:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001e2c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001e30:	2b80      	cmp	r3, #128	@ 0x80
 8001e32:	d115      	bne.n	8001e60 <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8001e3c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001e40:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001e44:	2b20      	cmp	r3, #32
 8001e46:	d005      	beq.n	8001e54 <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8001e48:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001e4c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8001e50:	2b30      	cmp	r3, #48	@ 0x30
 8001e52:	d105      	bne.n	8001e60 <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	801a      	strh	r2, [r3, #0]
 8001e5c:	e000      	b.n	8001e60 <pb_field_set_to_default+0x178>
            {
 8001e5e:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 8001e60:	2301      	movs	r3, #1
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3738      	adds	r7, #56	@ 0x38
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 8001e6a:	b590      	push	{r4, r7, lr}
 8001e6c:	b08d      	sub	sp, #52	@ 0x34
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 8001e72:	f107 0320 	add.w	r3, r7, #32
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 8001e84:	2300      	movs	r3, #0
 8001e86:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d020      	beq.n	8001ed4 <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6899      	ldr	r1, [r3, #8]
 8001e98:	463b      	mov	r3, r7
 8001e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff f8e0 	bl	8001064 <pb_istream_from_buffer>
 8001ea4:	f107 0420 	add.w	r4, r7, #32
 8001ea8:	463b      	mov	r3, r7
 8001eaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8001eb0:	f107 031a 	add.w	r3, r7, #26
 8001eb4:	f107 021c 	add.w	r2, r7, #28
 8001eb8:	f107 011b 	add.w	r1, r7, #27
 8001ebc:	f107 0020 	add.w	r0, r7, #32
 8001ec0:	f7ff fa47 	bl	8001352 <pb_decode_tag>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f083 0301 	eor.w	r3, r3, #1
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <pb_message_set_to_defaults+0x6a>
            return false;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e043      	b.n	8001f5c <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 8001ed4:	6978      	ldr	r0, [r7, #20]
 8001ed6:	f7ff ff07 	bl	8001ce8 <pb_field_set_to_default>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f083 0301 	eor.w	r3, r3, #1
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <pb_message_set_to_defaults+0x80>
            return false;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e038      	b.n	8001f5c <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d02e      	beq.n	8001f4e <pb_message_set_to_defaults+0xe4>
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	8a1b      	ldrh	r3, [r3, #16]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d128      	bne.n	8001f4e <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 8001efc:	7ef9      	ldrb	r1, [r7, #27]
 8001efe:	f107 0320 	add.w	r3, r7, #32
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fe3b 	bl	8001b80 <decode_field>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	f083 0301 	eor.w	r3, r3, #1
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <pb_message_set_to_defaults+0xb0>
                return false;
 8001f16:	2300      	movs	r3, #0
 8001f18:	e020      	b.n	8001f5c <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8001f1a:	f107 031a 	add.w	r3, r7, #26
 8001f1e:	f107 021c 	add.w	r2, r7, #28
 8001f22:	f107 011b 	add.w	r1, r7, #27
 8001f26:	f107 0020 	add.w	r0, r7, #32
 8001f2a:	f7ff fa12 	bl	8001352 <pb_decode_tag>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	f083 0301 	eor.w	r3, r3, #1
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <pb_message_set_to_defaults+0xd4>
                return false;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e00e      	b.n	8001f5c <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 8001f4e:	6978      	ldr	r0, [r7, #20]
 8001f50:	f7fe feb3 	bl	8000cba <pb_field_iter_next>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1bc      	bne.n	8001ed4 <pb_message_set_to_defaults+0x6a>

    return true;
 8001f5a:	2301      	movs	r3, #1
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3734      	adds	r7, #52	@ 0x34
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd90      	pop	{r4, r7, pc}

08001f64 <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b09a      	sub	sp, #104	@ 0x68
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
 8001f70:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	667b      	str	r3, [r7, #100]	@ 0x64
    pb_extension_t *extensions = NULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	663b      	str	r3, [r7, #96]	@ 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 8001f7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f7e:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    pb_size_t fixed_count_size = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    pb_size_t fixed_count_total_size = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 8001f8e:	2300      	movs	r3, #0
 8001f90:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f92:	2300      	movs	r3, #0
 8001f94:	647b      	str	r3, [r7, #68]	@ 0x44
    const uint32_t allbits = ~(uint32_t)0;
 8001f96:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9a:	657b      	str	r3, [r7, #84]	@ 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 8001f9c:	f107 0318 	add.w	r3, r7, #24
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	68b9      	ldr	r1, [r7, #8]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe fe3f 	bl	8000c28 <pb_field_iter_begin>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 8102 	beq.w	80021b6 <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f040 80fc 	bne.w	80021b6 <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 8001fbe:	f107 0318 	add.w	r3, r7, #24
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff ff51 	bl	8001e6a <pb_message_set_to_defaults>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	f083 0301 	eor.w	r3, r3, #1
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 80f0 	beq.w	80021b6 <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <pb_decode_inner+0x80>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	e000      	b.n	8001fe6 <pb_decode_inner+0x82>
 8001fe4:	4b99      	ldr	r3, [pc, #612]	@ (800224c <pb_decode_inner+0x2e8>)
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	60d3      	str	r3, [r2, #12]
 8001fea:	2300      	movs	r3, #0
 8001fec:	e16d      	b.n	80022ca <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8001fee:	f107 0312 	add.w	r3, r7, #18
 8001ff2:	f107 0214 	add.w	r2, r7, #20
 8001ff6:	f107 0113 	add.w	r1, r7, #19
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f7ff f9a9 	bl	8001352 <pb_decode_tag>
 8002000:	4603      	mov	r3, r0
 8002002:	f083 0301 	eor.w	r3, r3, #1
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <pb_decode_inner+0xb4>
        {
            if (eof)
 800200c:	7cbb      	ldrb	r3, [r7, #18]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f040 80d7 	bne.w	80021c2 <pb_decode_inner+0x25e>
                break;
            else
                return false;
 8002014:	2300      	movs	r3, #0
 8002016:	e158      	b.n	80022ca <pb_decode_inner+0x366>
        }

        if (tag == 0)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d111      	bne.n	8002042 <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	f040 80ce 	bne.w	80021c6 <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <pb_decode_inner+0xd4>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	e000      	b.n	800203a <pb_decode_inner+0xd6>
 8002038:	4b85      	ldr	r3, [pc, #532]	@ (8002250 <pb_decode_inner+0x2ec>)
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	60d3      	str	r3, [r2, #12]
 800203e:	2300      	movs	r3, #0
 8002040:	e143      	b.n	80022ca <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	f107 0318 	add.w	r3, r7, #24
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe fe4a 	bl	8000ce4 <pb_field_iter_find>
 8002050:	4603      	mov	r3, r0
 8002052:	f083 0301 	eor.w	r3, r3, #1
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	d105      	bne.n	8002068 <pb_decode_inner+0x104>
 800205c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	2b0a      	cmp	r3, #10
 8002066:	d13c      	bne.n	80020e2 <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 8002068:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800206a:	2b00      	cmp	r3, #0
 800206c:	d112      	bne.n	8002094 <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 800206e:	f107 0318 	add.w	r3, r7, #24
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe fe8c 	bl	8000d90 <pb_field_iter_find_extension>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d004      	beq.n	8002088 <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 800207e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	663b      	str	r3, [r7, #96]	@ 0x60
                    extension_range_start = iter.tag;
 8002084:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002086:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                if (!extensions)
 8002088:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800208a:	2b00      	cmp	r3, #0
 800208c:	d102      	bne.n	8002094 <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 800208e:	f04f 33ff 	mov.w	r3, #4294967295
 8002092:	667b      	str	r3, [r7, #100]	@ 0x64
                }
            }

            if (tag >= extension_range_start)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002098:	429a      	cmp	r2, r3
 800209a:	d815      	bhi.n	80020c8 <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	64fb      	str	r3, [r7, #76]	@ 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 80020a2:	6979      	ldr	r1, [r7, #20]
 80020a4:	7cfa      	ldrb	r2, [r7, #19]
 80020a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f7ff fde1 	bl	8001c70 <decode_extension>
 80020ae:	4603      	mov	r3, r0
 80020b0:	f083 0301 	eor.w	r3, r3, #1
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <pb_decode_inner+0x15a>
                    return false;
 80020ba:	2300      	movs	r3, #0
 80020bc:	e105      	b.n	80022ca <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d173      	bne.n	80021b0 <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 80020c8:	7cfb      	ldrb	r3, [r7, #19]
 80020ca:	4619      	mov	r1, r3
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f7ff f96f 	bl	80013b0 <pb_skip_field>
 80020d2:	4603      	mov	r3, r0
 80020d4:	f083 0301 	eor.w	r3, r3, #1
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d06a      	beq.n	80021b4 <pb_decode_inner+0x250>
                return false;
 80020de:	2300      	movs	r3, #0
 80020e0:	e0f3      	b.n	80022ca <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 80020e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80020e6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80020ea:	2b20      	cmp	r3, #32
 80020ec:	d12e      	bne.n	800214c <pb_decode_inner+0x1e8>
 80020ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80020f0:	f107 0318 	add.w	r3, r7, #24
 80020f4:	3314      	adds	r3, #20
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d128      	bne.n	800214c <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 80020fa:	8c3b      	ldrh	r3, [r7, #32]
 80020fc:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8002100:	429a      	cmp	r2, r3
 8002102:	d020      	beq.n	8002146 <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 8002104:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8002108:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800210c:	4293      	cmp	r3, r2
 800210e:	d011      	beq.n	8002134 <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 8002110:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 8002114:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8002118:	429a      	cmp	r2, r3
 800211a:	d00b      	beq.n	8002134 <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <pb_decode_inner+0x1c6>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	e000      	b.n	800212c <pb_decode_inner+0x1c8>
 800212a:	4b4a      	ldr	r3, [pc, #296]	@ (8002254 <pb_decode_inner+0x2f0>)
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	60d3      	str	r3, [r2, #12]
 8002130:	2300      	movs	r3, #0
 8002132:	e0ca      	b.n	80022ca <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 8002134:	8c3b      	ldrh	r3, [r7, #32]
 8002136:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                fixed_count_size = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
                fixed_count_total_size = iter.array_size;
 8002140:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002142:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
            }

            iter.pSize = &fixed_count_size;
 8002146:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 800214a:	63bb      	str	r3, [r7, #56]	@ 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 800214c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002150:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002154:	2b00      	cmp	r3, #0
 8002156:	d11c      	bne.n	8002192 <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8002158:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800215a:	2b3f      	cmp	r3, #63	@ 0x3f
 800215c:	d819      	bhi.n	8002192 <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 800215e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	2201      	movs	r2, #1
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	653b      	str	r3, [r7, #80]	@ 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 800216c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800216e:	095b      	lsrs	r3, r3, #5
 8002170:	b29b      	uxth	r3, r3
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	3368      	adds	r3, #104	@ 0x68
 8002176:	443b      	add	r3, r7
 8002178:	f853 2c28 	ldr.w	r2, [r3, #-40]
 800217c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	b29b      	uxth	r3, r3
 8002182:	4619      	mov	r1, r3
 8002184:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002186:	431a      	orrs	r2, r3
 8002188:	008b      	lsls	r3, r1, #2
 800218a:	3368      	adds	r3, #104	@ 0x68
 800218c:	443b      	add	r3, r7
 800218e:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 8002192:	7cfb      	ldrb	r3, [r7, #19]
 8002194:	f107 0218 	add.w	r2, r7, #24
 8002198:	4619      	mov	r1, r3
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f7ff fcf0 	bl	8001b80 <decode_field>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f083 0301 	eor.w	r3, r3, #1
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d004      	beq.n	80021b6 <pb_decode_inner+0x252>
            return false;
 80021ac:	2300      	movs	r3, #0
 80021ae:	e08c      	b.n	80022ca <pb_decode_inner+0x366>
                    continue;
 80021b0:	bf00      	nop
 80021b2:	e000      	b.n	80021b6 <pb_decode_inner+0x252>
            continue;
 80021b4:	bf00      	nop
    while (stream->bytes_left)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f47f af17 	bne.w	8001fee <pb_decode_inner+0x8a>
 80021c0:	e002      	b.n	80021c8 <pb_decode_inner+0x264>
                break;
 80021c2:	bf00      	nop
 80021c4:	e000      	b.n	80021c8 <pb_decode_inner+0x264>
            break;
 80021c6:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 80021c8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80021cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d011      	beq.n	80021f8 <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 80021d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 80021d8:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 80021dc:	429a      	cmp	r2, r3
 80021de:	d00b      	beq.n	80021f8 <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <pb_decode_inner+0x28a>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	e000      	b.n	80021f0 <pb_decode_inner+0x28c>
 80021ee:	4b19      	ldr	r3, [pc, #100]	@ (8002254 <pb_decode_inner+0x2f0>)
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	60d3      	str	r3, [r2, #12]
 80021f4:	2300      	movs	r3, #0
 80021f6:	e068      	b.n	80022ca <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	8a5b      	ldrh	r3, [r3, #18]
 80021fc:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

        if (req_field_count > 0)
 8002200:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002204:	2b00      	cmp	r3, #0
 8002206:	d05f      	beq.n	80022c8 <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8002208:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800220c:	2b40      	cmp	r3, #64	@ 0x40
 800220e:	d902      	bls.n	8002216 <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 8002210:	2340      	movs	r3, #64	@ 0x40
 8002212:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 8002216:	2300      	movs	r3, #0
 8002218:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800221c:	e023      	b.n	8002266 <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 800221e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	3368      	adds	r3, #104	@ 0x68
 8002226:	443b      	add	r3, r7
 8002228:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800222c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800222e:	429a      	cmp	r2, r3
 8002230:	d014      	beq.n	800225c <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d002      	beq.n	8002240 <pb_decode_inner+0x2dc>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	e000      	b.n	8002242 <pb_decode_inner+0x2de>
 8002240:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <pb_decode_inner+0x2f4>)
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	60d3      	str	r3, [r2, #12]
 8002246:	2300      	movs	r3, #0
 8002248:	e03f      	b.n	80022ca <pb_decode_inner+0x366>
 800224a:	bf00      	nop
 800224c:	08006ce4 	.word	0x08006ce4
 8002250:	08006d34 	.word	0x08006d34
 8002254:	08006d40 	.word	0x08006d40
 8002258:	08006d64 	.word	0x08006d64
            for (i = 0; i < (req_field_count >> 5); i++)
 800225c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002260:	3301      	adds	r3, #1
 8002262:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8002266:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	b29b      	uxth	r3, r3
 800226e:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8002272:	429a      	cmp	r2, r3
 8002274:	d3d3      	bcc.n	800221e <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 8002276:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800227a:	f003 031f 	and.w	r3, r3, #31
 800227e:	2b00      	cmp	r3, #0
 8002280:	d022      	beq.n	80022c8 <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8002282:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	b29b      	uxth	r3, r3
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	3368      	adds	r3, #104	@ 0x68
 800228e:	443b      	add	r3, r7
 8002290:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 8002294:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002298:	b2db      	uxtb	r3, r3
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	f1c3 0320 	rsb	r3, r3, #32
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	4619      	mov	r1, r3
 80022a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022aa:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d00b      	beq.n	80022c8 <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d002      	beq.n	80022be <pb_decode_inner+0x35a>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	e000      	b.n	80022c0 <pb_decode_inner+0x35c>
 80022be:	4b05      	ldr	r3, [pc, #20]	@ (80022d4 <pb_decode_inner+0x370>)
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	60d3      	str	r3, [r2, #12]
 80022c4:	2300      	movs	r3, #0
 80022c6:	e000      	b.n	80022ca <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 80022c8:	2301      	movs	r3, #1
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3768      	adds	r7, #104	@ 0x68
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	08006d64 	.word	0x08006d64

080022d8 <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 80022e4:	2300      	movs	r3, #0
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f7ff fe3a 	bl	8001f64 <pb_decode_inner>
 80022f0:	4603      	mov	r3, r0
 80022f2:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 80022f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b084      	sub	sp, #16
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 8002308:	f107 030c 	add.w	r3, r7, #12
 800230c:	4619      	mov	r1, r3
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7fe ff70 	bl	80011f4 <pb_decode_varint32>
 8002314:	4603      	mov	r3, r0
 8002316:	f083 0301 	eor.w	r3, r3, #1
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <pb_decode_bool+0x26>
        return false;
 8002320:	2300      	movs	r3, #0
 8002322:	e008      	b.n	8002336 <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b00      	cmp	r3, #0
 8002328:	bf14      	ite	ne
 800232a:	2301      	movne	r3, #1
 800232c:	2300      	moveq	r3, #0
 800232e:	b2da      	uxtb	r2, r3
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	701a      	strb	r2, [r3, #0]
    return true;
 8002334:	2301      	movs	r3, #1
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 800233e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 800234a:	f107 0308 	add.w	r3, r7, #8
 800234e:	4619      	mov	r1, r3
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7fe ff5f 	bl	8001214 <pb_decode_varint>
 8002356:	4603      	mov	r3, r0
 8002358:	f083 0301 	eor.w	r3, r3, #1
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <pb_decode_svarint+0x28>
        return false;
 8002362:	2300      	movs	r3, #0
 8002364:	e029      	b.n	80023ba <pb_decode_svarint+0x7c>
    
    if (value & 1)
 8002366:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800236a:	f002 0401 	and.w	r4, r2, #1
 800236e:	2500      	movs	r5, #0
 8002370:	ea54 0305 	orrs.w	r3, r4, r5
 8002374:	d013      	beq.n	800239e <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 8002376:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	f04f 0300 	mov.w	r3, #0
 8002382:	0842      	lsrs	r2, r0, #1
 8002384:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8002388:	084b      	lsrs	r3, r1, #1
 800238a:	ea6f 0802 	mvn.w	r8, r2
 800238e:	ea6f 0903 	mvn.w	r9, r3
 8002392:	4642      	mov	r2, r8
 8002394:	464b      	mov	r3, r9
 8002396:	6839      	ldr	r1, [r7, #0]
 8002398:	e9c1 2300 	strd	r2, r3, [r1]
 800239c:	e00c      	b.n	80023b8 <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 800239e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	0842      	lsrs	r2, r0, #1
 80023ac:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80023b0:	084b      	lsrs	r3, r1, #1
 80023b2:	6839      	ldr	r1, [r7, #0]
 80023b4:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 80023b8:	2301      	movs	r3, #1
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080023c4 <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 80023ce:	f107 030c 	add.w	r3, r7, #12
 80023d2:	2204      	movs	r2, #4
 80023d4:	4619      	mov	r1, r3
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7fe fd92 	bl	8000f00 <pb_read>
 80023dc:	4603      	mov	r3, r0
 80023de:	f083 0301 	eor.w	r3, r3, #1
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <pb_decode_fixed32+0x28>
        return false;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e003      	b.n	80023f4 <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 80023f2:	2301      	movs	r3, #1
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 8002406:	f107 0308 	add.w	r3, r7, #8
 800240a:	2208      	movs	r2, #8
 800240c:	4619      	mov	r1, r3
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7fe fd76 	bl	8000f00 <pb_read>
 8002414:	4603      	mov	r3, r0
 8002416:	f083 0301 	eor.w	r3, r3, #1
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <pb_decode_fixed64+0x28>
        return false;
 8002420:	2300      	movs	r3, #0
 8002422:	e005      	b.n	8002430 <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 8002424:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002428:	6839      	ldr	r1, [r7, #0]
 800242a:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 800242e:	2301      	movs	r3, #1
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	4619      	mov	r1, r3
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff ff58 	bl	80022fe <pb_decode_bool>
 800244e:	4603      	mov	r3, r0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8002458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800245c:	b094      	sub	sp, #80	@ 0x50
 800245e:	af00      	add	r7, sp, #0
 8002460:	6278      	str	r0, [r7, #36]	@ 0x24
 8002462:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	7d9b      	ldrb	r3, [r3, #22]
 8002468:	f003 030f 	and.w	r3, r3, #15
 800246c:	2b02      	cmp	r3, #2
 800246e:	d179      	bne.n	8002564 <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 8002470:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002474:	4619      	mov	r1, r3
 8002476:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002478:	f7fe fecc 	bl	8001214 <pb_decode_varint>
 800247c:	4603      	mov	r3, r0
 800247e:	f083 0301 	eor.w	r3, r3, #1
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <pb_dec_varint+0x34>
            return false;
 8002488:	2300      	movs	r3, #0
 800248a:	e107      	b.n	800269c <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	8a5b      	ldrh	r3, [r3, #18]
 8002490:	2b08      	cmp	r3, #8
 8002492:	d10a      	bne.n	80024aa <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	69d9      	ldr	r1, [r3, #28]
 8002498:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800249c:	e9c1 2300 	strd	r2, r3, [r1]
 80024a0:	e9d1 2300 	ldrd	r2, r3, [r1]
 80024a4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 80024a8:	e046      	b.n	8002538 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	8a5b      	ldrh	r3, [r3, #18]
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d10e      	bne.n	80024d0 <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 80024b2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	4602      	mov	r2, r0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2200      	movs	r2, #0
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	617a      	str	r2, [r7, #20]
 80024c6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80024ca:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 80024ce:	e033      	b.n	8002538 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	8a5b      	ldrh	r3, [r3, #18]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d10f      	bne.n	80024f8 <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 80024d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	b282      	uxth	r2, r0
 80024e2:	801a      	strh	r2, [r3, #0]
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	2200      	movs	r2, #0
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	60fa      	str	r2, [r7, #12]
 80024ee:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80024f2:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 80024f6:	e01f      	b.n	8002538 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	8a5b      	ldrh	r3, [r3, #18]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d10f      	bne.n	8002520 <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 8002500:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	b2c2      	uxtb	r2, r0
 800250a:	701a      	strb	r2, [r3, #0]
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2200      	movs	r2, #0
 8002512:	603b      	str	r3, [r7, #0]
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	e9d7 3400 	ldrd	r3, r4, [r7]
 800251a:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 800251e:	e00b      	b.n	8002538 <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8002520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <pb_dec_varint+0xd6>
 8002528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	e000      	b.n	8002530 <pb_dec_varint+0xd8>
 800252e:	4b5e      	ldr	r3, [pc, #376]	@ (80026a8 <pb_dec_varint+0x250>)
 8002530:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002532:	60d3      	str	r3, [r2, #12]
 8002534:	2300      	movs	r3, #0
 8002536:	e0b1      	b.n	800269c <pb_dec_varint+0x244>

        if (clamped != value)
 8002538:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800253c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002540:	4299      	cmp	r1, r3
 8002542:	bf08      	it	eq
 8002544:	4290      	cmpeq	r0, r2
 8002546:	d00b      	beq.n	8002560 <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 8002548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <pb_dec_varint+0xfe>
 8002550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	e000      	b.n	8002558 <pb_dec_varint+0x100>
 8002556:	4b55      	ldr	r3, [pc, #340]	@ (80026ac <pb_dec_varint+0x254>)
 8002558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800255a:	60d3      	str	r3, [r2, #12]
 800255c:	2300      	movs	r3, #0
 800255e:	e09d      	b.n	800269c <pb_dec_varint+0x244>

        return true;
 8002560:	2301      	movs	r3, #1
 8002562:	e09b      	b.n	800269c <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	7d9b      	ldrb	r3, [r3, #22]
 8002568:	f003 030f 	and.w	r3, r3, #15
 800256c:	2b03      	cmp	r3, #3
 800256e:	d10d      	bne.n	800258c <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 8002570:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002574:	4619      	mov	r1, r3
 8002576:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002578:	f7ff fee1 	bl	800233e <pb_decode_svarint>
 800257c:	4603      	mov	r3, r0
 800257e:	f083 0301 	eor.w	r3, r3, #1
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d022      	beq.n	80025ce <pb_dec_varint+0x176>
                return false;
 8002588:	2300      	movs	r3, #0
 800258a:	e087      	b.n	800269c <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 800258c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002590:	4619      	mov	r1, r3
 8002592:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002594:	f7fe fe3e 	bl	8001214 <pb_decode_varint>
 8002598:	4603      	mov	r3, r0
 800259a:	f083 0301 	eor.w	r3, r3, #1
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <pb_dec_varint+0x150>
                return false;
 80025a4:	2300      	movs	r3, #0
 80025a6:	e079      	b.n	800269c <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	8a5b      	ldrh	r3, [r3, #18]
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d104      	bne.n	80025ba <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 80025b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80025b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80025b8:	e009      	b.n	80025ce <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 80025ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80025be:	4613      	mov	r3, r2
 80025c0:	17da      	asrs	r2, r3, #31
 80025c2:	61bb      	str	r3, [r7, #24]
 80025c4:	61fa      	str	r2, [r7, #28]
 80025c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	8a5b      	ldrh	r3, [r3, #18]
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d10a      	bne.n	80025ec <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	69d9      	ldr	r1, [r3, #28]
 80025da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025de:	e9c1 2300 	strd	r2, r3, [r1]
 80025e2:	e9d1 2300 	ldrd	r2, r3, [r1]
 80025e6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80025ea:	e042      	b.n	8002672 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	8a5b      	ldrh	r3, [r3, #18]
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d10c      	bne.n	800260e <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 80025f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	4602      	mov	r2, r0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	17da      	asrs	r2, r3, #31
 8002604:	469a      	mov	sl, r3
 8002606:	4693      	mov	fp, r2
 8002608:	e9c7 ab10 	strd	sl, fp, [r7, #64]	@ 0x40
 800260c:	e031      	b.n	8002672 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	8a5b      	ldrh	r3, [r3, #18]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d10e      	bne.n	8002634 <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 8002616:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	b202      	sxth	r2, r0
 8002620:	801a      	strh	r2, [r3, #0]
 8002622:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002626:	b21b      	sxth	r3, r3
 8002628:	17da      	asrs	r2, r3, #31
 800262a:	4698      	mov	r8, r3
 800262c:	4691      	mov	r9, r2
 800262e:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
 8002632:	e01e      	b.n	8002672 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	8a5b      	ldrh	r3, [r3, #18]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d10e      	bne.n	800265a <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 800263c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002640:	6a3b      	ldr	r3, [r7, #32]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	b242      	sxtb	r2, r0
 8002646:	701a      	strb	r2, [r3, #0]
 8002648:	f993 3000 	ldrsb.w	r3, [r3]
 800264c:	b25b      	sxtb	r3, r3
 800264e:	17da      	asrs	r2, r3, #31
 8002650:	461c      	mov	r4, r3
 8002652:	4615      	mov	r5, r2
 8002654:	e9c7 4510 	strd	r4, r5, [r7, #64]	@ 0x40
 8002658:	e00b      	b.n	8002672 <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800265a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <pb_dec_varint+0x210>
 8002662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	e000      	b.n	800266a <pb_dec_varint+0x212>
 8002668:	4b0f      	ldr	r3, [pc, #60]	@ (80026a8 <pb_dec_varint+0x250>)
 800266a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800266c:	60d3      	str	r3, [r2, #12]
 800266e:	2300      	movs	r3, #0
 8002670:	e014      	b.n	800269c <pb_dec_varint+0x244>

        if (clamped != svalue)
 8002672:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002676:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800267a:	4299      	cmp	r1, r3
 800267c:	bf08      	it	eq
 800267e:	4290      	cmpeq	r0, r2
 8002680:	d00b      	beq.n	800269a <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 8002682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <pb_dec_varint+0x238>
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	e000      	b.n	8002692 <pb_dec_varint+0x23a>
 8002690:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <pb_dec_varint+0x254>)
 8002692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002694:	60d3      	str	r3, [r2, #12]
 8002696:	2300      	movs	r3, #0
 8002698:	e000      	b.n	800269c <pb_dec_varint+0x244>

        return true;
 800269a:	2301      	movs	r3, #1
    }
}
 800269c:	4618      	mov	r0, r3
 800269e:	3750      	adds	r7, #80	@ 0x50
 80026a0:	46bd      	mov	sp, r7
 80026a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026a6:	bf00      	nop
 80026a8:	08006d7c 	.word	0x08006d7c
 80026ac:	08006d90 	.word	0x08006d90

080026b0 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 80026ba:	f107 030c 	add.w	r3, r7, #12
 80026be:	4619      	mov	r1, r3
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7fe fd97 	bl	80011f4 <pb_decode_varint32>
 80026c6:	4603      	mov	r3, r0
 80026c8:	f083 0301 	eor.w	r3, r3, #1
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <pb_dec_bytes+0x26>
        return false;
 80026d2:	2300      	movs	r3, #0
 80026d4:	e055      	b.n	8002782 <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026dc:	d30b      	bcc.n	80026f6 <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <pb_dec_bytes+0x3c>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	e000      	b.n	80026ee <pb_dec_bytes+0x3e>
 80026ec:	4b27      	ldr	r3, [pc, #156]	@ (800278c <pb_dec_bytes+0xdc>)
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	60d3      	str	r3, [r2, #12]
 80026f2:	2300      	movs	r3, #0
 80026f4:	e045      	b.n	8002782 <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	3302      	adds	r3, #2
 80026fa:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	429a      	cmp	r2, r3
 8002702:	d20b      	bcs.n	800271c <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <pb_dec_bytes+0x62>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	e000      	b.n	8002714 <pb_dec_bytes+0x64>
 8002712:	4b1f      	ldr	r3, [pc, #124]	@ (8002790 <pb_dec_bytes+0xe0>)
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	60d3      	str	r3, [r2, #12]
 8002718:	2300      	movs	r3, #0
 800271a:	e032      	b.n	8002782 <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	7d9b      	ldrb	r3, [r3, #22]
 8002720:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002724:	2b80      	cmp	r3, #128	@ 0x80
 8002726:	d10b      	bne.n	8002740 <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <pb_dec_bytes+0x86>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	e000      	b.n	8002738 <pb_dec_bytes+0x88>
 8002736:	4b17      	ldr	r3, [pc, #92]	@ (8002794 <pb_dec_bytes+0xe4>)
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	60d3      	str	r3, [r2, #12]
 800273c:	2300      	movs	r3, #0
 800273e:	e020      	b.n	8002782 <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	8a5b      	ldrh	r3, [r3, #18]
 8002744:	461a      	mov	r2, r3
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	4293      	cmp	r3, r2
 800274a:	d90b      	bls.n	8002764 <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <pb_dec_bytes+0xaa>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	e000      	b.n	800275c <pb_dec_bytes+0xac>
 800275a:	4b0c      	ldr	r3, [pc, #48]	@ (800278c <pb_dec_bytes+0xdc>)
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	60d3      	str	r3, [r2, #12]
 8002760:	2300      	movs	r3, #0
 8002762:	e00e      	b.n	8002782 <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	b29a      	uxth	r2, r3
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	3302      	adds	r3, #2
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	4619      	mov	r1, r3
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7fe fbc0 	bl	8000f00 <pb_read>
 8002780:	4603      	mov	r3, r0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	08006da4 	.word	0x08006da4
 8002790:	08006db4 	.word	0x08006db4
 8002794:	08006cfc 	.word	0x08006cfc

08002798 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 80027a8:	f107 030c 	add.w	r3, r7, #12
 80027ac:	4619      	mov	r1, r3
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7fe fd20 	bl	80011f4 <pb_decode_varint32>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f083 0301 	eor.w	r3, r3, #1
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <pb_dec_string+0x2c>
        return false;
 80027c0:	2300      	movs	r3, #0
 80027c2:	e05a      	b.n	800287a <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ca:	d10b      	bne.n	80027e4 <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <pb_dec_string+0x42>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	e000      	b.n	80027dc <pb_dec_string+0x44>
 80027da:	4b2a      	ldr	r3, [pc, #168]	@ (8002884 <pb_dec_string+0xec>)
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	60d3      	str	r3, [r2, #12]
 80027e0:	2300      	movs	r3, #0
 80027e2:	e04a      	b.n	800287a <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	3301      	adds	r3, #1
 80027e8:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d20b      	bcs.n	800280a <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <pb_dec_string+0x68>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	e000      	b.n	8002802 <pb_dec_string+0x6a>
 8002800:	4b20      	ldr	r3, [pc, #128]	@ (8002884 <pb_dec_string+0xec>)
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	60d3      	str	r3, [r2, #12]
 8002806:	2300      	movs	r3, #0
 8002808:	e037      	b.n	800287a <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	7d9b      	ldrb	r3, [r3, #22]
 800280e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002812:	2b80      	cmp	r3, #128	@ 0x80
 8002814:	d10b      	bne.n	800282e <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <pb_dec_string+0x8c>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	e000      	b.n	8002826 <pb_dec_string+0x8e>
 8002824:	4b18      	ldr	r3, [pc, #96]	@ (8002888 <pb_dec_string+0xf0>)
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	60d3      	str	r3, [r2, #12]
 800282a:	2300      	movs	r3, #0
 800282c:	e025      	b.n	800287a <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	8a5b      	ldrh	r3, [r3, #18]
 8002832:	461a      	mov	r2, r3
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	4293      	cmp	r3, r2
 8002838:	d90b      	bls.n	8002852 <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <pb_dec_string+0xb0>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	e000      	b.n	800284a <pb_dec_string+0xb2>
 8002848:	4b10      	ldr	r3, [pc, #64]	@ (800288c <pb_dec_string+0xf4>)
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	60d3      	str	r3, [r2, #12]
 800284e:	2300      	movs	r3, #0
 8002850:	e013      	b.n	800287a <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	4413      	add	r3, r2
 8002858:	2200      	movs	r2, #0
 800285a:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	461a      	mov	r2, r3
 8002860:	6979      	ldr	r1, [r7, #20]
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7fe fb4c 	bl	8000f00 <pb_read>
 8002868:	4603      	mov	r3, r0
 800286a:	f083 0301 	eor.w	r3, r3, #1
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <pb_dec_string+0xe0>
        return false;
 8002874:	2300      	movs	r3, #0
 8002876:	e000      	b.n	800287a <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 8002878:	2301      	movs	r3, #1
}
 800287a:	4618      	mov	r0, r3
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	08006db4 	.word	0x08006db4
 8002888:	08006cfc 	.word	0x08006cfc
 800288c:	08006dc4 	.word	0x08006dc4

08002890 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	@ 0x28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
    bool status = true;
 800289a:	2301      	movs	r3, #1
 800289c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bool submsg_consumed = false;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 80028a6:	f107 030c 	add.w	r3, r7, #12
 80028aa:	4619      	mov	r1, r3
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7fe fe2d 	bl	800150c <pb_make_string_substream>
 80028b2:	4603      	mov	r3, r0
 80028b4:	f083 0301 	eor.w	r3, r3, #1
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <pb_dec_submessage+0x32>
        return false;
 80028be:	2300      	movs	r3, #0
 80028c0:	e069      	b.n	8002996 <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10b      	bne.n	80028e2 <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <pb_dec_submessage+0x48>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	e000      	b.n	80028da <pb_dec_submessage+0x4a>
 80028d8:	4b31      	ldr	r3, [pc, #196]	@ (80029a0 <pb_dec_submessage+0x110>)
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	60d3      	str	r3, [r2, #12]
 80028de:	2300      	movs	r3, #0
 80028e0:	e059      	b.n	8002996 <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	7d9b      	ldrb	r3, [r3, #22]
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	2b09      	cmp	r3, #9
 80028ec:	d11c      	bne.n	8002928 <pb_dec_submessage+0x98>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d018      	beq.n	8002928 <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	3b08      	subs	r3, #8
 80028fc:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d010      	beq.n	8002928 <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	3204      	adds	r2, #4
 800290e:	f107 000c 	add.w	r0, r7, #12
 8002912:	6839      	ldr	r1, [r7, #0]
 8002914:	4798      	blx	r3
 8002916:	4603      	mov	r3, r0
 8002918:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            if (substream.bytes_left == 0)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d102      	bne.n	8002928 <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 8002922:	2301      	movs	r3, #1
 8002924:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 8002928:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800292c:	2b00      	cmp	r3, #0
 800292e:	d022      	beq.n	8002976 <pb_dec_submessage+0xe6>
 8002930:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002934:	f083 0301 	eor.w	r3, r3, #1
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d01b      	beq.n	8002976 <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	7d9b      	ldrb	r3, [r3, #22]
 8002946:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d107      	bne.n	800295e <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	7d9b      	ldrb	r3, [r3, #22]
 8002952:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8002956:	2b20      	cmp	r3, #32
 8002958:	d001      	beq.n	800295e <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 800295a:	2301      	movs	r3, #1
 800295c:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	69da      	ldr	r2, [r3, #28]
 8002966:	f107 000c 	add.w	r0, r7, #12
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	f7ff fafa 	bl	8001f64 <pb_decode_inner>
 8002970:	4603      	mov	r3, r0
 8002972:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 8002976:	f107 030c 	add.w	r3, r7, #12
 800297a:	4619      	mov	r1, r3
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7fe fdff 	bl	8001580 <pb_close_string_substream>
 8002982:	4603      	mov	r3, r0
 8002984:	f083 0301 	eor.w	r3, r3, #1
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <pb_dec_submessage+0x102>
        return false;
 800298e:	2300      	movs	r3, #0
 8002990:	e001      	b.n	8002996 <pb_dec_submessage+0x106>

    return status;
 8002992:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002996:	4618      	mov	r0, r3
 8002998:	3728      	adds	r7, #40	@ 0x28
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	08006dd4 	.word	0x08006dd4

080029a4 <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 80029ae:	f107 030c 	add.w	r3, r7, #12
 80029b2:	4619      	mov	r1, r3
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7fe fc1d 	bl	80011f4 <pb_decode_varint32>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f083 0301 	eor.w	r3, r3, #1
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <pb_dec_fixed_length_bytes+0x26>
        return false;
 80029c6:	2300      	movs	r3, #0
 80029c8:	e037      	b.n	8002a3a <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029d0:	d30b      	bcc.n	80029ea <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <pb_dec_fixed_length_bytes+0x3c>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	e000      	b.n	80029e2 <pb_dec_fixed_length_bytes+0x3e>
 80029e0:	4b18      	ldr	r3, [pc, #96]	@ (8002a44 <pb_dec_fixed_length_bytes+0xa0>)
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	60d3      	str	r3, [r2, #12]
 80029e6:	2300      	movs	r3, #0
 80029e8:	e027      	b.n	8002a3a <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d109      	bne.n	8002a04 <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	69d8      	ldr	r0, [r3, #28]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	8a5b      	ldrh	r3, [r3, #18]
 80029f8:	461a      	mov	r2, r3
 80029fa:	2100      	movs	r1, #0
 80029fc:	f003 fb5c 	bl	80060b8 <memset>
        return true;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e01a      	b.n	8002a3a <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	8a5b      	ldrh	r3, [r3, #18]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d00b      	beq.n	8002a28 <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <pb_dec_fixed_length_bytes+0x7a>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	e000      	b.n	8002a20 <pb_dec_fixed_length_bytes+0x7c>
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a48 <pb_dec_fixed_length_bytes+0xa4>)
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	60d3      	str	r3, [r2, #12]
 8002a24:	2300      	movs	r3, #0
 8002a26:	e008      	b.n	8002a3a <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	69d9      	ldr	r1, [r3, #28]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	8a5b      	ldrh	r3, [r3, #18]
 8002a30:	461a      	mov	r2, r3
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7fe fa64 	bl	8000f00 <pb_read>
 8002a38:	4603      	mov	r3, r0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	08006da4 	.word	0x08006da4
 8002a48:	08006df0 	.word	0x08006df0

08002a4c <buf_write>:
/*******************************
 * pb_ostream_t implementation *
 *******************************/

static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
    pb_byte_t *dest = (pb_byte_t*)stream->state;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	617b      	str	r3, [r7, #20]
    stream->state = dest + count;
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	441a      	add	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	605a      	str	r2, [r3, #4]
    
    memcpy(dest, buf, count * sizeof(pb_byte_t));
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	68b9      	ldr	r1, [r7, #8]
 8002a6c:	6978      	ldr	r0, [r7, #20]
 8002a6e:	f003 fb9e 	bl	80061ae <memcpy>
    
    return true;
 8002a72:	2301      	movs	r3, #1
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <pb_ostream_from_buffer>:

pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize)
{
 8002a7c:	b4b0      	push	{r4, r5, r7}
 8002a7e:	b08b      	sub	sp, #44	@ 0x2c
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
     * NULL pointer marks a sizing field, so put a non-NULL value to mark a buffer stream.
     */
    static const int marker = 0;
    stream.callback = &marker;
#else
    stream.callback = &buf_write;
 8002a88:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab8 <pb_ostream_from_buffer+0x3c>)
 8002a8a:	617b      	str	r3, [r7, #20]
#endif
    stream.state = buf;
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	61bb      	str	r3, [r7, #24]
    stream.max_size = bufsize;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	61fb      	str	r3, [r7, #28]
    stream.bytes_written = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	461d      	mov	r5, r3
 8002aa0:	f107 0414 	add.w	r4, r7, #20
 8002aa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aa8:	6823      	ldr	r3, [r4, #0]
 8002aaa:	602b      	str	r3, [r5, #0]
}
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	372c      	adds	r7, #44	@ 0x2c
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bcb0      	pop	{r4, r5, r7}
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	08002a4d 	.word	0x08002a4d

08002abc <pb_write>:

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
    if (count > 0 && stream->callback != NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d037      	beq.n	8002b3e <pb_write+0x82>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d033      	beq.n	8002b3e <pb_write+0x82>
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	441a      	add	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d307      	bcc.n	8002af6 <pb_write+0x3a>
            stream->bytes_written + count > stream->max_size)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	441a      	add	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	689b      	ldr	r3, [r3, #8]
        if (stream->bytes_written + count < stream->bytes_written ||
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d90b      	bls.n	8002b0e <pb_write+0x52>
        {
            PB_RETURN_ERROR(stream, "stream full");
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <pb_write+0x48>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	e000      	b.n	8002b06 <pb_write+0x4a>
 8002b04:	4b13      	ldr	r3, [pc, #76]	@ (8002b54 <pb_write+0x98>)
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	6113      	str	r3, [r2, #16]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	e01e      	b.n	8002b4c <pb_write+0x90>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	4798      	blx	r3
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f083 0301 	eor.w	r3, r3, #1
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00b      	beq.n	8002b3e <pb_write+0x82>
            PB_RETURN_ERROR(stream, "io error");
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <pb_write+0x78>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	e000      	b.n	8002b36 <pb_write+0x7a>
 8002b34:	4b08      	ldr	r3, [pc, #32]	@ (8002b58 <pb_write+0x9c>)
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	6113      	str	r3, [r2, #16]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	e006      	b.n	8002b4c <pb_write+0x90>
#endif
    }
    
    stream->bytes_written += count;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	441a      	add	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	60da      	str	r2, [r3, #12]
    return true;
 8002b4a:	2301      	movs	r3, #1
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	08006e14 	.word	0x08006e14
 8002b58:	08006e20 	.word	0x08006e20

08002b5c <safe_read_bool>:
/* Read a bool value without causing undefined behavior even if the value
 * is invalid. See issue #434 and
 * https://stackoverflow.com/questions/27661768/weird-results-for-conditional
 */
static bool safe_read_bool(const void *pSize)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
    const char *p = (const char *)pSize;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	60bb      	str	r3, [r7, #8]
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	e00a      	b.n	8002b84 <safe_read_bool+0x28>
    {
        if (p[i] != 0)
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4413      	add	r3, r2
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <safe_read_bool+0x22>
            return true;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e006      	b.n	8002b8c <safe_read_bool+0x30>
    for (i = 0; i < sizeof(bool); i++)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	3301      	adds	r3, #1
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f1      	beq.n	8002b6e <safe_read_bool+0x12>
    }
    return false;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <encode_array>:

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, pb_field_iter_t *field)
{
 8002b98:	b5b0      	push	{r4, r5, r7, lr}
 8002b9a:	b08c      	sub	sp, #48	@ 0x30
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
    pb_size_t count;
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    size_t size;
#endif

    count = *(pb_size_t*)field->pSize;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if (count == 0)
 8002baa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <encode_array+0x1c>
        return true;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e13d      	b.n	8002e30 <encode_array+0x298>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	7d9b      	ldrb	r3, [r3, #22]
 8002bb8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002bbc:	2b80      	cmp	r3, #128	@ 0x80
 8002bbe:	d010      	beq.n	8002be2 <encode_array+0x4a>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	8a9b      	ldrh	r3, [r3, #20]
 8002bc4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d90b      	bls.n	8002be2 <encode_array+0x4a>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d002      	beq.n	8002bd8 <encode_array+0x40>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	e000      	b.n	8002bda <encode_array+0x42>
 8002bd8:	4b97      	ldr	r3, [pc, #604]	@ (8002e38 <encode_array+0x2a0>)
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6113      	str	r3, [r2, #16]
 8002bde:	2300      	movs	r3, #0
 8002be0:	e126      	b.n	8002e30 <encode_array+0x298>
    
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	7d9b      	ldrb	r3, [r3, #22]
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	2b05      	cmp	r3, #5
 8002bec:	f200 80b3 	bhi.w	8002d56 <encode_array+0x1be>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	8a1b      	ldrh	r3, [r3, #16]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	2102      	movs	r1, #2
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fcdd 	bl	80035b8 <pb_encode_tag>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	f083 0301 	eor.w	r3, r3, #1
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <encode_array+0x76>
            return false;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e110      	b.n	8002e30 <encode_array+0x298>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	7d9b      	ldrb	r3, [r3, #22]
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d103      	bne.n	8002c22 <encode_array+0x8a>
        {
            size = 4 * (size_t)count;
 8002c1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c20:	e047      	b.n	8002cb2 <encode_array+0x11a>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	7d9b      	ldrb	r3, [r3, #22]
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	2b05      	cmp	r3, #5
 8002c2c:	d103      	bne.n	8002c36 <encode_array+0x9e>
        {
            size = 8 * (size_t)count;
 8002c2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c34:	e03d      	b.n	8002cb2 <encode_array+0x11a>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 8002c36:	f107 0308 	add.w	r3, r7, #8
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	605a      	str	r2, [r3, #4]
 8002c40:	609a      	str	r2, [r3, #8]
 8002c42:	60da      	str	r2, [r3, #12]
 8002c44:	611a      	str	r2, [r3, #16]
            void *pData_orig = field->pData;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	61fb      	str	r3, [r7, #28]
            for (i = 0; i < count; i++)
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002c50:	e026      	b.n	8002ca0 <encode_array+0x108>
            {
                if (!pb_enc_varint(&sizestream, field))
 8002c52:	f107 0308 	add.w	r3, r7, #8
 8002c56:	6839      	ldr	r1, [r7, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 fdef 	bl	800383c <pb_enc_varint>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f083 0301 	eor.w	r3, r3, #1
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d010      	beq.n	8002c8c <encode_array+0xf4>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <encode_array+0xe0>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	e005      	b.n	8002c84 <encode_array+0xec>
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <encode_array+0xea>
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	e000      	b.n	8002c84 <encode_array+0xec>
 8002c82:	4b6e      	ldr	r3, [pc, #440]	@ (8002e3c <encode_array+0x2a4>)
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6113      	str	r3, [r2, #16]
 8002c88:	2300      	movs	r3, #0
 8002c8a:	e0d1      	b.n	8002e30 <encode_array+0x298>
                field->pData = (char*)field->pData + field->data_size;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	8a52      	ldrh	r2, [r2, #18]
 8002c94:	441a      	add	r2, r3
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	61da      	str	r2, [r3, #28]
            for (i = 0; i < count; i++)
 8002c9a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002ca0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002ca2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d3d4      	bcc.n	8002c52 <encode_array+0xba>
            }
            field->pData = pData_orig;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	61da      	str	r2, [r3, #28]
            size = sizestream.bytes_written;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8002cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	461c      	mov	r4, r3
 8002cb8:	4615      	mov	r5, r2
 8002cba:	4622      	mov	r2, r4
 8002cbc:	462b      	mov	r3, r5
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 fbf7 	bl	80034b2 <pb_encode_varint>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f083 0301 	eor.w	r3, r3, #1
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <encode_array+0x13c>
            return false;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	e0ad      	b.n	8002e30 <encode_array+0x298>
        
        if (stream->callback == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d106      	bne.n	8002cea <encode_array+0x152>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8002cdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cde:	2100      	movs	r1, #0
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7ff feeb 	bl	8002abc <pb_write>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	e0a2      	b.n	8002e30 <encode_array+0x298>
        
        /* Write the data */
        for (i = 0; i < count; i++)
 8002cea:	2300      	movs	r3, #0
 8002cec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002cee:	e02d      	b.n	8002d4c <encode_array+0x1b4>
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	7d9b      	ldrb	r3, [r3, #22]
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d005      	beq.n	8002d08 <encode_array+0x170>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	7d9b      	ldrb	r3, [r3, #22]
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	2b05      	cmp	r3, #5
 8002d06:	d10b      	bne.n	8002d20 <encode_array+0x188>
            {
                if (!pb_enc_fixed(stream, field))
 8002d08:	6839      	ldr	r1, [r7, #0]
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fe58 	bl	80039c0 <pb_enc_fixed>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f083 0301 	eor.w	r3, r3, #1
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00d      	beq.n	8002d38 <encode_array+0x1a0>
                    return false;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e087      	b.n	8002e30 <encode_array+0x298>
            }
            else
            {
                if (!pb_enc_varint(stream, field))
 8002d20:	6839      	ldr	r1, [r7, #0]
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fd8a 	bl	800383c <pb_enc_varint>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f083 0301 	eor.w	r3, r3, #1
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <encode_array+0x1a0>
                    return false;
 8002d34:	2300      	movs	r3, #0
 8002d36:	e07b      	b.n	8002e30 <encode_array+0x298>
            }

            field->pData = (char*)field->pData + field->data_size;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	8a52      	ldrh	r2, [r2, #18]
 8002d40:	441a      	add	r2, r3
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 8002d46:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002d48:	3301      	adds	r3, #1
 8002d4a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002d4c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002d4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d3cd      	bcc.n	8002cf0 <encode_array+0x158>
 8002d54:	e06b      	b.n	8002e2e <encode_array+0x296>
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 8002d56:	2300      	movs	r3, #0
 8002d58:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002d5a:	e064      	b.n	8002e26 <encode_array+0x28e>
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	7d9b      	ldrb	r3, [r3, #22]
 8002d60:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002d64:	2b80      	cmp	r3, #128	@ 0x80
 8002d66:	d147      	bne.n	8002df8 <encode_array+0x260>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	7d9b      	ldrb	r3, [r3, #22]
 8002d6c:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8002d70:	2b07      	cmp	r3, #7
 8002d72:	d005      	beq.n	8002d80 <encode_array+0x1e8>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	7d9b      	ldrb	r3, [r3, #22]
 8002d78:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8002d7c:	2b06      	cmp	r3, #6
 8002d7e:	d13b      	bne.n	8002df8 <encode_array+0x260>
            {
                bool status;
                void *pData_orig = field->pData;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	623b      	str	r3, [r7, #32]
                field->pData = *(void* const*)field->pData;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	61da      	str	r2, [r3, #28]

                if (!field->pData)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d11c      	bne.n	8002dd2 <encode_array+0x23a>
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 8002d98:	6839      	ldr	r1, [r7, #0]
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fc36 	bl	800360c <pb_encode_tag_for_field>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00b      	beq.n	8002dbe <encode_array+0x226>
                             pb_encode_varint(stream, 0);
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fb7f 	bl	80034b2 <pb_encode_varint>
 8002db4:	4603      	mov	r3, r0
                    status = pb_encode_tag_for_field(stream, field) &&
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <encode_array+0x226>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <encode_array+0x228>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002dd0:	e006      	b.n	8002de0 <encode_array+0x248>
                }
                else
                {
                    status = encode_basic_field(stream, field);
 8002dd2:	6839      	ldr	r1, [r7, #0]
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f951 	bl	800307c <encode_basic_field>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }

                field->pData = pData_orig;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	6a3a      	ldr	r2, [r7, #32]
 8002de4:	61da      	str	r2, [r3, #28]

                if (!status)
 8002de6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002dea:	f083 0301 	eor.w	r3, r3, #1
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00d      	beq.n	8002e10 <encode_array+0x278>
                    return false;
 8002df4:	2300      	movs	r3, #0
 8002df6:	e01b      	b.n	8002e30 <encode_array+0x298>
            }
            else
            {
                if (!encode_basic_field(stream, field))
 8002df8:	6839      	ldr	r1, [r7, #0]
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f93e 	bl	800307c <encode_basic_field>
 8002e00:	4603      	mov	r3, r0
 8002e02:	f083 0301 	eor.w	r3, r3, #1
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d002      	beq.n	8002e12 <encode_array+0x27a>
                    return false;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	e00f      	b.n	8002e30 <encode_array+0x298>
            {
 8002e10:	bf00      	nop
            }
            field->pData = (char*)field->pData + field->data_size;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	8a52      	ldrh	r2, [r2, #18]
 8002e1a:	441a      	add	r2, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 8002e20:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002e22:	3301      	adds	r3, #1
 8002e24:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002e26:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002e28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d396      	bcc.n	8002d5c <encode_array+0x1c4>
        }
    }
    
    return true;
 8002e2e:	2301      	movs	r3, #1
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3730      	adds	r7, #48	@ 0x30
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bdb0      	pop	{r4, r5, r7, pc}
 8002e38:	08006e2c 	.word	0x08006e2c
 8002e3c:	08006e44 	.word	0x08006e44

08002e40 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b092      	sub	sp, #72	@ 0x48
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
    pb_type_t type = field->type;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	7d9b      	ldrb	r3, [r3, #22]
 8002e4c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8002e50:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002e54:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f040 80c9 	bne.w	8002ff0 <pb_check_proto3_default_value+0x1b0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 8002e5e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002e62:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <pb_check_proto3_default_value+0x2e>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	e100      	b.n	8003070 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8002e6e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002e72:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002e76:	2b20      	cmp	r3, #32
 8002e78:	d108      	bne.n	8002e8c <pb_check_proto3_default_value+0x4c>
        {
            /* Repeated fields inside proto3 submessage: present if count != 0 */
            return *(const pb_size_t*)field->pSize == 0;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf0c      	ite	eq
 8002e84:	2301      	moveq	r3, #1
 8002e86:	2300      	movne	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	e0f1      	b.n	8003070 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8002e8c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002e90:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002e94:	2b30      	cmp	r3, #48	@ 0x30
 8002e96:	d108      	bne.n	8002eaa <pb_check_proto3_default_value+0x6a>
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	bf0c      	ite	eq
 8002ea2:	2301      	moveq	r3, #1
 8002ea4:	2300      	movne	r3, #0
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	e0e2      	b.n	8003070 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8002eaa:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002eae:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002eb2:	2b10      	cmp	r3, #16
 8002eb4:	d115      	bne.n	8002ee2 <pb_check_proto3_default_value+0xa2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d011      	beq.n	8002ee2 <pb_check_proto3_default_value+0xa2>
        {
            /* Proto2 optional fields inside proto3 message, or proto3
             * submessage fields. */
            return safe_read_bool(field->pSize) == false;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fe4a 	bl	8002b5c <safe_read_bool>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	bf14      	ite	ne
 8002ece:	2301      	movne	r3, #1
 8002ed0:	2300      	moveq	r3, #0
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f083 0301 	eor.w	r3, r3, #1
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	e0c6      	b.n	8003070 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->default_value)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <pb_check_proto3_default_value+0xb0>
            /* Proto3 messages do not have default values, but proto2 messages
             * can contain optional fields without has_fields (generator option 'proto3').
             * In this case they must always be encoded, to make sure that the
             * non-zero default value is overwritten.
             */
            return false;
 8002eec:	2300      	movs	r3, #0
 8002eee:	e0bf      	b.n	8003070 <pb_check_proto3_default_value+0x230>
        }

        /* Rest is proto3 singular fields */
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 8002ef0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	2b05      	cmp	r3, #5
 8002efa:	d81c      	bhi.n	8002f36 <pb_check_proto3_default_value+0xf6>
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	637b      	str	r3, [r7, #52]	@ 0x34
            for (i = 0; i < field->data_size; i++)
 8002f02:	2300      	movs	r3, #0
 8002f04:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002f08:	e00d      	b.n	8002f26 <pb_check_proto3_default_value+0xe6>
            {
                if (p[i] != 0)
 8002f0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002f0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f10:	4413      	add	r3, r2
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <pb_check_proto3_default_value+0xdc>
                {
                    return false;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	e0a9      	b.n	8003070 <pb_check_proto3_default_value+0x230>
            for (i = 0; i < field->data_size; i++)
 8002f1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002f20:	3301      	adds	r3, #1
 8002f22:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	8a5b      	ldrh	r3, [r3, #18]
 8002f2a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d3eb      	bcc.n	8002f0a <pb_check_proto3_default_value+0xca>
                }
            }

            return true;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e09c      	b.n	8003070 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 8002f36:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	2b06      	cmp	r3, #6
 8002f40:	d10a      	bne.n	8002f58 <pb_check_proto3_default_value+0x118>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	63bb      	str	r3, [r7, #56]	@ 0x38
            return bytes->size == 0;
 8002f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bf0c      	ite	eq
 8002f50:	2301      	moveq	r3, #1
 8002f52:	2300      	movne	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	e08b      	b.n	8003070 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 8002f58:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002f5c:	f003 030f 	and.w	r3, r3, #15
 8002f60:	2b07      	cmp	r3, #7
 8002f62:	d108      	bne.n	8002f76 <pb_check_proto3_default_value+0x136>
        {
            return *(const char*)field->pData == '\0';
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	bf0c      	ite	eq
 8002f6e:	2301      	moveq	r3, #1
 8002f70:	2300      	movne	r3, #0
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	e07c      	b.n	8003070 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 8002f76:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	2b0b      	cmp	r3, #11
 8002f80:	d107      	bne.n	8002f92 <pb_check_proto3_default_value+0x152>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	8a5b      	ldrh	r3, [r3, #18]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	bf0c      	ite	eq
 8002f8a:	2301      	moveq	r3, #1
 8002f8c:	2300      	movne	r3, #0
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	e06e      	b.n	8003070 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE_IS_SUBMSG(type))
 8002f92:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d005      	beq.n	8002faa <pb_check_proto3_default_value+0x16a>
 8002f9e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	2b09      	cmp	r3, #9
 8002fa8:	d161      	bne.n	800306e <pb_check_proto3_default_value+0x22e>
             * because the C struct may contain padding bytes that must
             * be skipped. Note that usually proto3 submessages have
             * a separate has_field that is checked earlier in this if.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69da      	ldr	r2, [r3, #28]
 8002fb2:	f107 030c 	add.w	r3, r7, #12
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fd fe36 	bl	8000c28 <pb_field_iter_begin>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d014      	beq.n	8002fec <pb_check_proto3_default_value+0x1ac>
            {
                do
                {
                    if (!pb_check_proto3_default_value(&iter))
 8002fc2:	f107 030c 	add.w	r3, r7, #12
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff ff3a 	bl	8002e40 <pb_check_proto3_default_value>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	f083 0301 	eor.w	r3, r3, #1
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <pb_check_proto3_default_value+0x19c>
                    {
                        return false;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	e049      	b.n	8003070 <pb_check_proto3_default_value+0x230>
                    }
                } while (pb_field_iter_next(&iter));
 8002fdc:	f107 030c 	add.w	r3, r7, #12
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fd fe6a 	bl	8000cba <pb_field_iter_next>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1ea      	bne.n	8002fc2 <pb_check_proto3_default_value+0x182>
            }
            return true;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e03f      	b.n	8003070 <pb_check_proto3_default_value+0x230>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8002ff0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002ff4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002ff8:	2b80      	cmp	r3, #128	@ 0x80
 8002ffa:	d107      	bne.n	800300c <pb_check_proto3_default_value+0x1cc>
    {
        return field->pData == NULL;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	2b00      	cmp	r3, #0
 8003002:	bf0c      	ite	eq
 8003004:	2301      	moveq	r3, #1
 8003006:	2300      	movne	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	e031      	b.n	8003070 <pb_check_proto3_default_value+0x230>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
 800300c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003010:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003014:	2b40      	cmp	r3, #64	@ 0x40
 8003016:	d12a      	bne.n	800306e <pb_check_proto3_default_value+0x22e>
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8003018:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	2b0a      	cmp	r3, #10
 8003022:	d10a      	bne.n	800303a <pb_check_proto3_default_value+0x1fa>
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            return extension == NULL;
 800302c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800302e:	2b00      	cmp	r3, #0
 8003030:	bf0c      	ite	eq
 8003032:	2301      	moveq	r3, #1
 8003034:	2300      	movne	r3, #0
 8003036:	b2db      	uxtb	r3, r3
 8003038:	e01a      	b.n	8003070 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->field_callback == pb_default_field_callback)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4a0d      	ldr	r2, [pc, #52]	@ (8003078 <pb_check_proto3_default_value+0x238>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d10a      	bne.n	800305c <pb_check_proto3_default_value+0x21c>
        {
            pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	643b      	str	r3, [r7, #64]	@ 0x40
            return pCallback->funcs.encode == NULL;
 800304c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf0c      	ite	eq
 8003054:	2301      	moveq	r3, #1
 8003056:	2300      	movne	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	e009      	b.n	8003070 <pb_check_proto3_default_value+0x230>
        }
        else
        {
            return field->descriptor->field_callback == NULL;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	bf0c      	ite	eq
 8003066:	2301      	moveq	r3, #1
 8003068:	2300      	movne	r3, #0
 800306a:	b2db      	uxtb	r3, r3
 800306c:	e000      	b.n	8003070 <pb_check_proto3_default_value+0x230>
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3748      	adds	r7, #72	@ 0x48
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	08000e5d 	.word	0x08000e5d

0800307c <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
    if (!field->pData)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <encode_basic_field+0x16>
    {
        /* Missing pointer field */
        return true;
 800308e:	2301      	movs	r3, #1
 8003090:	e061      	b.n	8003156 <encode_basic_field+0xda>
    }

    if (!pb_encode_tag_for_field(stream, field))
 8003092:	6839      	ldr	r1, [r7, #0]
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 fab9 	bl	800360c <pb_encode_tag_for_field>
 800309a:	4603      	mov	r3, r0
 800309c:	f083 0301 	eor.w	r3, r3, #1
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <encode_basic_field+0x2e>
        return false;
 80030a6:	2300      	movs	r3, #0
 80030a8:	e055      	b.n	8003156 <encode_basic_field+0xda>

    switch (PB_LTYPE(field->type))
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	7d9b      	ldrb	r3, [r3, #22]
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	2b0b      	cmp	r3, #11
 80030b4:	d844      	bhi.n	8003140 <encode_basic_field+0xc4>
 80030b6:	a201      	add	r2, pc, #4	@ (adr r2, 80030bc <encode_basic_field+0x40>)
 80030b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030bc:	080030ed 	.word	0x080030ed
 80030c0:	080030f9 	.word	0x080030f9
 80030c4:	080030f9 	.word	0x080030f9
 80030c8:	080030f9 	.word	0x080030f9
 80030cc:	08003105 	.word	0x08003105
 80030d0:	08003105 	.word	0x08003105
 80030d4:	08003111 	.word	0x08003111
 80030d8:	0800311d 	.word	0x0800311d
 80030dc:	08003129 	.word	0x08003129
 80030e0:	08003129 	.word	0x08003129
 80030e4:	08003141 	.word	0x08003141
 80030e8:	08003135 	.word	0x08003135
    {
        case PB_LTYPE_BOOL:
            return pb_enc_bool(stream, field);
 80030ec:	6839      	ldr	r1, [r7, #0]
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fb8a 	bl	8003808 <pb_enc_bool>
 80030f4:	4603      	mov	r3, r0
 80030f6:	e02e      	b.n	8003156 <encode_basic_field+0xda>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            return pb_enc_varint(stream, field);
 80030f8:	6839      	ldr	r1, [r7, #0]
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fb9e 	bl	800383c <pb_enc_varint>
 8003100:	4603      	mov	r3, r0
 8003102:	e028      	b.n	8003156 <encode_basic_field+0xda>

        case PB_LTYPE_FIXED32:
        case PB_LTYPE_FIXED64:
            return pb_enc_fixed(stream, field);
 8003104:	6839      	ldr	r1, [r7, #0]
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fc5a 	bl	80039c0 <pb_enc_fixed>
 800310c:	4603      	mov	r3, r0
 800310e:	e022      	b.n	8003156 <encode_basic_field+0xda>

        case PB_LTYPE_BYTES:
            return pb_enc_bytes(stream, field);
 8003110:	6839      	ldr	r1, [r7, #0]
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fc82 	bl	8003a1c <pb_enc_bytes>
 8003118:	4603      	mov	r3, r0
 800311a:	e01c      	b.n	8003156 <encode_basic_field+0xda>

        case PB_LTYPE_STRING:
            return pb_enc_string(stream, field);
 800311c:	6839      	ldr	r1, [r7, #0]
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fcba 	bl	8003a98 <pb_enc_string>
 8003124:	4603      	mov	r3, r0
 8003126:	e016      	b.n	8003156 <encode_basic_field+0xda>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            return pb_enc_submessage(stream, field);
 8003128:	6839      	ldr	r1, [r7, #0]
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 fd12 	bl	8003b54 <pb_enc_submessage>
 8003130:	4603      	mov	r3, r0
 8003132:	e010      	b.n	8003156 <encode_basic_field+0xda>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            return pb_enc_fixed_length_bytes(stream, field);
 8003134:	6839      	ldr	r1, [r7, #0]
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fd52 	bl	8003be0 <pb_enc_fixed_length_bytes>
 800313c:	4603      	mov	r3, r0
 800313e:	e00a      	b.n	8003156 <encode_basic_field+0xda>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <encode_basic_field+0xd2>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	e000      	b.n	8003150 <encode_basic_field+0xd4>
 800314e:	4b04      	ldr	r3, [pc, #16]	@ (8003160 <encode_basic_field+0xe4>)
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6113      	str	r3, [r2, #16]
 8003154:	2300      	movs	r3, #0
    }
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	08006e4c 	.word	0x08006e4c

08003164 <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
    if (field->descriptor->field_callback != NULL)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d018      	beq.n	80031aa <encode_callback_field+0x46>
    {
        if (!field->descriptor->field_callback(NULL, stream, field))
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	2000      	movs	r0, #0
 8003184:	4798      	blx	r3
 8003186:	4603      	mov	r3, r0
 8003188:	f083 0301 	eor.w	r3, r3, #1
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00b      	beq.n	80031aa <encode_callback_field+0x46>
            PB_RETURN_ERROR(stream, "callback error");
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <encode_callback_field+0x3c>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	e000      	b.n	80031a2 <encode_callback_field+0x3e>
 80031a0:	4b04      	ldr	r3, [pc, #16]	@ (80031b4 <encode_callback_field+0x50>)
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6113      	str	r3, [r2, #16]
 80031a6:	2300      	movs	r3, #0
 80031a8:	e000      	b.n	80031ac <encode_callback_field+0x48>
    }
    return true;
 80031aa:	2301      	movs	r3, #1
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	08006e60 	.word	0x08006e60

080031b8 <encode_field>:

/* Encode a single field of any callback, pointer or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream, pb_field_iter_t *field)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
    /* Check field presence */
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	7d9b      	ldrb	r3, [r3, #22]
 80031c6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80031ca:	2b30      	cmp	r3, #48	@ 0x30
 80031cc:	d108      	bne.n	80031e0 <encode_field+0x28>
    {
        if (*(const pb_size_t*)field->pSize != field->tag)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	881a      	ldrh	r2, [r3, #0]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	8a1b      	ldrh	r3, [r3, #16]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d026      	beq.n	800322a <encode_field+0x72>
        {
            /* Different type oneof field */
            return true;
 80031dc:	2301      	movs	r3, #1
 80031de:	e059      	b.n	8003294 <encode_field+0xdc>
        }
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	7d9b      	ldrb	r3, [r3, #22]
 80031e4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80031e8:	2b10      	cmp	r3, #16
 80031ea:	d11e      	bne.n	800322a <encode_field+0x72>
    {
        if (field->pSize)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00c      	beq.n	800320e <encode_field+0x56>
        {
            if (safe_read_bool(field->pSize) == false)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fcaf 	bl	8002b5c <safe_read_bool>
 80031fe:	4603      	mov	r3, r0
 8003200:	f083 0301 	eor.w	r3, r3, #1
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00f      	beq.n	800322a <encode_field+0x72>
            {
                /* Missing optional field */
                return true;
 800320a:	2301      	movs	r3, #1
 800320c:	e042      	b.n	8003294 <encode_field+0xdc>
            }
        }
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	7d9b      	ldrb	r3, [r3, #22]
 8003212:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d107      	bne.n	800322a <encode_field+0x72>
        {
            /* Proto3 singular field */
            if (pb_check_proto3_default_value(field))
 800321a:	6838      	ldr	r0, [r7, #0]
 800321c:	f7ff fe10 	bl	8002e40 <pb_check_proto3_default_value>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <encode_field+0x72>
                return true;
 8003226:	2301      	movs	r3, #1
 8003228:	e034      	b.n	8003294 <encode_field+0xdc>
        }
    }

    if (!field->pData)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d113      	bne.n	800325a <encode_field+0xa2>
    {
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	7d9b      	ldrb	r3, [r3, #22]
 8003236:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10b      	bne.n	8003256 <encode_field+0x9e>
            PB_RETURN_ERROR(stream, "missing required field");
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <encode_field+0x94>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	e000      	b.n	800324e <encode_field+0x96>
 800324c:	4b13      	ldr	r3, [pc, #76]	@ (800329c <encode_field+0xe4>)
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6113      	str	r3, [r2, #16]
 8003252:	2300      	movs	r3, #0
 8003254:	e01e      	b.n	8003294 <encode_field+0xdc>

        /* Pointer field set to NULL */
        return true;
 8003256:	2301      	movs	r3, #1
 8003258:	e01c      	b.n	8003294 <encode_field+0xdc>
    }

    /* Then encode field contents */
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	7d9b      	ldrb	r3, [r3, #22]
 800325e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003262:	2b40      	cmp	r3, #64	@ 0x40
 8003264:	d105      	bne.n	8003272 <encode_field+0xba>
    {
        return encode_callback_field(stream, field);
 8003266:	6839      	ldr	r1, [r7, #0]
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff ff7b 	bl	8003164 <encode_callback_field>
 800326e:	4603      	mov	r3, r0
 8003270:	e010      	b.n	8003294 <encode_field+0xdc>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	7d9b      	ldrb	r3, [r3, #22]
 8003276:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800327a:	2b20      	cmp	r3, #32
 800327c:	d105      	bne.n	800328a <encode_field+0xd2>
    {
        return encode_array(stream, field);
 800327e:	6839      	ldr	r1, [r7, #0]
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7ff fc89 	bl	8002b98 <encode_array>
 8003286:	4603      	mov	r3, r0
 8003288:	e004      	b.n	8003294 <encode_field+0xdc>
    }
    else
    {
        return encode_basic_field(stream, field);
 800328a:	6839      	ldr	r1, [r7, #0]
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7ff fef5 	bl	800307c <encode_basic_field>
 8003292:	4603      	mov	r3, r0
    }
}
 8003294:	4618      	mov	r0, r3
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	08006e70 	.word	0x08006e70

080032a0 <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *extension)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08c      	sub	sp, #48	@ 0x30
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension_const(&iter, extension))
 80032aa:	f107 0308 	add.w	r3, r7, #8
 80032ae:	6839      	ldr	r1, [r7, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fd fdc1 	bl	8000e38 <pb_field_iter_begin_extension_const>
 80032b6:	4603      	mov	r3, r0
 80032b8:	f083 0301 	eor.w	r3, r3, #1
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00b      	beq.n	80032da <default_extension_encoder+0x3a>
        PB_RETURN_ERROR(stream, "invalid extension");
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <default_extension_encoder+0x30>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	e000      	b.n	80032d2 <default_extension_encoder+0x32>
 80032d0:	4b07      	ldr	r3, [pc, #28]	@ (80032f0 <default_extension_encoder+0x50>)
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6113      	str	r3, [r2, #16]
 80032d6:	2300      	movs	r3, #0
 80032d8:	e006      	b.n	80032e8 <default_extension_encoder+0x48>

    return encode_field(stream, &iter);
 80032da:	f107 0308 	add.w	r3, r7, #8
 80032de:	4619      	mov	r1, r3
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff ff69 	bl	80031b8 <encode_field>
 80032e6:	4603      	mov	r3, r0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3730      	adds	r7, #48	@ 0x30
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	08006e88 	.word	0x08006e88

080032f4 <encode_extension_field>:


/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	60fb      	str	r3, [r7, #12]

    while (extension)
 8003306:	e01e      	b.n	8003346 <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d008      	beq.n	8003324 <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	68f9      	ldr	r1, [r7, #12]
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	4798      	blx	r3
 800331e:	4603      	mov	r3, r0
 8003320:	72fb      	strb	r3, [r7, #11]
 8003322:	e005      	b.n	8003330 <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 8003324:	68f9      	ldr	r1, [r7, #12]
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7ff ffba 	bl	80032a0 <default_extension_encoder>
 800332c:	4603      	mov	r3, r0
 800332e:	72fb      	strb	r3, [r7, #11]

        if (!status)
 8003330:	7afb      	ldrb	r3, [r7, #11]
 8003332:	f083 0301 	eor.w	r3, r3, #1
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <encode_extension_field+0x4c>
            return false;
 800333c:	2300      	movs	r3, #0
 800333e:	e006      	b.n	800334e <encode_extension_field+0x5a>
        
        extension = extension->next;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	60fb      	str	r3, [r7, #12]
    while (extension)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1dd      	bne.n	8003308 <encode_extension_field+0x14>
    }
    
    return true;
 800334c:	2301      	movs	r3, #1
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <pb_encode>:
/*********************
 * Encode all fields *
 *********************/

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b08e      	sub	sp, #56	@ 0x38
 800335a:	af00      	add	r7, sp, #0
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
 8003362:	f107 0310 	add.w	r3, r7, #16
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd fd50 	bl	8000e10 <pb_field_iter_begin_const>
 8003370:	4603      	mov	r3, r0
 8003372:	f083 0301 	eor.w	r3, r3, #1
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <pb_encode+0x2a>
        return true; /* Empty message type */
 800337c:	2301      	movs	r3, #1
 800337e:	e02a      	b.n	80033d6 <pb_encode+0x80>
    
    do {
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8003380:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	2b0a      	cmp	r3, #10
 800338a:	d10d      	bne.n	80033a8 <pb_encode+0x52>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, &iter))
 800338c:	f107 0310 	add.w	r3, r7, #16
 8003390:	4619      	mov	r1, r3
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f7ff ffae 	bl	80032f4 <encode_extension_field>
 8003398:	4603      	mov	r3, r0
 800339a:	f083 0301 	eor.w	r3, r3, #1
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00f      	beq.n	80033c4 <pb_encode+0x6e>
                return false;
 80033a4:	2300      	movs	r3, #0
 80033a6:	e016      	b.n	80033d6 <pb_encode+0x80>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, &iter))
 80033a8:	f107 0310 	add.w	r3, r7, #16
 80033ac:	4619      	mov	r1, r3
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f7ff ff02 	bl	80031b8 <encode_field>
 80033b4:	4603      	mov	r3, r0
 80033b6:	f083 0301 	eor.w	r3, r3, #1
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <pb_encode+0x6e>
                return false;
 80033c0:	2300      	movs	r3, #0
 80033c2:	e008      	b.n	80033d6 <pb_encode+0x80>
        }
    } while (pb_field_iter_next(&iter));
 80033c4:	f107 0310 	add.w	r3, r7, #16
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fd fc76 	bl	8000cba <pb_field_iter_next>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1d5      	bne.n	8003380 <pb_encode+0x2a>
    
    return true;
 80033d4:	2301      	movs	r3, #1
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3738      	adds	r7, #56	@ 0x38
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <pb_encode_varint_32>:
 * Helper functions *
 ********************/

/* This function avoids 64-bit shifts as they are quite slow on many platforms. */
static bool checkreturn pb_encode_varint_32(pb_ostream_t *stream, uint32_t low, uint32_t high)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b088      	sub	sp, #32
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 80033ea:	2300      	movs	r3, #0
 80033ec:	61fb      	str	r3, [r7, #28]
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033f6:	76fb      	strb	r3, [r7, #27]
    low >>= 7;
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	09db      	lsrs	r3, r3, #7
 80033fc:	60bb      	str	r3, [r7, #8]

    while (i < 4 && (low != 0 || high != 0))
 80033fe:	e013      	b.n	8003428 <pb_encode_varint_32+0x4a>
    {
        byte |= 0x80;
 8003400:	7efb      	ldrb	r3, [r7, #27]
 8003402:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003406:	76fb      	strb	r3, [r7, #27]
        buffer[i++] = byte;
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	61fa      	str	r2, [r7, #28]
 800340e:	3320      	adds	r3, #32
 8003410:	443b      	add	r3, r7
 8003412:	7efa      	ldrb	r2, [r7, #27]
 8003414:	f803 2c10 	strb.w	r2, [r3, #-16]
        byte = (pb_byte_t)(low & 0x7F);
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	b2db      	uxtb	r3, r3
 800341c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003420:	76fb      	strb	r3, [r7, #27]
        low >>= 7;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	09db      	lsrs	r3, r3, #7
 8003426:	60bb      	str	r3, [r7, #8]
    while (i < 4 && (low != 0 || high != 0))
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	2b03      	cmp	r3, #3
 800342c:	d805      	bhi.n	800343a <pb_encode_varint_32+0x5c>
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1e5      	bne.n	8003400 <pb_encode_varint_32+0x22>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1e2      	bne.n	8003400 <pb_encode_varint_32+0x22>
    }

    if (high)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d024      	beq.n	800348a <pb_encode_varint_32+0xac>
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	b2db      	uxtb	r3, r3
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	b2db      	uxtb	r3, r3
 8003448:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800344c:	b2da      	uxtb	r2, r3
 800344e:	7efb      	ldrb	r3, [r7, #27]
 8003450:	4313      	orrs	r3, r2
 8003452:	76fb      	strb	r3, [r7, #27]
        high >>= 3;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	08db      	lsrs	r3, r3, #3
 8003458:	607b      	str	r3, [r7, #4]

        while (high)
 800345a:	e013      	b.n	8003484 <pb_encode_varint_32+0xa6>
        {
            byte |= 0x80;
 800345c:	7efb      	ldrb	r3, [r7, #27]
 800345e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003462:	76fb      	strb	r3, [r7, #27]
            buffer[i++] = byte;
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	61fa      	str	r2, [r7, #28]
 800346a:	3320      	adds	r3, #32
 800346c:	443b      	add	r3, r7
 800346e:	7efa      	ldrb	r2, [r7, #27]
 8003470:	f803 2c10 	strb.w	r2, [r3, #-16]
            byte = (pb_byte_t)(high & 0x7F);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800347c:	76fb      	strb	r3, [r7, #27]
            high >>= 7;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	09db      	lsrs	r3, r3, #7
 8003482:	607b      	str	r3, [r7, #4]
        while (high)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1e8      	bne.n	800345c <pb_encode_varint_32+0x7e>
        }
    }

    buffer[i++] = byte;
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	61fa      	str	r2, [r7, #28]
 8003490:	3320      	adds	r3, #32
 8003492:	443b      	add	r3, r7
 8003494:	7efa      	ldrb	r2, [r7, #27]
 8003496:	f803 2c10 	strb.w	r2, [r3, #-16]

    return pb_write(stream, buffer, i);
 800349a:	f107 0310 	add.w	r3, r7, #16
 800349e:	69fa      	ldr	r2, [r7, #28]
 80034a0:	4619      	mov	r1, r3
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f7ff fb0a 	bl	8002abc <pb_write>
 80034a8:	4603      	mov	r3, r0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3720      	adds	r7, #32
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <pb_encode_varint>:

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 80034b2:	b590      	push	{r4, r7, lr}
 80034b4:	b087      	sub	sp, #28
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	60f8      	str	r0, [r7, #12]
 80034ba:	e9c7 2300 	strd	r2, r3, [r7]
    if (value <= 0x7F)
 80034be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034c2:	2a80      	cmp	r2, #128	@ 0x80
 80034c4:	f173 0300 	sbcs.w	r3, r3, #0
 80034c8:	d20a      	bcs.n	80034e0 <pb_encode_varint+0x2e>
    {
        /* Fast path: single byte */
        pb_byte_t byte = (pb_byte_t)value;
 80034ca:	783b      	ldrb	r3, [r7, #0]
 80034cc:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &byte, 1);
 80034ce:	f107 0317 	add.w	r3, r7, #23
 80034d2:	2201      	movs	r2, #1
 80034d4:	4619      	mov	r1, r3
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f7ff faf0 	bl	8002abc <pb_write>
 80034dc:	4603      	mov	r3, r0
 80034de:	e00f      	b.n	8003500 <pb_encode_varint+0x4e>
    else
    {
#ifdef PB_WITHOUT_64BIT
        return pb_encode_varint_32(stream, value, 0);
#else
        return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)(value >> 32));
 80034e0:	683c      	ldr	r4, [r7, #0]
 80034e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	000a      	movs	r2, r1
 80034f0:	2300      	movs	r3, #0
 80034f2:	4613      	mov	r3, r2
 80034f4:	461a      	mov	r2, r3
 80034f6:	4621      	mov	r1, r4
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f7ff ff70 	bl	80033de <pb_encode_varint_32>
 80034fe:	4603      	mov	r3, r0
#endif
    }
}
 8003500:	4618      	mov	r0, r3
 8003502:	371c      	adds	r7, #28
 8003504:	46bd      	mov	sp, r7
 8003506:	bd90      	pop	{r4, r7, pc}

08003508 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 8003508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800350c:	b08a      	sub	sp, #40	@ 0x28
 800350e:	af00      	add	r7, sp, #0
 8003510:	6178      	str	r0, [r7, #20]
 8003512:	e9c7 2302 	strd	r2, r3, [r7, #8]
    pb_uint64_t zigzagged;
    pb_uint64_t mask = ((pb_uint64_t)-1) >> 1; /* Satisfy clang -fsanitize=integer */
 8003516:	f04f 32ff 	mov.w	r2, #4294967295
 800351a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800351e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (value < 0)
 8003522:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	da15      	bge.n	8003556 <pb_encode_svarint+0x4e>
        zigzagged = ~(((pb_uint64_t)value & mask) << 1);
 800352a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800352e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003532:	ea00 0402 	and.w	r4, r0, r2
 8003536:	ea01 0503 	and.w	r5, r1, r3
 800353a:	1923      	adds	r3, r4, r4
 800353c:	603b      	str	r3, [r7, #0]
 800353e:	eb45 0305 	adc.w	r3, r5, r5
 8003542:	607b      	str	r3, [r7, #4]
 8003544:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003548:	ea6f 0a02 	mvn.w	sl, r2
 800354c:	ea6f 0b03 	mvn.w	fp, r3
 8003550:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8003554:	e007      	b.n	8003566 <pb_encode_svarint+0x5e>
    else
        zigzagged = (pb_uint64_t)value << 1;
 8003556:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800355a:	eb12 0802 	adds.w	r8, r2, r2
 800355e:	eb43 0903 	adc.w	r9, r3, r3
 8003562:	e9c7 8908 	strd	r8, r9, [r7, #32]
    
    return pb_encode_varint(stream, zigzagged);
 8003566:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800356a:	6978      	ldr	r0, [r7, #20]
 800356c:	f7ff ffa1 	bl	80034b2 <pb_encode_varint>
 8003570:	4603      	mov	r3, r0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3728      	adds	r7, #40	@ 0x28
 8003576:	46bd      	mov	sp, r7
 8003578:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800357c <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 4);
 8003586:	2204      	movs	r2, #4
 8003588:	6839      	ldr	r1, [r7, #0]
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff fa96 	bl	8002abc <pb_write>
 8003590:	4603      	mov	r3, r0
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
    return pb_write(stream, bytes, 4);
#endif
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 8);
 80035a4:	2208      	movs	r2, #8
 80035a6:	6839      	ldr	r1, [r7, #0]
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7ff fa87 	bl	8002abc <pb_write>
 80035ae:	4603      	mov	r3, r0
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
    return pb_write(stream, bytes, 8);
#endif
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 80035b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035bc:	b088      	sub	sp, #32
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6178      	str	r0, [r7, #20]
 80035c2:	460b      	mov	r3, r1
 80035c4:	60fa      	str	r2, [r7, #12]
 80035c6:	74fb      	strb	r3, [r7, #19]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	469a      	mov	sl, r3
 80035ce:	4693      	mov	fp, r2
 80035d0:	ea4f 755a 	mov.w	r5, sl, lsr #29
 80035d4:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 80035d8:	7cfb      	ldrb	r3, [r7, #19]
 80035da:	2200      	movs	r2, #0
 80035dc:	4698      	mov	r8, r3
 80035de:	4691      	mov	r9, r2
 80035e0:	ea44 0308 	orr.w	r3, r4, r8
 80035e4:	603b      	str	r3, [r7, #0]
 80035e6:	ea45 0309 	orr.w	r3, r5, r9
 80035ea:	607b      	str	r3, [r7, #4]
 80035ec:	e9d7 3400 	ldrd	r3, r4, [r7]
 80035f0:	e9c7 3406 	strd	r3, r4, [r7, #24]
    return pb_encode_varint(stream, tag);
 80035f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035f8:	6978      	ldr	r0, [r7, #20]
 80035fa:	f7ff ff5a 	bl	80034b2 <pb_encode_varint>
 80035fe:	4603      	mov	r3, r0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3720      	adds	r7, #32
 8003604:	46bd      	mov	sp, r7
 8003606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800360c <pb_encode_tag_for_field>:

bool pb_encode_tag_for_field ( pb_ostream_t* stream, const pb_field_iter_t* field )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	7d9b      	ldrb	r3, [r3, #22]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	2b0b      	cmp	r3, #11
 8003620:	d826      	bhi.n	8003670 <pb_encode_tag_for_field+0x64>
 8003622:	a201      	add	r2, pc, #4	@ (adr r2, 8003628 <pb_encode_tag_for_field+0x1c>)
 8003624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003628:	08003659 	.word	0x08003659
 800362c:	08003659 	.word	0x08003659
 8003630:	08003659 	.word	0x08003659
 8003634:	08003659 	.word	0x08003659
 8003638:	0800365f 	.word	0x0800365f
 800363c:	08003665 	.word	0x08003665
 8003640:	0800366b 	.word	0x0800366b
 8003644:	0800366b 	.word	0x0800366b
 8003648:	0800366b 	.word	0x0800366b
 800364c:	0800366b 	.word	0x0800366b
 8003650:	08003671 	.word	0x08003671
 8003654:	0800366b 	.word	0x0800366b
    {
        case PB_LTYPE_BOOL:
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 8003658:	2300      	movs	r3, #0
 800365a:	73fb      	strb	r3, [r7, #15]
            break;
 800365c:	e014      	b.n	8003688 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 800365e:	2305      	movs	r3, #5
 8003660:	73fb      	strb	r3, [r7, #15]
            break;
 8003662:	e011      	b.n	8003688 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 8003664:	2301      	movs	r3, #1
 8003666:	73fb      	strb	r3, [r7, #15]
            break;
 8003668:	e00e      	b.n	8003688 <pb_encode_tag_for_field+0x7c>
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 800366a:	2302      	movs	r3, #2
 800366c:	73fb      	strb	r3, [r7, #15]
            break;
 800366e:	e00b      	b.n	8003688 <pb_encode_tag_for_field+0x7c>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <pb_encode_tag_for_field+0x72>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	e000      	b.n	8003680 <pb_encode_tag_for_field+0x74>
 800367e:	4b09      	ldr	r3, [pc, #36]	@ (80036a4 <pb_encode_tag_for_field+0x98>)
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6113      	str	r3, [r2, #16]
 8003684:	2300      	movs	r3, #0
 8003686:	e008      	b.n	800369a <pb_encode_tag_for_field+0x8e>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	8a1b      	ldrh	r3, [r3, #16]
 800368c:	461a      	mov	r2, r3
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	4619      	mov	r1, r3
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff ff90 	bl	80035b8 <pb_encode_tag>
 8003698:	4603      	mov	r3, r0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	08006e4c 	.word	0x08006e4c

080036a8 <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 80036a8:	b5b0      	push	{r4, r5, r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	461c      	mov	r4, r3
 80036ba:	4615      	mov	r5, r2
 80036bc:	4622      	mov	r2, r4
 80036be:	462b      	mov	r3, r5
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f7ff fef6 	bl	80034b2 <pb_encode_varint>
 80036c6:	4603      	mov	r3, r0
 80036c8:	f083 0301 	eor.w	r3, r3, #1
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <pb_encode_string+0x2e>
        return false;
 80036d2:	2300      	movs	r3, #0
 80036d4:	e005      	b.n	80036e2 <pb_encode_string+0x3a>
    
    return pb_write(stream, buffer, size);
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f7ff f9ee 	bl	8002abc <pb_write>
 80036e0:	4603      	mov	r3, r0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080036ec <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 80036ec:	b5b0      	push	{r4, r5, r7, lr}
 80036ee:	b08c      	sub	sp, #48	@ 0x30
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 80036f8:	f107 0314 	add.w	r3, r7, #20
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	605a      	str	r2, [r3, #4]
 8003702:	609a      	str	r2, [r3, #8]
 8003704:	60da      	str	r2, [r3, #12]
 8003706:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 8003708:	f107 0314 	add.w	r3, r7, #20
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	68b9      	ldr	r1, [r7, #8]
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff fe20 	bl	8003356 <pb_encode>
 8003716:	4603      	mov	r3, r0
 8003718:	f083 0301 	eor.w	r3, r3, #1
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d004      	beq.n	800372c <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 8003722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	611a      	str	r2, [r3, #16]
#endif
        return false;
 8003728:	2300      	movs	r3, #0
 800372a:	e065      	b.n	80037f8 <pb_encode_submessage+0x10c>
    }
    
    size = substream.bytes_written;
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8003730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003732:	2200      	movs	r2, #0
 8003734:	461c      	mov	r4, r3
 8003736:	4615      	mov	r5, r2
 8003738:	4622      	mov	r2, r4
 800373a:	462b      	mov	r3, r5
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f7ff feb8 	bl	80034b2 <pb_encode_varint>
 8003742:	4603      	mov	r3, r0
 8003744:	f083 0301 	eor.w	r3, r3, #1
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <pb_encode_submessage+0x66>
        return false;
 800374e:	2300      	movs	r3, #0
 8003750:	e052      	b.n	80037f8 <pb_encode_submessage+0x10c>
    
    if (stream->callback == NULL)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <pb_encode_submessage+0x7c>
        return pb_write(stream, NULL, size); /* Just sizing */
 800375a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800375c:	2100      	movs	r1, #0
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f7ff f9ac 	bl	8002abc <pb_write>
 8003764:	4603      	mov	r3, r0
 8003766:	e047      	b.n	80037f8 <pb_encode_submessage+0x10c>
    
    if (stream->bytes_written + size > stream->max_size)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800376e:	441a      	add	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	429a      	cmp	r2, r3
 8003776:	d90b      	bls.n	8003790 <pb_encode_submessage+0xa4>
        PB_RETURN_ERROR(stream, "stream full");
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <pb_encode_submessage+0x9a>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	e000      	b.n	8003788 <pb_encode_submessage+0x9c>
 8003786:	4b1e      	ldr	r3, [pc, #120]	@ (8003800 <pb_encode_submessage+0x114>)
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	6113      	str	r3, [r2, #16]
 800378c:	2300      	movs	r3, #0
 800378e:	e033      	b.n	80037f8 <pb_encode_submessage+0x10c>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 800379c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379e:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 80037a0:	2300      	movs	r3, #0
 80037a2:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 80037a8:	f107 0314 	add.w	r3, r7, #20
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	68b9      	ldr	r1, [r7, #8]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff fdd0 	bl	8003356 <pb_encode>
 80037b6:	4603      	mov	r3, r0
 80037b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    
    stream->bytes_written += substream.bytes_written;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	441a      	add	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 80037ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037d8:	429a      	cmp	r2, r3
 80037da:	d00b      	beq.n	80037f4 <pb_encode_submessage+0x108>
        PB_RETURN_ERROR(stream, "submsg size changed");
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <pb_encode_submessage+0xfe>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	e000      	b.n	80037ec <pb_encode_submessage+0x100>
 80037ea:	4b06      	ldr	r3, [pc, #24]	@ (8003804 <pb_encode_submessage+0x118>)
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	6113      	str	r3, [r2, #16]
 80037f0:	2300      	movs	r3, #0
 80037f2:	e001      	b.n	80037f8 <pb_encode_submessage+0x10c>
    
    return status;
 80037f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3730      	adds	r7, #48	@ 0x30
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003800:	08006e14 	.word	0x08006e14
 8003804:	08006e9c 	.word	0x08006e9c

08003808 <pb_enc_bool>:

/* Field encoders */

static bool checkreturn pb_enc_bool(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8003808:	b5b0      	push	{r4, r5, r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
    uint32_t value = safe_read_bool(field->pData) ? 1 : 0;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff f9a0 	bl	8002b5c <safe_read_bool>
 800381c:	4603      	mov	r3, r0
 800381e:	60fb      	str	r3, [r7, #12]
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	461c      	mov	r4, r3
 8003826:	4615      	mov	r5, r2
 8003828:	4622      	mov	r2, r4
 800382a:	462b      	mov	r3, r5
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7ff fe40 	bl	80034b2 <pb_encode_varint>
 8003832:	4603      	mov	r3, r0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bdb0      	pop	{r4, r5, r7, pc}

0800383c <pb_enc_varint>:

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800383c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003840:	b08c      	sub	sp, #48	@ 0x30
 8003842:	af00      	add	r7, sp, #0
 8003844:	61f8      	str	r0, [r7, #28]
 8003846:	61b9      	str	r1, [r7, #24]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	7d9b      	ldrb	r3, [r3, #22]
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	2b02      	cmp	r3, #2
 8003852:	d152      	bne.n	80038fa <pb_enc_varint+0xbe>
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

        if (field->data_size == sizeof(uint_least8_t))
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	8a5b      	ldrh	r3, [r3, #18]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d10b      	bne.n	8003880 <pb_enc_varint+0x44>
            value = *(const uint_least8_t*)field->pData;
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2200      	movs	r2, #0
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	617a      	str	r2, [r7, #20]
 8003876:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800387a:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 800387e:	e035      	b.n	80038ec <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint_least16_t))
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	8a5b      	ldrh	r3, [r3, #18]
 8003884:	2b02      	cmp	r3, #2
 8003886:	d10b      	bne.n	80038a0 <pb_enc_varint+0x64>
            value = *(const uint_least16_t*)field->pData;
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	b29b      	uxth	r3, r3
 8003890:	2200      	movs	r2, #0
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	60fa      	str	r2, [r7, #12]
 8003896:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800389a:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 800389e:	e025      	b.n	80038ec <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint32_t))
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	8a5b      	ldrh	r3, [r3, #18]
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d10a      	bne.n	80038be <pb_enc_varint+0x82>
            value = *(const uint32_t*)field->pData;
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2200      	movs	r2, #0
 80038b0:	603b      	str	r3, [r7, #0]
 80038b2:	607a      	str	r2, [r7, #4]
 80038b4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80038b8:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 80038bc:	e016      	b.n	80038ec <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(pb_uint64_t))
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	8a5b      	ldrh	r3, [r3, #18]
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d106      	bne.n	80038d4 <pb_enc_varint+0x98>
            value = *(const pb_uint64_t*)field->pData;
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80038d2:	e00b      	b.n	80038ec <pb_enc_varint+0xb0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <pb_enc_varint+0xa6>
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	e000      	b.n	80038e4 <pb_enc_varint+0xa8>
 80038e2:	4b36      	ldr	r3, [pc, #216]	@ (80039bc <pb_enc_varint+0x180>)
 80038e4:	69fa      	ldr	r2, [r7, #28]
 80038e6:	6113      	str	r3, [r2, #16]
 80038e8:	2300      	movs	r3, #0
 80038ea:	e061      	b.n	80039b0 <pb_enc_varint+0x174>

        return pb_encode_varint(stream, value);
 80038ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038f0:	69f8      	ldr	r0, [r7, #28]
 80038f2:	f7ff fdde 	bl	80034b2 <pb_encode_varint>
 80038f6:	4603      	mov	r3, r0
 80038f8:	e05a      	b.n	80039b0 <pb_enc_varint+0x174>
    }
    else
    {
        /* Perform signed integer extension */
        pb_int64_t value = 0;
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (field->data_size == sizeof(int_least8_t))
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	8a5b      	ldrh	r3, [r3, #18]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d10a      	bne.n	8003924 <pb_enc_varint+0xe8>
            value = *(const int_least8_t*)field->pData;
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f993 3000 	ldrsb.w	r3, [r3]
 8003916:	b25b      	sxtb	r3, r3
 8003918:	17da      	asrs	r2, r3, #31
 800391a:	469a      	mov	sl, r3
 800391c:	4693      	mov	fp, r2
 800391e:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8003922:	e032      	b.n	800398a <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int_least16_t))
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	8a5b      	ldrh	r3, [r3, #18]
 8003928:	2b02      	cmp	r3, #2
 800392a:	d10a      	bne.n	8003942 <pb_enc_varint+0x106>
            value = *(const int_least16_t*)field->pData;
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003934:	b21b      	sxth	r3, r3
 8003936:	17da      	asrs	r2, r3, #31
 8003938:	4698      	mov	r8, r3
 800393a:	4691      	mov	r9, r2
 800393c:	e9c7 8908 	strd	r8, r9, [r7, #32]
 8003940:	e023      	b.n	800398a <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int32_t))
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	8a5b      	ldrh	r3, [r3, #18]
 8003946:	2b04      	cmp	r3, #4
 8003948:	d108      	bne.n	800395c <pb_enc_varint+0x120>
            value = *(const int32_t*)field->pData;
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	17da      	asrs	r2, r3, #31
 8003952:	461c      	mov	r4, r3
 8003954:	4615      	mov	r5, r2
 8003956:	e9c7 4508 	strd	r4, r5, [r7, #32]
 800395a:	e016      	b.n	800398a <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(pb_int64_t))
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	8a5b      	ldrh	r3, [r3, #18]
 8003960:	2b08      	cmp	r3, #8
 8003962:	d106      	bne.n	8003972 <pb_enc_varint+0x136>
            value = *(const pb_int64_t*)field->pData;
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8003970:	e00b      	b.n	800398a <pb_enc_varint+0x14e>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <pb_enc_varint+0x144>
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	e000      	b.n	8003982 <pb_enc_varint+0x146>
 8003980:	4b0e      	ldr	r3, [pc, #56]	@ (80039bc <pb_enc_varint+0x180>)
 8003982:	69fa      	ldr	r2, [r7, #28]
 8003984:	6113      	str	r3, [r2, #16]
 8003986:	2300      	movs	r3, #0
 8003988:	e012      	b.n	80039b0 <pb_enc_varint+0x174>

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	7d9b      	ldrb	r3, [r3, #22]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	2b03      	cmp	r3, #3
 8003994:	d106      	bne.n	80039a4 <pb_enc_varint+0x168>
            return pb_encode_svarint(stream, value);
 8003996:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800399a:	69f8      	ldr	r0, [r7, #28]
 800399c:	f7ff fdb4 	bl	8003508 <pb_encode_svarint>
 80039a0:	4603      	mov	r3, r0
 80039a2:	e005      	b.n	80039b0 <pb_enc_varint+0x174>
#ifdef PB_WITHOUT_64BIT
        else if (value < 0)
            return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)-1);
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);
 80039a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039a8:	69f8      	ldr	r0, [r7, #28]
 80039aa:	f7ff fd82 	bl	80034b2 <pb_encode_varint>
 80039ae:	4603      	mov	r3, r0

    }
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3730      	adds	r7, #48	@ 0x30
 80039b4:	46bd      	mov	sp, r7
 80039b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ba:	bf00      	nop
 80039bc:	08006eb0 	.word	0x08006eb0

080039c0 <pb_enc_fixed>:

static bool checkreturn pb_enc_fixed(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	8a5b      	ldrh	r3, [r3, #18]
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d107      	bne.n	80039e2 <pb_enc_fixed+0x22>
    {
        return pb_encode_fixed32(stream, field->pData);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	4619      	mov	r1, r3
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff fdcf 	bl	800357c <pb_encode_fixed32>
 80039de:	4603      	mov	r3, r0
 80039e0:	e016      	b.n	8003a10 <pb_enc_fixed+0x50>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	8a5b      	ldrh	r3, [r3, #18]
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d107      	bne.n	80039fa <pb_enc_fixed+0x3a>
    {
        return pb_encode_fixed64(stream, field->pData);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	4619      	mov	r1, r3
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff fdd2 	bl	800359a <pb_encode_fixed64>
 80039f6:	4603      	mov	r3, r0
 80039f8:	e00a      	b.n	8003a10 <pb_enc_fixed+0x50>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <pb_enc_fixed+0x48>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	e000      	b.n	8003a0a <pb_enc_fixed+0x4a>
 8003a08:	4b03      	ldr	r3, [pc, #12]	@ (8003a18 <pb_enc_fixed+0x58>)
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6113      	str	r3, [r2, #16]
 8003a0e:	2300      	movs	r3, #0
    }
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	08006eb0 	.word	0x08006eb0

08003a1c <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
    const pb_bytes_array_t *bytes = NULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]

    bytes = (const pb_bytes_array_t*)field->pData;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	60fb      	str	r3, [r7, #12]
    
    if (bytes == NULL)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d106      	bne.n	8003a44 <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 8003a36:	2200      	movs	r2, #0
 8003a38:	2100      	movs	r1, #0
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff fe34 	bl	80036a8 <pb_encode_string>
 8003a40:	4603      	mov	r3, r0
 8003a42:	e022      	b.n	8003a8a <pb_enc_bytes+0x6e>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	7d9b      	ldrb	r3, [r3, #22]
 8003a48:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d113      	bne.n	8003a78 <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	8a5b      	ldrh	r3, [r3, #18]
 8003a5a:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d90b      	bls.n	8003a78 <pb_enc_bytes+0x5c>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <pb_enc_bytes+0x52>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	e000      	b.n	8003a70 <pb_enc_bytes+0x54>
 8003a6e:	4b09      	ldr	r3, [pc, #36]	@ (8003a94 <pb_enc_bytes+0x78>)
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6113      	str	r3, [r2, #16]
 8003a74:	2300      	movs	r3, #0
 8003a76:	e008      	b.n	8003a8a <pb_enc_bytes+0x6e>
    }
    
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	1c99      	adds	r1, r3, #2
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	881b      	ldrh	r3, [r3, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff fe10 	bl	80036a8 <pb_encode_string>
 8003a88:	4603      	mov	r3, r0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	08006ec4 	.word	0x08006ec4

08003a98 <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
    size_t max_size = (size_t)field->data_size;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	8a5b      	ldrh	r3, [r3, #18]
 8003aaa:	613b      	str	r3, [r7, #16]
    const char *str = (const char*)field->pData;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	60bb      	str	r3, [r7, #8]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	7d9b      	ldrb	r3, [r3, #22]
 8003ab6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003aba:	2b80      	cmp	r3, #128	@ 0x80
 8003abc:	d103      	bne.n	8003ac6 <pb_enc_string+0x2e>
    {
        max_size = (size_t)-1;
 8003abe:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	e011      	b.n	8003aea <pb_enc_string+0x52>
        /* pb_dec_string() assumes string fields end with a null
         * terminator when the type isn't PB_ATYPE_POINTER, so we
         * shouldn't allow more than max-1 bytes to be written to
         * allow space for the null terminator.
         */
        if (max_size == 0)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10b      	bne.n	8003ae4 <pb_enc_string+0x4c>
            PB_RETURN_ERROR(stream, "zero-length string");
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <pb_enc_string+0x42>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	e000      	b.n	8003adc <pb_enc_string+0x44>
 8003ada:	4b1c      	ldr	r3, [pc, #112]	@ (8003b4c <pb_enc_string+0xb4>)
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6113      	str	r3, [r2, #16]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e02f      	b.n	8003b44 <pb_enc_string+0xac>

        max_size -= 1;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	613b      	str	r3, [r7, #16]
    }


    if (str == NULL)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d102      	bne.n	8003af6 <pb_enc_string+0x5e>
    {
        size = 0; /* Treat null pointer as an empty string */
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	e020      	b.n	8003b38 <pb_enc_string+0xa0>
    }
    else
    {
        const char *p = str;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	60fb      	str	r3, [r7, #12]

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 8003afa:	e005      	b.n	8003b08 <pb_enc_string+0x70>
        {
            size++;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	3301      	adds	r3, #1
 8003b00:	617b      	str	r3, [r7, #20]
            p++;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	3301      	adds	r3, #1
 8003b06:	60fb      	str	r3, [r7, #12]
        while (size < max_size && *p != '\0')
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d203      	bcs.n	8003b18 <pb_enc_string+0x80>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f1      	bne.n	8003afc <pb_enc_string+0x64>
        }

        if (*p != '\0')
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00b      	beq.n	8003b38 <pb_enc_string+0xa0>
        {
            PB_RETURN_ERROR(stream, "unterminated string");
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <pb_enc_string+0x96>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	e000      	b.n	8003b30 <pb_enc_string+0x98>
 8003b2e:	4b08      	ldr	r3, [pc, #32]	@ (8003b50 <pb_enc_string+0xb8>)
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6113      	str	r3, [r2, #16]
 8003b34:	2300      	movs	r3, #0
 8003b36:	e005      	b.n	8003b44 <pb_enc_string+0xac>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	68b9      	ldr	r1, [r7, #8]
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff fdb3 	bl	80036a8 <pb_encode_string>
 8003b42:	4603      	mov	r3, r0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	08006ed8 	.word	0x08006ed8
 8003b50:	08006eec 	.word	0x08006eec

08003b54 <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
    if (field->submsg_desc == NULL)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10b      	bne.n	8003b7e <pb_enc_submessage+0x2a>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <pb_enc_submessage+0x20>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	e000      	b.n	8003b76 <pb_enc_submessage+0x22>
 8003b74:	4b19      	ldr	r3, [pc, #100]	@ (8003bdc <pb_enc_submessage+0x88>)
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6113      	str	r3, [r2, #16]
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e029      	b.n	8003bd2 <pb_enc_submessage+0x7e>

    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	7d9b      	ldrb	r3, [r3, #22]
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	2b09      	cmp	r3, #9
 8003b88:	d11a      	bne.n	8003bc0 <pb_enc_submessage+0x6c>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d016      	beq.n	8003bc0 <pb_enc_submessage+0x6c>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	3b08      	subs	r3, #8
 8003b98:	60fb      	str	r3, [r7, #12]
        if (callback->funcs.encode)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00e      	beq.n	8003bc0 <pb_enc_submessage+0x6c>
        {
            if (!callback->funcs.encode(stream, field, &callback->arg))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	3204      	adds	r2, #4
 8003baa:	6839      	ldr	r1, [r7, #0]
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	4798      	blx	r3
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	f083 0301 	eor.w	r3, r3, #1
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <pb_enc_submessage+0x6c>
                return false;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	e008      	b.n	8003bd2 <pb_enc_submessage+0x7e>
        }
    }
    
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff fd8e 	bl	80036ec <pb_encode_submessage>
 8003bd0:	4603      	mov	r3, r0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	08006f00 	.word	0x08006f00

08003be0 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	69d9      	ldr	r1, [r3, #28]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	8a5b      	ldrh	r3, [r3, #18]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7ff fd57 	bl	80036a8 <pb_encode_string>
 8003bfa:	4603      	mov	r3, r0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	607b      	str	r3, [r7, #4]
 8003c0e:	4b10      	ldr	r3, [pc, #64]	@ (8003c50 <HAL_MspInit+0x4c>)
 8003c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c12:	4a0f      	ldr	r2, [pc, #60]	@ (8003c50 <HAL_MspInit+0x4c>)
 8003c14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c18:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c50 <HAL_MspInit+0x4c>)
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c22:	607b      	str	r3, [r7, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c26:	2300      	movs	r3, #0
 8003c28:	603b      	str	r3, [r7, #0]
 8003c2a:	4b09      	ldr	r3, [pc, #36]	@ (8003c50 <HAL_MspInit+0x4c>)
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2e:	4a08      	ldr	r2, [pc, #32]	@ (8003c50 <HAL_MspInit+0x4c>)
 8003c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c36:	4b06      	ldr	r3, [pc, #24]	@ (8003c50 <HAL_MspInit+0x4c>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	40023800 	.word	0x40023800

08003c54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08c      	sub	sp, #48	@ 0x30
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c5c:	f107 031c 	add.w	r3, r7, #28
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	605a      	str	r2, [r3, #4]
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	60da      	str	r2, [r3, #12]
 8003c6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a33      	ldr	r2, [pc, #204]	@ (8003d40 <HAL_UART_MspInit+0xec>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d12d      	bne.n	8003cd2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c76:	2300      	movs	r3, #0
 8003c78:	61bb      	str	r3, [r7, #24]
 8003c7a:	4b32      	ldr	r3, [pc, #200]	@ (8003d44 <HAL_UART_MspInit+0xf0>)
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7e:	4a31      	ldr	r2, [pc, #196]	@ (8003d44 <HAL_UART_MspInit+0xf0>)
 8003c80:	f043 0310 	orr.w	r3, r3, #16
 8003c84:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c86:	4b2f      	ldr	r3, [pc, #188]	@ (8003d44 <HAL_UART_MspInit+0xf0>)
 8003c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8a:	f003 0310 	and.w	r3, r3, #16
 8003c8e:	61bb      	str	r3, [r7, #24]
 8003c90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
 8003c96:	4b2b      	ldr	r3, [pc, #172]	@ (8003d44 <HAL_UART_MspInit+0xf0>)
 8003c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9a:	4a2a      	ldr	r2, [pc, #168]	@ (8003d44 <HAL_UART_MspInit+0xf0>)
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ca2:	4b28      	ldr	r3, [pc, #160]	@ (8003d44 <HAL_UART_MspInit+0xf0>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003cae:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003cc0:	2307      	movs	r3, #7
 8003cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc4:	f107 031c 	add.w	r3, r7, #28
 8003cc8:	4619      	mov	r1, r3
 8003cca:	481f      	ldr	r0, [pc, #124]	@ (8003d48 <HAL_UART_MspInit+0xf4>)
 8003ccc:	f000 fb16 	bl	80042fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003cd0:	e031      	b.n	8003d36 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a1d      	ldr	r2, [pc, #116]	@ (8003d4c <HAL_UART_MspInit+0xf8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d12c      	bne.n	8003d36 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003cdc:	2300      	movs	r3, #0
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	4b18      	ldr	r3, [pc, #96]	@ (8003d44 <HAL_UART_MspInit+0xf0>)
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce4:	4a17      	ldr	r2, [pc, #92]	@ (8003d44 <HAL_UART_MspInit+0xf0>)
 8003ce6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cea:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cec:	4b15      	ldr	r3, [pc, #84]	@ (8003d44 <HAL_UART_MspInit+0xf0>)
 8003cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cf4:	613b      	str	r3, [r7, #16]
 8003cf6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	4b11      	ldr	r3, [pc, #68]	@ (8003d44 <HAL_UART_MspInit+0xf0>)
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d00:	4a10      	ldr	r2, [pc, #64]	@ (8003d44 <HAL_UART_MspInit+0xf0>)
 8003d02:	f043 0302 	orr.w	r3, r3, #2
 8003d06:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d08:	4b0e      	ldr	r3, [pc, #56]	@ (8003d44 <HAL_UART_MspInit+0xf0>)
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003d14:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d22:	2303      	movs	r3, #3
 8003d24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003d26:	2307      	movs	r3, #7
 8003d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d2a:	f107 031c 	add.w	r3, r7, #28
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4807      	ldr	r0, [pc, #28]	@ (8003d50 <HAL_UART_MspInit+0xfc>)
 8003d32:	f000 fae3 	bl	80042fc <HAL_GPIO_Init>
}
 8003d36:	bf00      	nop
 8003d38:	3730      	adds	r7, #48	@ 0x30
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40011000 	.word	0x40011000
 8003d44:	40023800 	.word	0x40023800
 8003d48:	40020000 	.word	0x40020000
 8003d4c:	40004800 	.word	0x40004800
 8003d50:	40020400 	.word	0x40020400

08003d54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08c      	sub	sp, #48	@ 0x30
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003d64:	2300      	movs	r3, #0
 8003d66:	60bb      	str	r3, [r7, #8]
 8003d68:	4b2e      	ldr	r3, [pc, #184]	@ (8003e24 <HAL_InitTick+0xd0>)
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6c:	4a2d      	ldr	r2, [pc, #180]	@ (8003e24 <HAL_InitTick+0xd0>)
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d74:	4b2b      	ldr	r3, [pc, #172]	@ (8003e24 <HAL_InitTick+0xd0>)
 8003d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	60bb      	str	r3, [r7, #8]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d80:	f107 020c 	add.w	r2, r7, #12
 8003d84:	f107 0310 	add.w	r3, r7, #16
 8003d88:	4611      	mov	r1, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f001 f8aa 	bl	8004ee4 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003d90:	f001 f894 	bl	8004ebc <HAL_RCC_GetPCLK2Freq>
 8003d94:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d98:	4a23      	ldr	r2, [pc, #140]	@ (8003e28 <HAL_InitTick+0xd4>)
 8003d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9e:	0c9b      	lsrs	r3, r3, #18
 8003da0:	3b01      	subs	r3, #1
 8003da2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003da4:	4b21      	ldr	r3, [pc, #132]	@ (8003e2c <HAL_InitTick+0xd8>)
 8003da6:	4a22      	ldr	r2, [pc, #136]	@ (8003e30 <HAL_InitTick+0xdc>)
 8003da8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003daa:	4b20      	ldr	r3, [pc, #128]	@ (8003e2c <HAL_InitTick+0xd8>)
 8003dac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003db0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003db2:	4a1e      	ldr	r2, [pc, #120]	@ (8003e2c <HAL_InitTick+0xd8>)
 8003db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003db8:	4b1c      	ldr	r3, [pc, #112]	@ (8003e2c <HAL_InitTick+0xd8>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8003e2c <HAL_InitTick+0xd8>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dc4:	4b19      	ldr	r3, [pc, #100]	@ (8003e2c <HAL_InitTick+0xd8>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003dca:	4818      	ldr	r0, [pc, #96]	@ (8003e2c <HAL_InitTick+0xd8>)
 8003dcc:	f001 f8bc 	bl	8004f48 <HAL_TIM_Base_Init>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003dd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d11b      	bne.n	8003e16 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003dde:	4813      	ldr	r0, [pc, #76]	@ (8003e2c <HAL_InitTick+0xd8>)
 8003de0:	f001 f90c 	bl	8004ffc <HAL_TIM_Base_Start_IT>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003dea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d111      	bne.n	8003e16 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003df2:	2019      	movs	r0, #25
 8003df4:	f000 fa74 	bl	80042e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b0f      	cmp	r3, #15
 8003dfc:	d808      	bhi.n	8003e10 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003dfe:	2200      	movs	r2, #0
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	2019      	movs	r0, #25
 8003e04:	f000 fa50 	bl	80042a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e08:	4a0a      	ldr	r2, [pc, #40]	@ (8003e34 <HAL_InitTick+0xe0>)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	e002      	b.n	8003e16 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003e16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3730      	adds	r7, #48	@ 0x30
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40023800 	.word	0x40023800
 8003e28:	431bde83 	.word	0x431bde83
 8003e2c:	20000114 	.word	0x20000114
 8003e30:	40010000 	.word	0x40010000
 8003e34:	20000004 	.word	0x20000004

08003e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e3c:	bf00      	nop
 8003e3e:	e7fd      	b.n	8003e3c <NMI_Handler+0x4>

08003e40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e44:	bf00      	nop
 8003e46:	e7fd      	b.n	8003e44 <HardFault_Handler+0x4>

08003e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e4c:	bf00      	nop
 8003e4e:	e7fd      	b.n	8003e4c <MemManage_Handler+0x4>

08003e50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e54:	bf00      	nop
 8003e56:	e7fd      	b.n	8003e54 <BusFault_Handler+0x4>

08003e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e5c:	bf00      	nop
 8003e5e:	e7fd      	b.n	8003e5c <UsageFault_Handler+0x4>

08003e60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e64:	bf00      	nop
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e72:	bf00      	nop
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e80:	bf00      	nop
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e8e:	bf00      	nop
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003e9c:	4802      	ldr	r0, [pc, #8]	@ (8003ea8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003e9e:	f001 f91d 	bl	80050dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003ea2:	bf00      	nop
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	20000114 	.word	0x20000114

08003eac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	e00a      	b.n	8003ed4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ebe:	f3af 8000 	nop.w
 8003ec2:	4601      	mov	r1, r0
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	60ba      	str	r2, [r7, #8]
 8003eca:	b2ca      	uxtb	r2, r1
 8003ecc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	dbf0      	blt.n	8003ebe <_read+0x12>
  }

  return len;
 8003edc:	687b      	ldr	r3, [r7, #4]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b086      	sub	sp, #24
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	e009      	b.n	8003f0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	60ba      	str	r2, [r7, #8]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fc fb2d 	bl	8000560 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	dbf1      	blt.n	8003ef8 <_write+0x12>
  }
  return len;
 8003f14:	687b      	ldr	r3, [r7, #4]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <_close>:

int _close(int file)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
 8003f3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f46:	605a      	str	r2, [r3, #4]
  return 0;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <_isatty>:

int _isatty(int file)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f5e:	2301      	movs	r3, #1
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
	...

08003f88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f90:	4a14      	ldr	r2, [pc, #80]	@ (8003fe4 <_sbrk+0x5c>)
 8003f92:	4b15      	ldr	r3, [pc, #84]	@ (8003fe8 <_sbrk+0x60>)
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f9c:	4b13      	ldr	r3, [pc, #76]	@ (8003fec <_sbrk+0x64>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d102      	bne.n	8003faa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fa4:	4b11      	ldr	r3, [pc, #68]	@ (8003fec <_sbrk+0x64>)
 8003fa6:	4a12      	ldr	r2, [pc, #72]	@ (8003ff0 <_sbrk+0x68>)
 8003fa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003faa:	4b10      	ldr	r3, [pc, #64]	@ (8003fec <_sbrk+0x64>)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d207      	bcs.n	8003fc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fb8:	f002 f8cc 	bl	8006154 <__errno>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	220c      	movs	r2, #12
 8003fc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc6:	e009      	b.n	8003fdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fc8:	4b08      	ldr	r3, [pc, #32]	@ (8003fec <_sbrk+0x64>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fce:	4b07      	ldr	r3, [pc, #28]	@ (8003fec <_sbrk+0x64>)
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	4a05      	ldr	r2, [pc, #20]	@ (8003fec <_sbrk+0x64>)
 8003fd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fda:	68fb      	ldr	r3, [r7, #12]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	20020000 	.word	0x20020000
 8003fe8:	00004000 	.word	0x00004000
 8003fec:	2000015c 	.word	0x2000015c
 8003ff0:	200002b0 	.word	0x200002b0

08003ff4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ff8:	4b06      	ldr	r3, [pc, #24]	@ (8004014 <SystemInit+0x20>)
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffe:	4a05      	ldr	r2, [pc, #20]	@ (8004014 <SystemInit+0x20>)
 8004000:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004004:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004008:	bf00      	nop
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	e000ed00 	.word	0xe000ed00

08004018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004018:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004050 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800401c:	f7ff ffea 	bl	8003ff4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004020:	480c      	ldr	r0, [pc, #48]	@ (8004054 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004022:	490d      	ldr	r1, [pc, #52]	@ (8004058 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004024:	4a0d      	ldr	r2, [pc, #52]	@ (800405c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004028:	e002      	b.n	8004030 <LoopCopyDataInit>

0800402a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800402a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800402c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800402e:	3304      	adds	r3, #4

08004030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004034:	d3f9      	bcc.n	800402a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004036:	4a0a      	ldr	r2, [pc, #40]	@ (8004060 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004038:	4c0a      	ldr	r4, [pc, #40]	@ (8004064 <LoopFillZerobss+0x22>)
  movs r3, #0
 800403a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800403c:	e001      	b.n	8004042 <LoopFillZerobss>

0800403e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800403e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004040:	3204      	adds	r2, #4

08004042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004044:	d3fb      	bcc.n	800403e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004046:	f002 f88b 	bl	8006160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800404a:	f7fc fa9b 	bl	8000584 <main>
  bx  lr    
 800404e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004050:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004058:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800405c:	08006f9c 	.word	0x08006f9c
  ldr r2, =_sbss
 8004060:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8004064:	200002b0 	.word	0x200002b0

08004068 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004068:	e7fe      	b.n	8004068 <ADC_IRQHandler>
	...

0800406c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004070:	4b0e      	ldr	r3, [pc, #56]	@ (80040ac <HAL_Init+0x40>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a0d      	ldr	r2, [pc, #52]	@ (80040ac <HAL_Init+0x40>)
 8004076:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800407a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800407c:	4b0b      	ldr	r3, [pc, #44]	@ (80040ac <HAL_Init+0x40>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a0a      	ldr	r2, [pc, #40]	@ (80040ac <HAL_Init+0x40>)
 8004082:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004086:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004088:	4b08      	ldr	r3, [pc, #32]	@ (80040ac <HAL_Init+0x40>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a07      	ldr	r2, [pc, #28]	@ (80040ac <HAL_Init+0x40>)
 800408e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004092:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004094:	2003      	movs	r0, #3
 8004096:	f000 f8fc 	bl	8004292 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800409a:	200f      	movs	r0, #15
 800409c:	f7ff fe5a 	bl	8003d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040a0:	f7ff fdb0 	bl	8003c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40023c00 	.word	0x40023c00

080040b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040b4:	4b06      	ldr	r3, [pc, #24]	@ (80040d0 <HAL_IncTick+0x20>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	461a      	mov	r2, r3
 80040ba:	4b06      	ldr	r3, [pc, #24]	@ (80040d4 <HAL_IncTick+0x24>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4413      	add	r3, r2
 80040c0:	4a04      	ldr	r2, [pc, #16]	@ (80040d4 <HAL_IncTick+0x24>)
 80040c2:	6013      	str	r3, [r2, #0]
}
 80040c4:	bf00      	nop
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	20000008 	.word	0x20000008
 80040d4:	20000160 	.word	0x20000160

080040d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  return uwTick;
 80040dc:	4b03      	ldr	r3, [pc, #12]	@ (80040ec <HAL_GetTick+0x14>)
 80040de:	681b      	ldr	r3, [r3, #0]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	20000160 	.word	0x20000160

080040f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040f8:	f7ff ffee 	bl	80040d8 <HAL_GetTick>
 80040fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004108:	d005      	beq.n	8004116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800410a:	4b0a      	ldr	r3, [pc, #40]	@ (8004134 <HAL_Delay+0x44>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4413      	add	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004116:	bf00      	nop
 8004118:	f7ff ffde 	bl	80040d8 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	429a      	cmp	r2, r3
 8004126:	d8f7      	bhi.n	8004118 <HAL_Delay+0x28>
  {
  }
}
 8004128:	bf00      	nop
 800412a:	bf00      	nop
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20000008 	.word	0x20000008

08004138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004148:	4b0c      	ldr	r3, [pc, #48]	@ (800417c <__NVIC_SetPriorityGrouping+0x44>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004154:	4013      	ands	r3, r2
 8004156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004160:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004164:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800416a:	4a04      	ldr	r2, [pc, #16]	@ (800417c <__NVIC_SetPriorityGrouping+0x44>)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	60d3      	str	r3, [r2, #12]
}
 8004170:	bf00      	nop
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	e000ed00 	.word	0xe000ed00

08004180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004184:	4b04      	ldr	r3, [pc, #16]	@ (8004198 <__NVIC_GetPriorityGrouping+0x18>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	0a1b      	lsrs	r3, r3, #8
 800418a:	f003 0307 	and.w	r3, r3, #7
}
 800418e:	4618      	mov	r0, r3
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	e000ed00 	.word	0xe000ed00

0800419c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	4603      	mov	r3, r0
 80041a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	db0b      	blt.n	80041c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041ae:	79fb      	ldrb	r3, [r7, #7]
 80041b0:	f003 021f 	and.w	r2, r3, #31
 80041b4:	4907      	ldr	r1, [pc, #28]	@ (80041d4 <__NVIC_EnableIRQ+0x38>)
 80041b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	2001      	movs	r0, #1
 80041be:	fa00 f202 	lsl.w	r2, r0, r2
 80041c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	e000e100 	.word	0xe000e100

080041d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	4603      	mov	r3, r0
 80041e0:	6039      	str	r1, [r7, #0]
 80041e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	db0a      	blt.n	8004202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	490c      	ldr	r1, [pc, #48]	@ (8004224 <__NVIC_SetPriority+0x4c>)
 80041f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f6:	0112      	lsls	r2, r2, #4
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	440b      	add	r3, r1
 80041fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004200:	e00a      	b.n	8004218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	b2da      	uxtb	r2, r3
 8004206:	4908      	ldr	r1, [pc, #32]	@ (8004228 <__NVIC_SetPriority+0x50>)
 8004208:	79fb      	ldrb	r3, [r7, #7]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	3b04      	subs	r3, #4
 8004210:	0112      	lsls	r2, r2, #4
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	440b      	add	r3, r1
 8004216:	761a      	strb	r2, [r3, #24]
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	e000e100 	.word	0xe000e100
 8004228:	e000ed00 	.word	0xe000ed00

0800422c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800422c:	b480      	push	{r7}
 800422e:	b089      	sub	sp, #36	@ 0x24
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	f1c3 0307 	rsb	r3, r3, #7
 8004246:	2b04      	cmp	r3, #4
 8004248:	bf28      	it	cs
 800424a:	2304      	movcs	r3, #4
 800424c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	3304      	adds	r3, #4
 8004252:	2b06      	cmp	r3, #6
 8004254:	d902      	bls.n	800425c <NVIC_EncodePriority+0x30>
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	3b03      	subs	r3, #3
 800425a:	e000      	b.n	800425e <NVIC_EncodePriority+0x32>
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004260:	f04f 32ff 	mov.w	r2, #4294967295
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	43da      	mvns	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	401a      	ands	r2, r3
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004274:	f04f 31ff 	mov.w	r1, #4294967295
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	fa01 f303 	lsl.w	r3, r1, r3
 800427e:	43d9      	mvns	r1, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004284:	4313      	orrs	r3, r2
         );
}
 8004286:	4618      	mov	r0, r3
 8004288:	3724      	adds	r7, #36	@ 0x24
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b082      	sub	sp, #8
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff ff4c 	bl	8004138 <__NVIC_SetPriorityGrouping>
}
 80042a0:	bf00      	nop
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4603      	mov	r3, r0
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042ba:	f7ff ff61 	bl	8004180 <__NVIC_GetPriorityGrouping>
 80042be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	68b9      	ldr	r1, [r7, #8]
 80042c4:	6978      	ldr	r0, [r7, #20]
 80042c6:	f7ff ffb1 	bl	800422c <NVIC_EncodePriority>
 80042ca:	4602      	mov	r2, r0
 80042cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042d0:	4611      	mov	r1, r2
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff ff80 	bl	80041d8 <__NVIC_SetPriority>
}
 80042d8:	bf00      	nop
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	4603      	mov	r3, r0
 80042e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff ff54 	bl	800419c <__NVIC_EnableIRQ>
}
 80042f4:	bf00      	nop
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b089      	sub	sp, #36	@ 0x24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004306:	2300      	movs	r3, #0
 8004308:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800430a:	2300      	movs	r3, #0
 800430c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800430e:	2300      	movs	r3, #0
 8004310:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
 8004316:	e16b      	b.n	80045f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004318:	2201      	movs	r2, #1
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	4013      	ands	r3, r2
 800432a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	429a      	cmp	r2, r3
 8004332:	f040 815a 	bne.w	80045ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	2b01      	cmp	r3, #1
 8004340:	d005      	beq.n	800434e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800434a:	2b02      	cmp	r3, #2
 800434c:	d130      	bne.n	80043b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	2203      	movs	r2, #3
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43db      	mvns	r3, r3
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	4013      	ands	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	4313      	orrs	r3, r2
 8004376:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004384:	2201      	movs	r2, #1
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	43db      	mvns	r3, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4013      	ands	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	091b      	lsrs	r3, r3, #4
 800439a:	f003 0201 	and.w	r2, r3, #1
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 0303 	and.w	r3, r3, #3
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d017      	beq.n	80043ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	2203      	movs	r2, #3
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	43db      	mvns	r3, r3
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	4013      	ands	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f003 0303 	and.w	r3, r3, #3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d123      	bne.n	8004440 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	08da      	lsrs	r2, r3, #3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3208      	adds	r2, #8
 8004400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004404:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	220f      	movs	r2, #15
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	43db      	mvns	r3, r3
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	4013      	ands	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	4313      	orrs	r3, r2
 8004430:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	08da      	lsrs	r2, r3, #3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3208      	adds	r2, #8
 800443a:	69b9      	ldr	r1, [r7, #24]
 800443c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	2203      	movs	r2, #3
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	43db      	mvns	r3, r3
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	4013      	ands	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f003 0203 	and.w	r2, r3, #3
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	4313      	orrs	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 80b4 	beq.w	80045ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	4b60      	ldr	r3, [pc, #384]	@ (8004608 <HAL_GPIO_Init+0x30c>)
 8004488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448a:	4a5f      	ldr	r2, [pc, #380]	@ (8004608 <HAL_GPIO_Init+0x30c>)
 800448c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004490:	6453      	str	r3, [r2, #68]	@ 0x44
 8004492:	4b5d      	ldr	r3, [pc, #372]	@ (8004608 <HAL_GPIO_Init+0x30c>)
 8004494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004496:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800449e:	4a5b      	ldr	r2, [pc, #364]	@ (800460c <HAL_GPIO_Init+0x310>)
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	089b      	lsrs	r3, r3, #2
 80044a4:	3302      	adds	r3, #2
 80044a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	220f      	movs	r2, #15
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	43db      	mvns	r3, r3
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	4013      	ands	r3, r2
 80044c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a52      	ldr	r2, [pc, #328]	@ (8004610 <HAL_GPIO_Init+0x314>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d02b      	beq.n	8004522 <HAL_GPIO_Init+0x226>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a51      	ldr	r2, [pc, #324]	@ (8004614 <HAL_GPIO_Init+0x318>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d025      	beq.n	800451e <HAL_GPIO_Init+0x222>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a50      	ldr	r2, [pc, #320]	@ (8004618 <HAL_GPIO_Init+0x31c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d01f      	beq.n	800451a <HAL_GPIO_Init+0x21e>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a4f      	ldr	r2, [pc, #316]	@ (800461c <HAL_GPIO_Init+0x320>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d019      	beq.n	8004516 <HAL_GPIO_Init+0x21a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a4e      	ldr	r2, [pc, #312]	@ (8004620 <HAL_GPIO_Init+0x324>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d013      	beq.n	8004512 <HAL_GPIO_Init+0x216>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a4d      	ldr	r2, [pc, #308]	@ (8004624 <HAL_GPIO_Init+0x328>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00d      	beq.n	800450e <HAL_GPIO_Init+0x212>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a4c      	ldr	r2, [pc, #304]	@ (8004628 <HAL_GPIO_Init+0x32c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d007      	beq.n	800450a <HAL_GPIO_Init+0x20e>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a4b      	ldr	r2, [pc, #300]	@ (800462c <HAL_GPIO_Init+0x330>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d101      	bne.n	8004506 <HAL_GPIO_Init+0x20a>
 8004502:	2307      	movs	r3, #7
 8004504:	e00e      	b.n	8004524 <HAL_GPIO_Init+0x228>
 8004506:	2308      	movs	r3, #8
 8004508:	e00c      	b.n	8004524 <HAL_GPIO_Init+0x228>
 800450a:	2306      	movs	r3, #6
 800450c:	e00a      	b.n	8004524 <HAL_GPIO_Init+0x228>
 800450e:	2305      	movs	r3, #5
 8004510:	e008      	b.n	8004524 <HAL_GPIO_Init+0x228>
 8004512:	2304      	movs	r3, #4
 8004514:	e006      	b.n	8004524 <HAL_GPIO_Init+0x228>
 8004516:	2303      	movs	r3, #3
 8004518:	e004      	b.n	8004524 <HAL_GPIO_Init+0x228>
 800451a:	2302      	movs	r3, #2
 800451c:	e002      	b.n	8004524 <HAL_GPIO_Init+0x228>
 800451e:	2301      	movs	r3, #1
 8004520:	e000      	b.n	8004524 <HAL_GPIO_Init+0x228>
 8004522:	2300      	movs	r3, #0
 8004524:	69fa      	ldr	r2, [r7, #28]
 8004526:	f002 0203 	and.w	r2, r2, #3
 800452a:	0092      	lsls	r2, r2, #2
 800452c:	4093      	lsls	r3, r2
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	4313      	orrs	r3, r2
 8004532:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004534:	4935      	ldr	r1, [pc, #212]	@ (800460c <HAL_GPIO_Init+0x310>)
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	089b      	lsrs	r3, r3, #2
 800453a:	3302      	adds	r3, #2
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004542:	4b3b      	ldr	r3, [pc, #236]	@ (8004630 <HAL_GPIO_Init+0x334>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	43db      	mvns	r3, r3
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	4013      	ands	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	4313      	orrs	r3, r2
 8004564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004566:	4a32      	ldr	r2, [pc, #200]	@ (8004630 <HAL_GPIO_Init+0x334>)
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800456c:	4b30      	ldr	r3, [pc, #192]	@ (8004630 <HAL_GPIO_Init+0x334>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	43db      	mvns	r3, r3
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	4013      	ands	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	4313      	orrs	r3, r2
 800458e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004590:	4a27      	ldr	r2, [pc, #156]	@ (8004630 <HAL_GPIO_Init+0x334>)
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004596:	4b26      	ldr	r3, [pc, #152]	@ (8004630 <HAL_GPIO_Init+0x334>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	43db      	mvns	r3, r3
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	4013      	ands	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045ba:	4a1d      	ldr	r2, [pc, #116]	@ (8004630 <HAL_GPIO_Init+0x334>)
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004630 <HAL_GPIO_Init+0x334>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	43db      	mvns	r3, r3
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	4013      	ands	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045e4:	4a12      	ldr	r2, [pc, #72]	@ (8004630 <HAL_GPIO_Init+0x334>)
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	3301      	adds	r3, #1
 80045ee:	61fb      	str	r3, [r7, #28]
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	2b0f      	cmp	r3, #15
 80045f4:	f67f ae90 	bls.w	8004318 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045f8:	bf00      	nop
 80045fa:	bf00      	nop
 80045fc:	3724      	adds	r7, #36	@ 0x24
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40023800 	.word	0x40023800
 800460c:	40013800 	.word	0x40013800
 8004610:	40020000 	.word	0x40020000
 8004614:	40020400 	.word	0x40020400
 8004618:	40020800 	.word	0x40020800
 800461c:	40020c00 	.word	0x40020c00
 8004620:	40021000 	.word	0x40021000
 8004624:	40021400 	.word	0x40021400
 8004628:	40021800 	.word	0x40021800
 800462c:	40021c00 	.word	0x40021c00
 8004630:	40013c00 	.word	0x40013c00

08004634 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e267      	b.n	8004b16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d075      	beq.n	800473e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004652:	4b88      	ldr	r3, [pc, #544]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 030c 	and.w	r3, r3, #12
 800465a:	2b04      	cmp	r3, #4
 800465c:	d00c      	beq.n	8004678 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800465e:	4b85      	ldr	r3, [pc, #532]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004666:	2b08      	cmp	r3, #8
 8004668:	d112      	bne.n	8004690 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800466a:	4b82      	ldr	r3, [pc, #520]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004672:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004676:	d10b      	bne.n	8004690 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004678:	4b7e      	ldr	r3, [pc, #504]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d05b      	beq.n	800473c <HAL_RCC_OscConfig+0x108>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d157      	bne.n	800473c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e242      	b.n	8004b16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004698:	d106      	bne.n	80046a8 <HAL_RCC_OscConfig+0x74>
 800469a:	4b76      	ldr	r3, [pc, #472]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a75      	ldr	r2, [pc, #468]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 80046a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	e01d      	b.n	80046e4 <HAL_RCC_OscConfig+0xb0>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046b0:	d10c      	bne.n	80046cc <HAL_RCC_OscConfig+0x98>
 80046b2:	4b70      	ldr	r3, [pc, #448]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a6f      	ldr	r2, [pc, #444]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 80046b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	4b6d      	ldr	r3, [pc, #436]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a6c      	ldr	r2, [pc, #432]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 80046c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	e00b      	b.n	80046e4 <HAL_RCC_OscConfig+0xb0>
 80046cc:	4b69      	ldr	r3, [pc, #420]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a68      	ldr	r2, [pc, #416]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 80046d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046d6:	6013      	str	r3, [r2, #0]
 80046d8:	4b66      	ldr	r3, [pc, #408]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a65      	ldr	r2, [pc, #404]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 80046de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d013      	beq.n	8004714 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ec:	f7ff fcf4 	bl	80040d8 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046f4:	f7ff fcf0 	bl	80040d8 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b64      	cmp	r3, #100	@ 0x64
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e207      	b.n	8004b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004706:	4b5b      	ldr	r3, [pc, #364]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0f0      	beq.n	80046f4 <HAL_RCC_OscConfig+0xc0>
 8004712:	e014      	b.n	800473e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004714:	f7ff fce0 	bl	80040d8 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800471c:	f7ff fcdc 	bl	80040d8 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b64      	cmp	r3, #100	@ 0x64
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e1f3      	b.n	8004b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800472e:	4b51      	ldr	r3, [pc, #324]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1f0      	bne.n	800471c <HAL_RCC_OscConfig+0xe8>
 800473a:	e000      	b.n	800473e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800473c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d063      	beq.n	8004812 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800474a:	4b4a      	ldr	r3, [pc, #296]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 030c 	and.w	r3, r3, #12
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00b      	beq.n	800476e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004756:	4b47      	ldr	r3, [pc, #284]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800475e:	2b08      	cmp	r3, #8
 8004760:	d11c      	bne.n	800479c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004762:	4b44      	ldr	r3, [pc, #272]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d116      	bne.n	800479c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800476e:	4b41      	ldr	r3, [pc, #260]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d005      	beq.n	8004786 <HAL_RCC_OscConfig+0x152>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d001      	beq.n	8004786 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e1c7      	b.n	8004b16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004786:	4b3b      	ldr	r3, [pc, #236]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4937      	ldr	r1, [pc, #220]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 8004796:	4313      	orrs	r3, r2
 8004798:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800479a:	e03a      	b.n	8004812 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d020      	beq.n	80047e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047a4:	4b34      	ldr	r3, [pc, #208]	@ (8004878 <HAL_RCC_OscConfig+0x244>)
 80047a6:	2201      	movs	r2, #1
 80047a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047aa:	f7ff fc95 	bl	80040d8 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047b2:	f7ff fc91 	bl	80040d8 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e1a8      	b.n	8004b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0f0      	beq.n	80047b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d0:	4b28      	ldr	r3, [pc, #160]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	4925      	ldr	r1, [pc, #148]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	600b      	str	r3, [r1, #0]
 80047e4:	e015      	b.n	8004812 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047e6:	4b24      	ldr	r3, [pc, #144]	@ (8004878 <HAL_RCC_OscConfig+0x244>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ec:	f7ff fc74 	bl	80040d8 <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047f4:	f7ff fc70 	bl	80040d8 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e187      	b.n	8004b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004806:	4b1b      	ldr	r3, [pc, #108]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1f0      	bne.n	80047f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b00      	cmp	r3, #0
 800481c:	d036      	beq.n	800488c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d016      	beq.n	8004854 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004826:	4b15      	ldr	r3, [pc, #84]	@ (800487c <HAL_RCC_OscConfig+0x248>)
 8004828:	2201      	movs	r2, #1
 800482a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482c:	f7ff fc54 	bl	80040d8 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004834:	f7ff fc50 	bl	80040d8 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e167      	b.n	8004b16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004846:	4b0b      	ldr	r3, [pc, #44]	@ (8004874 <HAL_RCC_OscConfig+0x240>)
 8004848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0f0      	beq.n	8004834 <HAL_RCC_OscConfig+0x200>
 8004852:	e01b      	b.n	800488c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004854:	4b09      	ldr	r3, [pc, #36]	@ (800487c <HAL_RCC_OscConfig+0x248>)
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800485a:	f7ff fc3d 	bl	80040d8 <HAL_GetTick>
 800485e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004860:	e00e      	b.n	8004880 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004862:	f7ff fc39 	bl	80040d8 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d907      	bls.n	8004880 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e150      	b.n	8004b16 <HAL_RCC_OscConfig+0x4e2>
 8004874:	40023800 	.word	0x40023800
 8004878:	42470000 	.word	0x42470000
 800487c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004880:	4b88      	ldr	r3, [pc, #544]	@ (8004aa4 <HAL_RCC_OscConfig+0x470>)
 8004882:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1ea      	bne.n	8004862 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 8097 	beq.w	80049c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800489a:	2300      	movs	r3, #0
 800489c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800489e:	4b81      	ldr	r3, [pc, #516]	@ (8004aa4 <HAL_RCC_OscConfig+0x470>)
 80048a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10f      	bne.n	80048ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048aa:	2300      	movs	r3, #0
 80048ac:	60bb      	str	r3, [r7, #8]
 80048ae:	4b7d      	ldr	r3, [pc, #500]	@ (8004aa4 <HAL_RCC_OscConfig+0x470>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b2:	4a7c      	ldr	r2, [pc, #496]	@ (8004aa4 <HAL_RCC_OscConfig+0x470>)
 80048b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80048ba:	4b7a      	ldr	r3, [pc, #488]	@ (8004aa4 <HAL_RCC_OscConfig+0x470>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048c2:	60bb      	str	r3, [r7, #8]
 80048c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048c6:	2301      	movs	r3, #1
 80048c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ca:	4b77      	ldr	r3, [pc, #476]	@ (8004aa8 <HAL_RCC_OscConfig+0x474>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d118      	bne.n	8004908 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048d6:	4b74      	ldr	r3, [pc, #464]	@ (8004aa8 <HAL_RCC_OscConfig+0x474>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a73      	ldr	r2, [pc, #460]	@ (8004aa8 <HAL_RCC_OscConfig+0x474>)
 80048dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048e2:	f7ff fbf9 	bl	80040d8 <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ea:	f7ff fbf5 	bl	80040d8 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e10c      	b.n	8004b16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fc:	4b6a      	ldr	r3, [pc, #424]	@ (8004aa8 <HAL_RCC_OscConfig+0x474>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0f0      	beq.n	80048ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d106      	bne.n	800491e <HAL_RCC_OscConfig+0x2ea>
 8004910:	4b64      	ldr	r3, [pc, #400]	@ (8004aa4 <HAL_RCC_OscConfig+0x470>)
 8004912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004914:	4a63      	ldr	r2, [pc, #396]	@ (8004aa4 <HAL_RCC_OscConfig+0x470>)
 8004916:	f043 0301 	orr.w	r3, r3, #1
 800491a:	6713      	str	r3, [r2, #112]	@ 0x70
 800491c:	e01c      	b.n	8004958 <HAL_RCC_OscConfig+0x324>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2b05      	cmp	r3, #5
 8004924:	d10c      	bne.n	8004940 <HAL_RCC_OscConfig+0x30c>
 8004926:	4b5f      	ldr	r3, [pc, #380]	@ (8004aa4 <HAL_RCC_OscConfig+0x470>)
 8004928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800492a:	4a5e      	ldr	r2, [pc, #376]	@ (8004aa4 <HAL_RCC_OscConfig+0x470>)
 800492c:	f043 0304 	orr.w	r3, r3, #4
 8004930:	6713      	str	r3, [r2, #112]	@ 0x70
 8004932:	4b5c      	ldr	r3, [pc, #368]	@ (8004aa4 <HAL_RCC_OscConfig+0x470>)
 8004934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004936:	4a5b      	ldr	r2, [pc, #364]	@ (8004aa4 <HAL_RCC_OscConfig+0x470>)
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	6713      	str	r3, [r2, #112]	@ 0x70
 800493e:	e00b      	b.n	8004958 <HAL_RCC_OscConfig+0x324>
 8004940:	4b58      	ldr	r3, [pc, #352]	@ (8004aa4 <HAL_RCC_OscConfig+0x470>)
 8004942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004944:	4a57      	ldr	r2, [pc, #348]	@ (8004aa4 <HAL_RCC_OscConfig+0x470>)
 8004946:	f023 0301 	bic.w	r3, r3, #1
 800494a:	6713      	str	r3, [r2, #112]	@ 0x70
 800494c:	4b55      	ldr	r3, [pc, #340]	@ (8004aa4 <HAL_RCC_OscConfig+0x470>)
 800494e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004950:	4a54      	ldr	r2, [pc, #336]	@ (8004aa4 <HAL_RCC_OscConfig+0x470>)
 8004952:	f023 0304 	bic.w	r3, r3, #4
 8004956:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d015      	beq.n	800498c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004960:	f7ff fbba 	bl	80040d8 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004966:	e00a      	b.n	800497e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004968:	f7ff fbb6 	bl	80040d8 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004976:	4293      	cmp	r3, r2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e0cb      	b.n	8004b16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800497e:	4b49      	ldr	r3, [pc, #292]	@ (8004aa4 <HAL_RCC_OscConfig+0x470>)
 8004980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0ee      	beq.n	8004968 <HAL_RCC_OscConfig+0x334>
 800498a:	e014      	b.n	80049b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800498c:	f7ff fba4 	bl	80040d8 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004992:	e00a      	b.n	80049aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004994:	f7ff fba0 	bl	80040d8 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e0b5      	b.n	8004b16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049aa:	4b3e      	ldr	r3, [pc, #248]	@ (8004aa4 <HAL_RCC_OscConfig+0x470>)
 80049ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1ee      	bne.n	8004994 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049b6:	7dfb      	ldrb	r3, [r7, #23]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d105      	bne.n	80049c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049bc:	4b39      	ldr	r3, [pc, #228]	@ (8004aa4 <HAL_RCC_OscConfig+0x470>)
 80049be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c0:	4a38      	ldr	r2, [pc, #224]	@ (8004aa4 <HAL_RCC_OscConfig+0x470>)
 80049c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 80a1 	beq.w	8004b14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049d2:	4b34      	ldr	r3, [pc, #208]	@ (8004aa4 <HAL_RCC_OscConfig+0x470>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 030c 	and.w	r3, r3, #12
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d05c      	beq.n	8004a98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d141      	bne.n	8004a6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049e6:	4b31      	ldr	r3, [pc, #196]	@ (8004aac <HAL_RCC_OscConfig+0x478>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ec:	f7ff fb74 	bl	80040d8 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049f4:	f7ff fb70 	bl	80040d8 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e087      	b.n	8004b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a06:	4b27      	ldr	r3, [pc, #156]	@ (8004aa4 <HAL_RCC_OscConfig+0x470>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f0      	bne.n	80049f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69da      	ldr	r2, [r3, #28]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a20:	019b      	lsls	r3, r3, #6
 8004a22:	431a      	orrs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a28:	085b      	lsrs	r3, r3, #1
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	041b      	lsls	r3, r3, #16
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a34:	061b      	lsls	r3, r3, #24
 8004a36:	491b      	ldr	r1, [pc, #108]	@ (8004aa4 <HAL_RCC_OscConfig+0x470>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8004aac <HAL_RCC_OscConfig+0x478>)
 8004a3e:	2201      	movs	r2, #1
 8004a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a42:	f7ff fb49 	bl	80040d8 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a4a:	f7ff fb45 	bl	80040d8 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e05c      	b.n	8004b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a5c:	4b11      	ldr	r3, [pc, #68]	@ (8004aa4 <HAL_RCC_OscConfig+0x470>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0f0      	beq.n	8004a4a <HAL_RCC_OscConfig+0x416>
 8004a68:	e054      	b.n	8004b14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a6a:	4b10      	ldr	r3, [pc, #64]	@ (8004aac <HAL_RCC_OscConfig+0x478>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a70:	f7ff fb32 	bl	80040d8 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a78:	f7ff fb2e 	bl	80040d8 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e045      	b.n	8004b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a8a:	4b06      	ldr	r3, [pc, #24]	@ (8004aa4 <HAL_RCC_OscConfig+0x470>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f0      	bne.n	8004a78 <HAL_RCC_OscConfig+0x444>
 8004a96:	e03d      	b.n	8004b14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d107      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e038      	b.n	8004b16 <HAL_RCC_OscConfig+0x4e2>
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	40007000 	.word	0x40007000
 8004aac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8004b20 <HAL_RCC_OscConfig+0x4ec>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d028      	beq.n	8004b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d121      	bne.n	8004b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d11a      	bne.n	8004b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ae6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d111      	bne.n	8004b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af6:	085b      	lsrs	r3, r3, #1
 8004af8:	3b01      	subs	r3, #1
 8004afa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d107      	bne.n	8004b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d001      	beq.n	8004b14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e000      	b.n	8004b16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	40023800 	.word	0x40023800

08004b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0cc      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b38:	4b68      	ldr	r3, [pc, #416]	@ (8004cdc <HAL_RCC_ClockConfig+0x1b8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d90c      	bls.n	8004b60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b46:	4b65      	ldr	r3, [pc, #404]	@ (8004cdc <HAL_RCC_ClockConfig+0x1b8>)
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4e:	4b63      	ldr	r3, [pc, #396]	@ (8004cdc <HAL_RCC_ClockConfig+0x1b8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d001      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e0b8      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d020      	beq.n	8004bae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d005      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b78:	4b59      	ldr	r3, [pc, #356]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	4a58      	ldr	r2, [pc, #352]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d005      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b90:	4b53      	ldr	r3, [pc, #332]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	4a52      	ldr	r2, [pc, #328]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b9c:	4b50      	ldr	r3, [pc, #320]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	494d      	ldr	r1, [pc, #308]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d044      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d107      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bc2:	4b47      	ldr	r3, [pc, #284]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d119      	bne.n	8004c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e07f      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d003      	beq.n	8004be2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d107      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004be2:	4b3f      	ldr	r3, [pc, #252]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d109      	bne.n	8004c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e06f      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf2:	4b3b      	ldr	r3, [pc, #236]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e067      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c02:	4b37      	ldr	r3, [pc, #220]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f023 0203 	bic.w	r2, r3, #3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	4934      	ldr	r1, [pc, #208]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c14:	f7ff fa60 	bl	80040d8 <HAL_GetTick>
 8004c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c1a:	e00a      	b.n	8004c32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c1c:	f7ff fa5c 	bl	80040d8 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e04f      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c32:	4b2b      	ldr	r3, [pc, #172]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 020c 	and.w	r2, r3, #12
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d1eb      	bne.n	8004c1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c44:	4b25      	ldr	r3, [pc, #148]	@ (8004cdc <HAL_RCC_ClockConfig+0x1b8>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d20c      	bcs.n	8004c6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c52:	4b22      	ldr	r3, [pc, #136]	@ (8004cdc <HAL_RCC_ClockConfig+0x1b8>)
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5a:	4b20      	ldr	r3, [pc, #128]	@ (8004cdc <HAL_RCC_ClockConfig+0x1b8>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0307 	and.w	r3, r3, #7
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d001      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e032      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d008      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c78:	4b19      	ldr	r3, [pc, #100]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	4916      	ldr	r1, [pc, #88]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d009      	beq.n	8004caa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c96:	4b12      	ldr	r3, [pc, #72]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	490e      	ldr	r1, [pc, #56]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004caa:	f000 f821 	bl	8004cf0 <HAL_RCC_GetSysClockFreq>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	091b      	lsrs	r3, r3, #4
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	490a      	ldr	r1, [pc, #40]	@ (8004ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8004cbc:	5ccb      	ldrb	r3, [r1, r3]
 8004cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc2:	4a09      	ldr	r2, [pc, #36]	@ (8004ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cc6:	4b09      	ldr	r3, [pc, #36]	@ (8004cec <HAL_RCC_ClockConfig+0x1c8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff f842 	bl	8003d54 <HAL_InitTick>

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	40023c00 	.word	0x40023c00
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	08006f40 	.word	0x08006f40
 8004ce8:	20000000 	.word	0x20000000
 8004cec:	20000004 	.word	0x20000004

08004cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cf4:	b090      	sub	sp, #64	@ 0x40
 8004cf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d00:	2300      	movs	r3, #0
 8004d02:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d08:	4b59      	ldr	r3, [pc, #356]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 030c 	and.w	r3, r3, #12
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d00d      	beq.n	8004d30 <HAL_RCC_GetSysClockFreq+0x40>
 8004d14:	2b08      	cmp	r3, #8
 8004d16:	f200 80a1 	bhi.w	8004e5c <HAL_RCC_GetSysClockFreq+0x16c>
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <HAL_RCC_GetSysClockFreq+0x34>
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d003      	beq.n	8004d2a <HAL_RCC_GetSysClockFreq+0x3a>
 8004d22:	e09b      	b.n	8004e5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d24:	4b53      	ldr	r3, [pc, #332]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d26:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004d28:	e09b      	b.n	8004e62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d2a:	4b53      	ldr	r3, [pc, #332]	@ (8004e78 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d2e:	e098      	b.n	8004e62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d30:	4b4f      	ldr	r3, [pc, #316]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d38:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d3a:	4b4d      	ldr	r3, [pc, #308]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d028      	beq.n	8004d98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d46:	4b4a      	ldr	r3, [pc, #296]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	099b      	lsrs	r3, r3, #6
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	623b      	str	r3, [r7, #32]
 8004d50:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d58:	2100      	movs	r1, #0
 8004d5a:	4b47      	ldr	r3, [pc, #284]	@ (8004e78 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d5c:	fb03 f201 	mul.w	r2, r3, r1
 8004d60:	2300      	movs	r3, #0
 8004d62:	fb00 f303 	mul.w	r3, r0, r3
 8004d66:	4413      	add	r3, r2
 8004d68:	4a43      	ldr	r2, [pc, #268]	@ (8004e78 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d6a:	fba0 1202 	umull	r1, r2, r0, r2
 8004d6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d70:	460a      	mov	r2, r1
 8004d72:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004d74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d76:	4413      	add	r3, r2
 8004d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	61bb      	str	r3, [r7, #24]
 8004d80:	61fa      	str	r2, [r7, #28]
 8004d82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004d8a:	f7fb fa71 	bl	8000270 <__aeabi_uldivmod>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	460b      	mov	r3, r1
 8004d92:	4613      	mov	r3, r2
 8004d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d96:	e053      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d98:	4b35      	ldr	r3, [pc, #212]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	099b      	lsrs	r3, r3, #6
 8004d9e:	2200      	movs	r2, #0
 8004da0:	613b      	str	r3, [r7, #16]
 8004da2:	617a      	str	r2, [r7, #20]
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004daa:	f04f 0b00 	mov.w	fp, #0
 8004dae:	4652      	mov	r2, sl
 8004db0:	465b      	mov	r3, fp
 8004db2:	f04f 0000 	mov.w	r0, #0
 8004db6:	f04f 0100 	mov.w	r1, #0
 8004dba:	0159      	lsls	r1, r3, #5
 8004dbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dc0:	0150      	lsls	r0, r2, #5
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	ebb2 080a 	subs.w	r8, r2, sl
 8004dca:	eb63 090b 	sbc.w	r9, r3, fp
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	f04f 0300 	mov.w	r3, #0
 8004dd6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004dda:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004dde:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004de2:	ebb2 0408 	subs.w	r4, r2, r8
 8004de6:	eb63 0509 	sbc.w	r5, r3, r9
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	f04f 0300 	mov.w	r3, #0
 8004df2:	00eb      	lsls	r3, r5, #3
 8004df4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004df8:	00e2      	lsls	r2, r4, #3
 8004dfa:	4614      	mov	r4, r2
 8004dfc:	461d      	mov	r5, r3
 8004dfe:	eb14 030a 	adds.w	r3, r4, sl
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	eb45 030b 	adc.w	r3, r5, fp
 8004e08:	607b      	str	r3, [r7, #4]
 8004e0a:	f04f 0200 	mov.w	r2, #0
 8004e0e:	f04f 0300 	mov.w	r3, #0
 8004e12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e16:	4629      	mov	r1, r5
 8004e18:	028b      	lsls	r3, r1, #10
 8004e1a:	4621      	mov	r1, r4
 8004e1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e20:	4621      	mov	r1, r4
 8004e22:	028a      	lsls	r2, r1, #10
 8004e24:	4610      	mov	r0, r2
 8004e26:	4619      	mov	r1, r3
 8004e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	60bb      	str	r3, [r7, #8]
 8004e2e:	60fa      	str	r2, [r7, #12]
 8004e30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e34:	f7fb fa1c 	bl	8000270 <__aeabi_uldivmod>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e40:	4b0b      	ldr	r3, [pc, #44]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	0c1b      	lsrs	r3, r3, #16
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004e50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e5a:	e002      	b.n	8004e62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e5c:	4b05      	ldr	r3, [pc, #20]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3740      	adds	r7, #64	@ 0x40
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e6e:	bf00      	nop
 8004e70:	40023800 	.word	0x40023800
 8004e74:	00f42400 	.word	0x00f42400
 8004e78:	017d7840 	.word	0x017d7840

08004e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e80:	4b03      	ldr	r3, [pc, #12]	@ (8004e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e82:	681b      	ldr	r3, [r3, #0]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	20000000 	.word	0x20000000

08004e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e98:	f7ff fff0 	bl	8004e7c <HAL_RCC_GetHCLKFreq>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	4b05      	ldr	r3, [pc, #20]	@ (8004eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	0a9b      	lsrs	r3, r3, #10
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	4903      	ldr	r1, [pc, #12]	@ (8004eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eaa:	5ccb      	ldrb	r3, [r1, r3]
 8004eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	08006f50 	.word	0x08006f50

08004ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ec0:	f7ff ffdc 	bl	8004e7c <HAL_RCC_GetHCLKFreq>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	4b05      	ldr	r3, [pc, #20]	@ (8004edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	0b5b      	lsrs	r3, r3, #13
 8004ecc:	f003 0307 	and.w	r3, r3, #7
 8004ed0:	4903      	ldr	r1, [pc, #12]	@ (8004ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ed2:	5ccb      	ldrb	r3, [r1, r3]
 8004ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40023800 	.word	0x40023800
 8004ee0:	08006f50 	.word	0x08006f50

08004ee4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	220f      	movs	r2, #15
 8004ef2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ef4:	4b12      	ldr	r3, [pc, #72]	@ (8004f40 <HAL_RCC_GetClockConfig+0x5c>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 0203 	and.w	r2, r3, #3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f00:	4b0f      	ldr	r3, [pc, #60]	@ (8004f40 <HAL_RCC_GetClockConfig+0x5c>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f40 <HAL_RCC_GetClockConfig+0x5c>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f18:	4b09      	ldr	r3, [pc, #36]	@ (8004f40 <HAL_RCC_GetClockConfig+0x5c>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	08db      	lsrs	r3, r3, #3
 8004f1e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f26:	4b07      	ldr	r3, [pc, #28]	@ (8004f44 <HAL_RCC_GetClockConfig+0x60>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0207 	and.w	r2, r3, #7
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	601a      	str	r2, [r3, #0]
}
 8004f32:	bf00      	nop
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40023800 	.word	0x40023800
 8004f44:	40023c00 	.word	0x40023c00

08004f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e041      	b.n	8004fde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f839 	bl	8004fe6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3304      	adds	r3, #4
 8004f84:	4619      	mov	r1, r3
 8004f86:	4610      	mov	r0, r2
 8004f88:	f000 f9c0 	bl	800530c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
	...

08004ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b01      	cmp	r3, #1
 800500e:	d001      	beq.n	8005014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e04e      	b.n	80050b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0201 	orr.w	r2, r2, #1
 800502a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a23      	ldr	r2, [pc, #140]	@ (80050c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d022      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800503e:	d01d      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a1f      	ldr	r2, [pc, #124]	@ (80050c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d018      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a1e      	ldr	r2, [pc, #120]	@ (80050c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d013      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a1c      	ldr	r2, [pc, #112]	@ (80050cc <HAL_TIM_Base_Start_IT+0xd0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d00e      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a1b      	ldr	r2, [pc, #108]	@ (80050d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d009      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a19      	ldr	r2, [pc, #100]	@ (80050d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d004      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a18      	ldr	r2, [pc, #96]	@ (80050d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d111      	bne.n	80050a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b06      	cmp	r3, #6
 800508c:	d010      	beq.n	80050b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f042 0201 	orr.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800509e:	e007      	b.n	80050b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0201 	orr.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	40010000 	.word	0x40010000
 80050c4:	40000400 	.word	0x40000400
 80050c8:	40000800 	.word	0x40000800
 80050cc:	40000c00 	.word	0x40000c00
 80050d0:	40010400 	.word	0x40010400
 80050d4:	40014000 	.word	0x40014000
 80050d8:	40001800 	.word	0x40001800

080050dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d020      	beq.n	8005140 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d01b      	beq.n	8005140 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f06f 0202 	mvn.w	r2, #2
 8005110:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f8d2 	bl	80052d0 <HAL_TIM_IC_CaptureCallback>
 800512c:	e005      	b.n	800513a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f8c4 	bl	80052bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f8d5 	bl	80052e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	f003 0304 	and.w	r3, r3, #4
 8005146:	2b00      	cmp	r3, #0
 8005148:	d020      	beq.n	800518c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b00      	cmp	r3, #0
 8005152:	d01b      	beq.n	800518c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f06f 0204 	mvn.w	r2, #4
 800515c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2202      	movs	r2, #2
 8005162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f8ac 	bl	80052d0 <HAL_TIM_IC_CaptureCallback>
 8005178:	e005      	b.n	8005186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f89e 	bl	80052bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f8af 	bl	80052e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d020      	beq.n	80051d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b00      	cmp	r3, #0
 800519e:	d01b      	beq.n	80051d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f06f 0208 	mvn.w	r2, #8
 80051a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2204      	movs	r2, #4
 80051ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f886 	bl	80052d0 <HAL_TIM_IC_CaptureCallback>
 80051c4:	e005      	b.n	80051d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f878 	bl	80052bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f889 	bl	80052e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	f003 0310 	and.w	r3, r3, #16
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d020      	beq.n	8005224 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f003 0310 	and.w	r3, r3, #16
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d01b      	beq.n	8005224 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f06f 0210 	mvn.w	r2, #16
 80051f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2208      	movs	r2, #8
 80051fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f860 	bl	80052d0 <HAL_TIM_IC_CaptureCallback>
 8005210:	e005      	b.n	800521e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f852 	bl	80052bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f863 	bl	80052e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00c      	beq.n	8005248 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b00      	cmp	r3, #0
 8005236:	d007      	beq.n	8005248 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f06f 0201 	mvn.w	r2, #1
 8005240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fb fb0e 	bl	8000864 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00c      	beq.n	800526c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005258:	2b00      	cmp	r3, #0
 800525a:	d007      	beq.n	800526c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f906 	bl	8005478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00c      	beq.n	8005290 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800527c:	2b00      	cmp	r3, #0
 800527e:	d007      	beq.n	8005290 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f834 	bl	80052f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00c      	beq.n	80052b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f003 0320 	and.w	r3, r3, #32
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d007      	beq.n	80052b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0220 	mvn.w	r2, #32
 80052ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f8d8 	bl	8005464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052b4:	bf00      	nop
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a46      	ldr	r2, [pc, #280]	@ (8005438 <TIM_Base_SetConfig+0x12c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d013      	beq.n	800534c <TIM_Base_SetConfig+0x40>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800532a:	d00f      	beq.n	800534c <TIM_Base_SetConfig+0x40>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a43      	ldr	r2, [pc, #268]	@ (800543c <TIM_Base_SetConfig+0x130>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d00b      	beq.n	800534c <TIM_Base_SetConfig+0x40>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a42      	ldr	r2, [pc, #264]	@ (8005440 <TIM_Base_SetConfig+0x134>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d007      	beq.n	800534c <TIM_Base_SetConfig+0x40>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a41      	ldr	r2, [pc, #260]	@ (8005444 <TIM_Base_SetConfig+0x138>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d003      	beq.n	800534c <TIM_Base_SetConfig+0x40>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a40      	ldr	r2, [pc, #256]	@ (8005448 <TIM_Base_SetConfig+0x13c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d108      	bne.n	800535e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a35      	ldr	r2, [pc, #212]	@ (8005438 <TIM_Base_SetConfig+0x12c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d02b      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800536c:	d027      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a32      	ldr	r2, [pc, #200]	@ (800543c <TIM_Base_SetConfig+0x130>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d023      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a31      	ldr	r2, [pc, #196]	@ (8005440 <TIM_Base_SetConfig+0x134>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d01f      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a30      	ldr	r2, [pc, #192]	@ (8005444 <TIM_Base_SetConfig+0x138>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d01b      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a2f      	ldr	r2, [pc, #188]	@ (8005448 <TIM_Base_SetConfig+0x13c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d017      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a2e      	ldr	r2, [pc, #184]	@ (800544c <TIM_Base_SetConfig+0x140>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d013      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a2d      	ldr	r2, [pc, #180]	@ (8005450 <TIM_Base_SetConfig+0x144>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d00f      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a2c      	ldr	r2, [pc, #176]	@ (8005454 <TIM_Base_SetConfig+0x148>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00b      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a2b      	ldr	r2, [pc, #172]	@ (8005458 <TIM_Base_SetConfig+0x14c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d007      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a2a      	ldr	r2, [pc, #168]	@ (800545c <TIM_Base_SetConfig+0x150>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d003      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a29      	ldr	r2, [pc, #164]	@ (8005460 <TIM_Base_SetConfig+0x154>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d108      	bne.n	80053d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a10      	ldr	r2, [pc, #64]	@ (8005438 <TIM_Base_SetConfig+0x12c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d003      	beq.n	8005404 <TIM_Base_SetConfig+0xf8>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a12      	ldr	r2, [pc, #72]	@ (8005448 <TIM_Base_SetConfig+0x13c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d103      	bne.n	800540c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	691a      	ldr	r2, [r3, #16]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b01      	cmp	r3, #1
 800541c:	d105      	bne.n	800542a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f023 0201 	bic.w	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	611a      	str	r2, [r3, #16]
  }
}
 800542a:	bf00      	nop
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	40010000 	.word	0x40010000
 800543c:	40000400 	.word	0x40000400
 8005440:	40000800 	.word	0x40000800
 8005444:	40000c00 	.word	0x40000c00
 8005448:	40010400 	.word	0x40010400
 800544c:	40014000 	.word	0x40014000
 8005450:	40014400 	.word	0x40014400
 8005454:	40014800 	.word	0x40014800
 8005458:	40001800 	.word	0x40001800
 800545c:	40001c00 	.word	0x40001c00
 8005460:	40002000 	.word	0x40002000

08005464 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e042      	b.n	8005524 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d106      	bne.n	80054b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7fe fbce 	bl	8003c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2224      	movs	r2, #36	@ 0x24
 80054bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68da      	ldr	r2, [r3, #12]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f973 	bl	80057bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	695a      	ldr	r2, [r3, #20]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68da      	ldr	r2, [r3, #12]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2220      	movs	r2, #32
 8005518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b08a      	sub	sp, #40	@ 0x28
 8005530:	af02      	add	r7, sp, #8
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	603b      	str	r3, [r7, #0]
 8005538:	4613      	mov	r3, r2
 800553a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800553c:	2300      	movs	r3, #0
 800553e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b20      	cmp	r3, #32
 800554a:	d175      	bne.n	8005638 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <HAL_UART_Transmit+0x2c>
 8005552:	88fb      	ldrh	r3, [r7, #6]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e06e      	b.n	800563a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2221      	movs	r2, #33	@ 0x21
 8005566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800556a:	f7fe fdb5 	bl	80040d8 <HAL_GetTick>
 800556e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	88fa      	ldrh	r2, [r7, #6]
 8005574:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	88fa      	ldrh	r2, [r7, #6]
 800557a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005584:	d108      	bne.n	8005598 <HAL_UART_Transmit+0x6c>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d104      	bne.n	8005598 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800558e:	2300      	movs	r3, #0
 8005590:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	61bb      	str	r3, [r7, #24]
 8005596:	e003      	b.n	80055a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800559c:	2300      	movs	r3, #0
 800559e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055a0:	e02e      	b.n	8005600 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	2200      	movs	r2, #0
 80055aa:	2180      	movs	r1, #128	@ 0x80
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 f848 	bl	8005642 <UART_WaitOnFlagUntilTimeout>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d005      	beq.n	80055c4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e03a      	b.n	800563a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10b      	bne.n	80055e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	461a      	mov	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	3302      	adds	r3, #2
 80055de:	61bb      	str	r3, [r7, #24]
 80055e0:	e007      	b.n	80055f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	781a      	ldrb	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	3301      	adds	r3, #1
 80055f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1cb      	bne.n	80055a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	2200      	movs	r2, #0
 8005612:	2140      	movs	r1, #64	@ 0x40
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 f814 	bl	8005642 <UART_WaitOnFlagUntilTimeout>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d005      	beq.n	800562c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2220      	movs	r2, #32
 8005624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e006      	b.n	800563a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2220      	movs	r2, #32
 8005630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005634:	2300      	movs	r3, #0
 8005636:	e000      	b.n	800563a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005638:	2302      	movs	r3, #2
  }
}
 800563a:	4618      	mov	r0, r3
 800563c:	3720      	adds	r7, #32
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b086      	sub	sp, #24
 8005646:	af00      	add	r7, sp, #0
 8005648:	60f8      	str	r0, [r7, #12]
 800564a:	60b9      	str	r1, [r7, #8]
 800564c:	603b      	str	r3, [r7, #0]
 800564e:	4613      	mov	r3, r2
 8005650:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005652:	e03b      	b.n	80056cc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565a:	d037      	beq.n	80056cc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800565c:	f7fe fd3c 	bl	80040d8 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	6a3a      	ldr	r2, [r7, #32]
 8005668:	429a      	cmp	r2, r3
 800566a:	d302      	bcc.n	8005672 <UART_WaitOnFlagUntilTimeout+0x30>
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e03a      	b.n	80056ec <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b00      	cmp	r3, #0
 8005682:	d023      	beq.n	80056cc <UART_WaitOnFlagUntilTimeout+0x8a>
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2b80      	cmp	r3, #128	@ 0x80
 8005688:	d020      	beq.n	80056cc <UART_WaitOnFlagUntilTimeout+0x8a>
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2b40      	cmp	r3, #64	@ 0x40
 800568e:	d01d      	beq.n	80056cc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	2b08      	cmp	r3, #8
 800569c:	d116      	bne.n	80056cc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800569e:	2300      	movs	r3, #0
 80056a0:	617b      	str	r3, [r7, #20]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	617b      	str	r3, [r7, #20]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 f81d 	bl	80056f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2208      	movs	r2, #8
 80056be:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e00f      	b.n	80056ec <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	4013      	ands	r3, r2
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	429a      	cmp	r2, r3
 80056da:	bf0c      	ite	eq
 80056dc:	2301      	moveq	r3, #1
 80056de:	2300      	movne	r3, #0
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	461a      	mov	r2, r3
 80056e4:	79fb      	ldrb	r3, [r7, #7]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d0b4      	beq.n	8005654 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b095      	sub	sp, #84	@ 0x54
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	330c      	adds	r3, #12
 8005702:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005706:	e853 3f00 	ldrex	r3, [r3]
 800570a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800570c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005712:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	330c      	adds	r3, #12
 800571a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800571c:	643a      	str	r2, [r7, #64]	@ 0x40
 800571e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005722:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005724:	e841 2300 	strex	r3, r2, [r1]
 8005728:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800572a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e5      	bne.n	80056fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3314      	adds	r3, #20
 8005736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	e853 3f00 	ldrex	r3, [r3]
 800573e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	f023 0301 	bic.w	r3, r3, #1
 8005746:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3314      	adds	r3, #20
 800574e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005750:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005752:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005754:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005756:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005758:	e841 2300 	strex	r3, r2, [r1]
 800575c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800575e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1e5      	bne.n	8005730 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005768:	2b01      	cmp	r3, #1
 800576a:	d119      	bne.n	80057a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	330c      	adds	r3, #12
 8005772:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	e853 3f00 	ldrex	r3, [r3]
 800577a:	60bb      	str	r3, [r7, #8]
   return(result);
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f023 0310 	bic.w	r3, r3, #16
 8005782:	647b      	str	r3, [r7, #68]	@ 0x44
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	330c      	adds	r3, #12
 800578a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800578c:	61ba      	str	r2, [r7, #24]
 800578e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005790:	6979      	ldr	r1, [r7, #20]
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	e841 2300 	strex	r3, r2, [r1]
 8005798:	613b      	str	r3, [r7, #16]
   return(result);
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1e5      	bne.n	800576c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80057ae:	bf00      	nop
 80057b0:	3754      	adds	r7, #84	@ 0x54
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
	...

080057bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057c0:	b0c0      	sub	sp, #256	@ 0x100
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80057d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d8:	68d9      	ldr	r1, [r3, #12]
 80057da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	ea40 0301 	orr.w	r3, r0, r1
 80057e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	431a      	orrs	r2, r3
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	431a      	orrs	r2, r3
 80057fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	4313      	orrs	r3, r2
 8005804:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005814:	f021 010c 	bic.w	r1, r1, #12
 8005818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005822:	430b      	orrs	r3, r1
 8005824:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005836:	6999      	ldr	r1, [r3, #24]
 8005838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	ea40 0301 	orr.w	r3, r0, r1
 8005842:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	4b8f      	ldr	r3, [pc, #572]	@ (8005a88 <UART_SetConfig+0x2cc>)
 800584c:	429a      	cmp	r2, r3
 800584e:	d005      	beq.n	800585c <UART_SetConfig+0xa0>
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	4b8d      	ldr	r3, [pc, #564]	@ (8005a8c <UART_SetConfig+0x2d0>)
 8005858:	429a      	cmp	r2, r3
 800585a:	d104      	bne.n	8005866 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800585c:	f7ff fb2e 	bl	8004ebc <HAL_RCC_GetPCLK2Freq>
 8005860:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005864:	e003      	b.n	800586e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005866:	f7ff fb15 	bl	8004e94 <HAL_RCC_GetPCLK1Freq>
 800586a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800586e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005872:	69db      	ldr	r3, [r3, #28]
 8005874:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005878:	f040 810c 	bne.w	8005a94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800587c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005880:	2200      	movs	r2, #0
 8005882:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005886:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800588a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800588e:	4622      	mov	r2, r4
 8005890:	462b      	mov	r3, r5
 8005892:	1891      	adds	r1, r2, r2
 8005894:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005896:	415b      	adcs	r3, r3
 8005898:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800589a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800589e:	4621      	mov	r1, r4
 80058a0:	eb12 0801 	adds.w	r8, r2, r1
 80058a4:	4629      	mov	r1, r5
 80058a6:	eb43 0901 	adc.w	r9, r3, r1
 80058aa:	f04f 0200 	mov.w	r2, #0
 80058ae:	f04f 0300 	mov.w	r3, #0
 80058b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058be:	4690      	mov	r8, r2
 80058c0:	4699      	mov	r9, r3
 80058c2:	4623      	mov	r3, r4
 80058c4:	eb18 0303 	adds.w	r3, r8, r3
 80058c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058cc:	462b      	mov	r3, r5
 80058ce:	eb49 0303 	adc.w	r3, r9, r3
 80058d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80058d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80058e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80058e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80058ea:	460b      	mov	r3, r1
 80058ec:	18db      	adds	r3, r3, r3
 80058ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80058f0:	4613      	mov	r3, r2
 80058f2:	eb42 0303 	adc.w	r3, r2, r3
 80058f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80058f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80058fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005900:	f7fa fcb6 	bl	8000270 <__aeabi_uldivmod>
 8005904:	4602      	mov	r2, r0
 8005906:	460b      	mov	r3, r1
 8005908:	4b61      	ldr	r3, [pc, #388]	@ (8005a90 <UART_SetConfig+0x2d4>)
 800590a:	fba3 2302 	umull	r2, r3, r3, r2
 800590e:	095b      	lsrs	r3, r3, #5
 8005910:	011c      	lsls	r4, r3, #4
 8005912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005916:	2200      	movs	r2, #0
 8005918:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800591c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005920:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005924:	4642      	mov	r2, r8
 8005926:	464b      	mov	r3, r9
 8005928:	1891      	adds	r1, r2, r2
 800592a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800592c:	415b      	adcs	r3, r3
 800592e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005930:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005934:	4641      	mov	r1, r8
 8005936:	eb12 0a01 	adds.w	sl, r2, r1
 800593a:	4649      	mov	r1, r9
 800593c:	eb43 0b01 	adc.w	fp, r3, r1
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	f04f 0300 	mov.w	r3, #0
 8005948:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800594c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005950:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005954:	4692      	mov	sl, r2
 8005956:	469b      	mov	fp, r3
 8005958:	4643      	mov	r3, r8
 800595a:	eb1a 0303 	adds.w	r3, sl, r3
 800595e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005962:	464b      	mov	r3, r9
 8005964:	eb4b 0303 	adc.w	r3, fp, r3
 8005968:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800596c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005978:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800597c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005980:	460b      	mov	r3, r1
 8005982:	18db      	adds	r3, r3, r3
 8005984:	643b      	str	r3, [r7, #64]	@ 0x40
 8005986:	4613      	mov	r3, r2
 8005988:	eb42 0303 	adc.w	r3, r2, r3
 800598c:	647b      	str	r3, [r7, #68]	@ 0x44
 800598e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005992:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005996:	f7fa fc6b 	bl	8000270 <__aeabi_uldivmod>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4611      	mov	r1, r2
 80059a0:	4b3b      	ldr	r3, [pc, #236]	@ (8005a90 <UART_SetConfig+0x2d4>)
 80059a2:	fba3 2301 	umull	r2, r3, r3, r1
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	2264      	movs	r2, #100	@ 0x64
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	1acb      	subs	r3, r1, r3
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80059b6:	4b36      	ldr	r3, [pc, #216]	@ (8005a90 <UART_SetConfig+0x2d4>)
 80059b8:	fba3 2302 	umull	r2, r3, r3, r2
 80059bc:	095b      	lsrs	r3, r3, #5
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80059c4:	441c      	add	r4, r3
 80059c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ca:	2200      	movs	r2, #0
 80059cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80059d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80059d8:	4642      	mov	r2, r8
 80059da:	464b      	mov	r3, r9
 80059dc:	1891      	adds	r1, r2, r2
 80059de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80059e0:	415b      	adcs	r3, r3
 80059e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80059e8:	4641      	mov	r1, r8
 80059ea:	1851      	adds	r1, r2, r1
 80059ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80059ee:	4649      	mov	r1, r9
 80059f0:	414b      	adcs	r3, r1
 80059f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	f04f 0300 	mov.w	r3, #0
 80059fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005a00:	4659      	mov	r1, fp
 8005a02:	00cb      	lsls	r3, r1, #3
 8005a04:	4651      	mov	r1, sl
 8005a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a0a:	4651      	mov	r1, sl
 8005a0c:	00ca      	lsls	r2, r1, #3
 8005a0e:	4610      	mov	r0, r2
 8005a10:	4619      	mov	r1, r3
 8005a12:	4603      	mov	r3, r0
 8005a14:	4642      	mov	r2, r8
 8005a16:	189b      	adds	r3, r3, r2
 8005a18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a1c:	464b      	mov	r3, r9
 8005a1e:	460a      	mov	r2, r1
 8005a20:	eb42 0303 	adc.w	r3, r2, r3
 8005a24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005a34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005a38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	18db      	adds	r3, r3, r3
 8005a40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a42:	4613      	mov	r3, r2
 8005a44:	eb42 0303 	adc.w	r3, r2, r3
 8005a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005a52:	f7fa fc0d 	bl	8000270 <__aeabi_uldivmod>
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a90 <UART_SetConfig+0x2d4>)
 8005a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a60:	095b      	lsrs	r3, r3, #5
 8005a62:	2164      	movs	r1, #100	@ 0x64
 8005a64:	fb01 f303 	mul.w	r3, r1, r3
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	3332      	adds	r3, #50	@ 0x32
 8005a6e:	4a08      	ldr	r2, [pc, #32]	@ (8005a90 <UART_SetConfig+0x2d4>)
 8005a70:	fba2 2303 	umull	r2, r3, r2, r3
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	f003 0207 	and.w	r2, r3, #7
 8005a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4422      	add	r2, r4
 8005a82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a84:	e106      	b.n	8005c94 <UART_SetConfig+0x4d8>
 8005a86:	bf00      	nop
 8005a88:	40011000 	.word	0x40011000
 8005a8c:	40011400 	.word	0x40011400
 8005a90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005aa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005aa6:	4642      	mov	r2, r8
 8005aa8:	464b      	mov	r3, r9
 8005aaa:	1891      	adds	r1, r2, r2
 8005aac:	6239      	str	r1, [r7, #32]
 8005aae:	415b      	adcs	r3, r3
 8005ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ab2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ab6:	4641      	mov	r1, r8
 8005ab8:	1854      	adds	r4, r2, r1
 8005aba:	4649      	mov	r1, r9
 8005abc:	eb43 0501 	adc.w	r5, r3, r1
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	00eb      	lsls	r3, r5, #3
 8005aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ace:	00e2      	lsls	r2, r4, #3
 8005ad0:	4614      	mov	r4, r2
 8005ad2:	461d      	mov	r5, r3
 8005ad4:	4643      	mov	r3, r8
 8005ad6:	18e3      	adds	r3, r4, r3
 8005ad8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005adc:	464b      	mov	r3, r9
 8005ade:	eb45 0303 	adc.w	r3, r5, r3
 8005ae2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005af2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005af6:	f04f 0200 	mov.w	r2, #0
 8005afa:	f04f 0300 	mov.w	r3, #0
 8005afe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b02:	4629      	mov	r1, r5
 8005b04:	008b      	lsls	r3, r1, #2
 8005b06:	4621      	mov	r1, r4
 8005b08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b0c:	4621      	mov	r1, r4
 8005b0e:	008a      	lsls	r2, r1, #2
 8005b10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005b14:	f7fa fbac 	bl	8000270 <__aeabi_uldivmod>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4b60      	ldr	r3, [pc, #384]	@ (8005ca0 <UART_SetConfig+0x4e4>)
 8005b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	011c      	lsls	r4, r3, #4
 8005b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005b34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005b38:	4642      	mov	r2, r8
 8005b3a:	464b      	mov	r3, r9
 8005b3c:	1891      	adds	r1, r2, r2
 8005b3e:	61b9      	str	r1, [r7, #24]
 8005b40:	415b      	adcs	r3, r3
 8005b42:	61fb      	str	r3, [r7, #28]
 8005b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b48:	4641      	mov	r1, r8
 8005b4a:	1851      	adds	r1, r2, r1
 8005b4c:	6139      	str	r1, [r7, #16]
 8005b4e:	4649      	mov	r1, r9
 8005b50:	414b      	adcs	r3, r1
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	f04f 0200 	mov.w	r2, #0
 8005b58:	f04f 0300 	mov.w	r3, #0
 8005b5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b60:	4659      	mov	r1, fp
 8005b62:	00cb      	lsls	r3, r1, #3
 8005b64:	4651      	mov	r1, sl
 8005b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b6a:	4651      	mov	r1, sl
 8005b6c:	00ca      	lsls	r2, r1, #3
 8005b6e:	4610      	mov	r0, r2
 8005b70:	4619      	mov	r1, r3
 8005b72:	4603      	mov	r3, r0
 8005b74:	4642      	mov	r2, r8
 8005b76:	189b      	adds	r3, r3, r2
 8005b78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b7c:	464b      	mov	r3, r9
 8005b7e:	460a      	mov	r2, r1
 8005b80:	eb42 0303 	adc.w	r3, r2, r3
 8005b84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005b94:	f04f 0200 	mov.w	r2, #0
 8005b98:	f04f 0300 	mov.w	r3, #0
 8005b9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ba0:	4649      	mov	r1, r9
 8005ba2:	008b      	lsls	r3, r1, #2
 8005ba4:	4641      	mov	r1, r8
 8005ba6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005baa:	4641      	mov	r1, r8
 8005bac:	008a      	lsls	r2, r1, #2
 8005bae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005bb2:	f7fa fb5d 	bl	8000270 <__aeabi_uldivmod>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4611      	mov	r1, r2
 8005bbc:	4b38      	ldr	r3, [pc, #224]	@ (8005ca0 <UART_SetConfig+0x4e4>)
 8005bbe:	fba3 2301 	umull	r2, r3, r3, r1
 8005bc2:	095b      	lsrs	r3, r3, #5
 8005bc4:	2264      	movs	r2, #100	@ 0x64
 8005bc6:	fb02 f303 	mul.w	r3, r2, r3
 8005bca:	1acb      	subs	r3, r1, r3
 8005bcc:	011b      	lsls	r3, r3, #4
 8005bce:	3332      	adds	r3, #50	@ 0x32
 8005bd0:	4a33      	ldr	r2, [pc, #204]	@ (8005ca0 <UART_SetConfig+0x4e4>)
 8005bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bdc:	441c      	add	r4, r3
 8005bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005be2:	2200      	movs	r2, #0
 8005be4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005be6:	677a      	str	r2, [r7, #116]	@ 0x74
 8005be8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005bec:	4642      	mov	r2, r8
 8005bee:	464b      	mov	r3, r9
 8005bf0:	1891      	adds	r1, r2, r2
 8005bf2:	60b9      	str	r1, [r7, #8]
 8005bf4:	415b      	adcs	r3, r3
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bfc:	4641      	mov	r1, r8
 8005bfe:	1851      	adds	r1, r2, r1
 8005c00:	6039      	str	r1, [r7, #0]
 8005c02:	4649      	mov	r1, r9
 8005c04:	414b      	adcs	r3, r1
 8005c06:	607b      	str	r3, [r7, #4]
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c14:	4659      	mov	r1, fp
 8005c16:	00cb      	lsls	r3, r1, #3
 8005c18:	4651      	mov	r1, sl
 8005c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c1e:	4651      	mov	r1, sl
 8005c20:	00ca      	lsls	r2, r1, #3
 8005c22:	4610      	mov	r0, r2
 8005c24:	4619      	mov	r1, r3
 8005c26:	4603      	mov	r3, r0
 8005c28:	4642      	mov	r2, r8
 8005c2a:	189b      	adds	r3, r3, r2
 8005c2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c2e:	464b      	mov	r3, r9
 8005c30:	460a      	mov	r2, r1
 8005c32:	eb42 0303 	adc.w	r3, r2, r3
 8005c36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c42:	667a      	str	r2, [r7, #100]	@ 0x64
 8005c44:	f04f 0200 	mov.w	r2, #0
 8005c48:	f04f 0300 	mov.w	r3, #0
 8005c4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005c50:	4649      	mov	r1, r9
 8005c52:	008b      	lsls	r3, r1, #2
 8005c54:	4641      	mov	r1, r8
 8005c56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c5a:	4641      	mov	r1, r8
 8005c5c:	008a      	lsls	r2, r1, #2
 8005c5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005c62:	f7fa fb05 	bl	8000270 <__aeabi_uldivmod>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca0 <UART_SetConfig+0x4e4>)
 8005c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c70:	095b      	lsrs	r3, r3, #5
 8005c72:	2164      	movs	r1, #100	@ 0x64
 8005c74:	fb01 f303 	mul.w	r3, r1, r3
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	3332      	adds	r3, #50	@ 0x32
 8005c7e:	4a08      	ldr	r2, [pc, #32]	@ (8005ca0 <UART_SetConfig+0x4e4>)
 8005c80:	fba2 2303 	umull	r2, r3, r2, r3
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	f003 020f 	and.w	r2, r3, #15
 8005c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4422      	add	r2, r4
 8005c92:	609a      	str	r2, [r3, #8]
}
 8005c94:	bf00      	nop
 8005c96:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ca0:	51eb851f 	.word	0x51eb851f

08005ca4 <std>:
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	b510      	push	{r4, lr}
 8005ca8:	4604      	mov	r4, r0
 8005caa:	e9c0 3300 	strd	r3, r3, [r0]
 8005cae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cb2:	6083      	str	r3, [r0, #8]
 8005cb4:	8181      	strh	r1, [r0, #12]
 8005cb6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005cb8:	81c2      	strh	r2, [r0, #14]
 8005cba:	6183      	str	r3, [r0, #24]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	2208      	movs	r2, #8
 8005cc0:	305c      	adds	r0, #92	@ 0x5c
 8005cc2:	f000 f9f9 	bl	80060b8 <memset>
 8005cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005cfc <std+0x58>)
 8005cc8:	6263      	str	r3, [r4, #36]	@ 0x24
 8005cca:	4b0d      	ldr	r3, [pc, #52]	@ (8005d00 <std+0x5c>)
 8005ccc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005cce:	4b0d      	ldr	r3, [pc, #52]	@ (8005d04 <std+0x60>)
 8005cd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005d08 <std+0x64>)
 8005cd4:	6323      	str	r3, [r4, #48]	@ 0x30
 8005cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8005d0c <std+0x68>)
 8005cd8:	6224      	str	r4, [r4, #32]
 8005cda:	429c      	cmp	r4, r3
 8005cdc:	d006      	beq.n	8005cec <std+0x48>
 8005cde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ce2:	4294      	cmp	r4, r2
 8005ce4:	d002      	beq.n	8005cec <std+0x48>
 8005ce6:	33d0      	adds	r3, #208	@ 0xd0
 8005ce8:	429c      	cmp	r4, r3
 8005cea:	d105      	bne.n	8005cf8 <std+0x54>
 8005cec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cf4:	f000 ba58 	b.w	80061a8 <__retarget_lock_init_recursive>
 8005cf8:	bd10      	pop	{r4, pc}
 8005cfa:	bf00      	nop
 8005cfc:	08005f09 	.word	0x08005f09
 8005d00:	08005f2b 	.word	0x08005f2b
 8005d04:	08005f63 	.word	0x08005f63
 8005d08:	08005f87 	.word	0x08005f87
 8005d0c:	20000164 	.word	0x20000164

08005d10 <stdio_exit_handler>:
 8005d10:	4a02      	ldr	r2, [pc, #8]	@ (8005d1c <stdio_exit_handler+0xc>)
 8005d12:	4903      	ldr	r1, [pc, #12]	@ (8005d20 <stdio_exit_handler+0x10>)
 8005d14:	4803      	ldr	r0, [pc, #12]	@ (8005d24 <stdio_exit_handler+0x14>)
 8005d16:	f000 b869 	b.w	8005dec <_fwalk_sglue>
 8005d1a:	bf00      	nop
 8005d1c:	2000000c 	.word	0x2000000c
 8005d20:	08006a65 	.word	0x08006a65
 8005d24:	2000001c 	.word	0x2000001c

08005d28 <cleanup_stdio>:
 8005d28:	6841      	ldr	r1, [r0, #4]
 8005d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d5c <cleanup_stdio+0x34>)
 8005d2c:	4299      	cmp	r1, r3
 8005d2e:	b510      	push	{r4, lr}
 8005d30:	4604      	mov	r4, r0
 8005d32:	d001      	beq.n	8005d38 <cleanup_stdio+0x10>
 8005d34:	f000 fe96 	bl	8006a64 <_fflush_r>
 8005d38:	68a1      	ldr	r1, [r4, #8]
 8005d3a:	4b09      	ldr	r3, [pc, #36]	@ (8005d60 <cleanup_stdio+0x38>)
 8005d3c:	4299      	cmp	r1, r3
 8005d3e:	d002      	beq.n	8005d46 <cleanup_stdio+0x1e>
 8005d40:	4620      	mov	r0, r4
 8005d42:	f000 fe8f 	bl	8006a64 <_fflush_r>
 8005d46:	68e1      	ldr	r1, [r4, #12]
 8005d48:	4b06      	ldr	r3, [pc, #24]	@ (8005d64 <cleanup_stdio+0x3c>)
 8005d4a:	4299      	cmp	r1, r3
 8005d4c:	d004      	beq.n	8005d58 <cleanup_stdio+0x30>
 8005d4e:	4620      	mov	r0, r4
 8005d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d54:	f000 be86 	b.w	8006a64 <_fflush_r>
 8005d58:	bd10      	pop	{r4, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20000164 	.word	0x20000164
 8005d60:	200001cc 	.word	0x200001cc
 8005d64:	20000234 	.word	0x20000234

08005d68 <global_stdio_init.part.0>:
 8005d68:	b510      	push	{r4, lr}
 8005d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d98 <global_stdio_init.part.0+0x30>)
 8005d6c:	4c0b      	ldr	r4, [pc, #44]	@ (8005d9c <global_stdio_init.part.0+0x34>)
 8005d6e:	4a0c      	ldr	r2, [pc, #48]	@ (8005da0 <global_stdio_init.part.0+0x38>)
 8005d70:	601a      	str	r2, [r3, #0]
 8005d72:	4620      	mov	r0, r4
 8005d74:	2200      	movs	r2, #0
 8005d76:	2104      	movs	r1, #4
 8005d78:	f7ff ff94 	bl	8005ca4 <std>
 8005d7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005d80:	2201      	movs	r2, #1
 8005d82:	2109      	movs	r1, #9
 8005d84:	f7ff ff8e 	bl	8005ca4 <std>
 8005d88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d8c:	2202      	movs	r2, #2
 8005d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d92:	2112      	movs	r1, #18
 8005d94:	f7ff bf86 	b.w	8005ca4 <std>
 8005d98:	2000029c 	.word	0x2000029c
 8005d9c:	20000164 	.word	0x20000164
 8005da0:	08005d11 	.word	0x08005d11

08005da4 <__sfp_lock_acquire>:
 8005da4:	4801      	ldr	r0, [pc, #4]	@ (8005dac <__sfp_lock_acquire+0x8>)
 8005da6:	f000 ba00 	b.w	80061aa <__retarget_lock_acquire_recursive>
 8005daa:	bf00      	nop
 8005dac:	200002a5 	.word	0x200002a5

08005db0 <__sfp_lock_release>:
 8005db0:	4801      	ldr	r0, [pc, #4]	@ (8005db8 <__sfp_lock_release+0x8>)
 8005db2:	f000 b9fb 	b.w	80061ac <__retarget_lock_release_recursive>
 8005db6:	bf00      	nop
 8005db8:	200002a5 	.word	0x200002a5

08005dbc <__sinit>:
 8005dbc:	b510      	push	{r4, lr}
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	f7ff fff0 	bl	8005da4 <__sfp_lock_acquire>
 8005dc4:	6a23      	ldr	r3, [r4, #32]
 8005dc6:	b11b      	cbz	r3, 8005dd0 <__sinit+0x14>
 8005dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dcc:	f7ff bff0 	b.w	8005db0 <__sfp_lock_release>
 8005dd0:	4b04      	ldr	r3, [pc, #16]	@ (8005de4 <__sinit+0x28>)
 8005dd2:	6223      	str	r3, [r4, #32]
 8005dd4:	4b04      	ldr	r3, [pc, #16]	@ (8005de8 <__sinit+0x2c>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1f5      	bne.n	8005dc8 <__sinit+0xc>
 8005ddc:	f7ff ffc4 	bl	8005d68 <global_stdio_init.part.0>
 8005de0:	e7f2      	b.n	8005dc8 <__sinit+0xc>
 8005de2:	bf00      	nop
 8005de4:	08005d29 	.word	0x08005d29
 8005de8:	2000029c 	.word	0x2000029c

08005dec <_fwalk_sglue>:
 8005dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005df0:	4607      	mov	r7, r0
 8005df2:	4688      	mov	r8, r1
 8005df4:	4614      	mov	r4, r2
 8005df6:	2600      	movs	r6, #0
 8005df8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005dfc:	f1b9 0901 	subs.w	r9, r9, #1
 8005e00:	d505      	bpl.n	8005e0e <_fwalk_sglue+0x22>
 8005e02:	6824      	ldr	r4, [r4, #0]
 8005e04:	2c00      	cmp	r4, #0
 8005e06:	d1f7      	bne.n	8005df8 <_fwalk_sglue+0xc>
 8005e08:	4630      	mov	r0, r6
 8005e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e0e:	89ab      	ldrh	r3, [r5, #12]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d907      	bls.n	8005e24 <_fwalk_sglue+0x38>
 8005e14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	d003      	beq.n	8005e24 <_fwalk_sglue+0x38>
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	4638      	mov	r0, r7
 8005e20:	47c0      	blx	r8
 8005e22:	4306      	orrs	r6, r0
 8005e24:	3568      	adds	r5, #104	@ 0x68
 8005e26:	e7e9      	b.n	8005dfc <_fwalk_sglue+0x10>

08005e28 <iprintf>:
 8005e28:	b40f      	push	{r0, r1, r2, r3}
 8005e2a:	b507      	push	{r0, r1, r2, lr}
 8005e2c:	4906      	ldr	r1, [pc, #24]	@ (8005e48 <iprintf+0x20>)
 8005e2e:	ab04      	add	r3, sp, #16
 8005e30:	6808      	ldr	r0, [r1, #0]
 8005e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e36:	6881      	ldr	r1, [r0, #8]
 8005e38:	9301      	str	r3, [sp, #4]
 8005e3a:	f000 fae9 	bl	8006410 <_vfiprintf_r>
 8005e3e:	b003      	add	sp, #12
 8005e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e44:	b004      	add	sp, #16
 8005e46:	4770      	bx	lr
 8005e48:	20000018 	.word	0x20000018

08005e4c <_puts_r>:
 8005e4c:	6a03      	ldr	r3, [r0, #32]
 8005e4e:	b570      	push	{r4, r5, r6, lr}
 8005e50:	6884      	ldr	r4, [r0, #8]
 8005e52:	4605      	mov	r5, r0
 8005e54:	460e      	mov	r6, r1
 8005e56:	b90b      	cbnz	r3, 8005e5c <_puts_r+0x10>
 8005e58:	f7ff ffb0 	bl	8005dbc <__sinit>
 8005e5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e5e:	07db      	lsls	r3, r3, #31
 8005e60:	d405      	bmi.n	8005e6e <_puts_r+0x22>
 8005e62:	89a3      	ldrh	r3, [r4, #12]
 8005e64:	0598      	lsls	r0, r3, #22
 8005e66:	d402      	bmi.n	8005e6e <_puts_r+0x22>
 8005e68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e6a:	f000 f99e 	bl	80061aa <__retarget_lock_acquire_recursive>
 8005e6e:	89a3      	ldrh	r3, [r4, #12]
 8005e70:	0719      	lsls	r1, r3, #28
 8005e72:	d502      	bpl.n	8005e7a <_puts_r+0x2e>
 8005e74:	6923      	ldr	r3, [r4, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d135      	bne.n	8005ee6 <_puts_r+0x9a>
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	f000 f8c5 	bl	800600c <__swsetup_r>
 8005e82:	b380      	cbz	r0, 8005ee6 <_puts_r+0x9a>
 8005e84:	f04f 35ff 	mov.w	r5, #4294967295
 8005e88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e8a:	07da      	lsls	r2, r3, #31
 8005e8c:	d405      	bmi.n	8005e9a <_puts_r+0x4e>
 8005e8e:	89a3      	ldrh	r3, [r4, #12]
 8005e90:	059b      	lsls	r3, r3, #22
 8005e92:	d402      	bmi.n	8005e9a <_puts_r+0x4e>
 8005e94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e96:	f000 f989 	bl	80061ac <__retarget_lock_release_recursive>
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	bd70      	pop	{r4, r5, r6, pc}
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	da04      	bge.n	8005eac <_puts_r+0x60>
 8005ea2:	69a2      	ldr	r2, [r4, #24]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	dc17      	bgt.n	8005ed8 <_puts_r+0x8c>
 8005ea8:	290a      	cmp	r1, #10
 8005eaa:	d015      	beq.n	8005ed8 <_puts_r+0x8c>
 8005eac:	6823      	ldr	r3, [r4, #0]
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	6022      	str	r2, [r4, #0]
 8005eb2:	7019      	strb	r1, [r3, #0]
 8005eb4:	68a3      	ldr	r3, [r4, #8]
 8005eb6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	60a3      	str	r3, [r4, #8]
 8005ebe:	2900      	cmp	r1, #0
 8005ec0:	d1ed      	bne.n	8005e9e <_puts_r+0x52>
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	da11      	bge.n	8005eea <_puts_r+0x9e>
 8005ec6:	4622      	mov	r2, r4
 8005ec8:	210a      	movs	r1, #10
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f000 f85f 	bl	8005f8e <__swbuf_r>
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	d0d7      	beq.n	8005e84 <_puts_r+0x38>
 8005ed4:	250a      	movs	r5, #10
 8005ed6:	e7d7      	b.n	8005e88 <_puts_r+0x3c>
 8005ed8:	4622      	mov	r2, r4
 8005eda:	4628      	mov	r0, r5
 8005edc:	f000 f857 	bl	8005f8e <__swbuf_r>
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	d1e7      	bne.n	8005eb4 <_puts_r+0x68>
 8005ee4:	e7ce      	b.n	8005e84 <_puts_r+0x38>
 8005ee6:	3e01      	subs	r6, #1
 8005ee8:	e7e4      	b.n	8005eb4 <_puts_r+0x68>
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	6022      	str	r2, [r4, #0]
 8005ef0:	220a      	movs	r2, #10
 8005ef2:	701a      	strb	r2, [r3, #0]
 8005ef4:	e7ee      	b.n	8005ed4 <_puts_r+0x88>
	...

08005ef8 <puts>:
 8005ef8:	4b02      	ldr	r3, [pc, #8]	@ (8005f04 <puts+0xc>)
 8005efa:	4601      	mov	r1, r0
 8005efc:	6818      	ldr	r0, [r3, #0]
 8005efe:	f7ff bfa5 	b.w	8005e4c <_puts_r>
 8005f02:	bf00      	nop
 8005f04:	20000018 	.word	0x20000018

08005f08 <__sread>:
 8005f08:	b510      	push	{r4, lr}
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f10:	f000 f8fc 	bl	800610c <_read_r>
 8005f14:	2800      	cmp	r0, #0
 8005f16:	bfab      	itete	ge
 8005f18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f1a:	89a3      	ldrhlt	r3, [r4, #12]
 8005f1c:	181b      	addge	r3, r3, r0
 8005f1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f22:	bfac      	ite	ge
 8005f24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f26:	81a3      	strhlt	r3, [r4, #12]
 8005f28:	bd10      	pop	{r4, pc}

08005f2a <__swrite>:
 8005f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f2e:	461f      	mov	r7, r3
 8005f30:	898b      	ldrh	r3, [r1, #12]
 8005f32:	05db      	lsls	r3, r3, #23
 8005f34:	4605      	mov	r5, r0
 8005f36:	460c      	mov	r4, r1
 8005f38:	4616      	mov	r6, r2
 8005f3a:	d505      	bpl.n	8005f48 <__swrite+0x1e>
 8005f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f40:	2302      	movs	r3, #2
 8005f42:	2200      	movs	r2, #0
 8005f44:	f000 f8d0 	bl	80060e8 <_lseek_r>
 8005f48:	89a3      	ldrh	r3, [r4, #12]
 8005f4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f52:	81a3      	strh	r3, [r4, #12]
 8005f54:	4632      	mov	r2, r6
 8005f56:	463b      	mov	r3, r7
 8005f58:	4628      	mov	r0, r5
 8005f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f5e:	f000 b8e7 	b.w	8006130 <_write_r>

08005f62 <__sseek>:
 8005f62:	b510      	push	{r4, lr}
 8005f64:	460c      	mov	r4, r1
 8005f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f6a:	f000 f8bd 	bl	80060e8 <_lseek_r>
 8005f6e:	1c43      	adds	r3, r0, #1
 8005f70:	89a3      	ldrh	r3, [r4, #12]
 8005f72:	bf15      	itete	ne
 8005f74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f7e:	81a3      	strheq	r3, [r4, #12]
 8005f80:	bf18      	it	ne
 8005f82:	81a3      	strhne	r3, [r4, #12]
 8005f84:	bd10      	pop	{r4, pc}

08005f86 <__sclose>:
 8005f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f8a:	f000 b89d 	b.w	80060c8 <_close_r>

08005f8e <__swbuf_r>:
 8005f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f90:	460e      	mov	r6, r1
 8005f92:	4614      	mov	r4, r2
 8005f94:	4605      	mov	r5, r0
 8005f96:	b118      	cbz	r0, 8005fa0 <__swbuf_r+0x12>
 8005f98:	6a03      	ldr	r3, [r0, #32]
 8005f9a:	b90b      	cbnz	r3, 8005fa0 <__swbuf_r+0x12>
 8005f9c:	f7ff ff0e 	bl	8005dbc <__sinit>
 8005fa0:	69a3      	ldr	r3, [r4, #24]
 8005fa2:	60a3      	str	r3, [r4, #8]
 8005fa4:	89a3      	ldrh	r3, [r4, #12]
 8005fa6:	071a      	lsls	r2, r3, #28
 8005fa8:	d501      	bpl.n	8005fae <__swbuf_r+0x20>
 8005faa:	6923      	ldr	r3, [r4, #16]
 8005fac:	b943      	cbnz	r3, 8005fc0 <__swbuf_r+0x32>
 8005fae:	4621      	mov	r1, r4
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	f000 f82b 	bl	800600c <__swsetup_r>
 8005fb6:	b118      	cbz	r0, 8005fc0 <__swbuf_r+0x32>
 8005fb8:	f04f 37ff 	mov.w	r7, #4294967295
 8005fbc:	4638      	mov	r0, r7
 8005fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	6922      	ldr	r2, [r4, #16]
 8005fc4:	1a98      	subs	r0, r3, r2
 8005fc6:	6963      	ldr	r3, [r4, #20]
 8005fc8:	b2f6      	uxtb	r6, r6
 8005fca:	4283      	cmp	r3, r0
 8005fcc:	4637      	mov	r7, r6
 8005fce:	dc05      	bgt.n	8005fdc <__swbuf_r+0x4e>
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	f000 fd46 	bl	8006a64 <_fflush_r>
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	d1ed      	bne.n	8005fb8 <__swbuf_r+0x2a>
 8005fdc:	68a3      	ldr	r3, [r4, #8]
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	60a3      	str	r3, [r4, #8]
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	1c5a      	adds	r2, r3, #1
 8005fe6:	6022      	str	r2, [r4, #0]
 8005fe8:	701e      	strb	r6, [r3, #0]
 8005fea:	6962      	ldr	r2, [r4, #20]
 8005fec:	1c43      	adds	r3, r0, #1
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d004      	beq.n	8005ffc <__swbuf_r+0x6e>
 8005ff2:	89a3      	ldrh	r3, [r4, #12]
 8005ff4:	07db      	lsls	r3, r3, #31
 8005ff6:	d5e1      	bpl.n	8005fbc <__swbuf_r+0x2e>
 8005ff8:	2e0a      	cmp	r6, #10
 8005ffa:	d1df      	bne.n	8005fbc <__swbuf_r+0x2e>
 8005ffc:	4621      	mov	r1, r4
 8005ffe:	4628      	mov	r0, r5
 8006000:	f000 fd30 	bl	8006a64 <_fflush_r>
 8006004:	2800      	cmp	r0, #0
 8006006:	d0d9      	beq.n	8005fbc <__swbuf_r+0x2e>
 8006008:	e7d6      	b.n	8005fb8 <__swbuf_r+0x2a>
	...

0800600c <__swsetup_r>:
 800600c:	b538      	push	{r3, r4, r5, lr}
 800600e:	4b29      	ldr	r3, [pc, #164]	@ (80060b4 <__swsetup_r+0xa8>)
 8006010:	4605      	mov	r5, r0
 8006012:	6818      	ldr	r0, [r3, #0]
 8006014:	460c      	mov	r4, r1
 8006016:	b118      	cbz	r0, 8006020 <__swsetup_r+0x14>
 8006018:	6a03      	ldr	r3, [r0, #32]
 800601a:	b90b      	cbnz	r3, 8006020 <__swsetup_r+0x14>
 800601c:	f7ff fece 	bl	8005dbc <__sinit>
 8006020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006024:	0719      	lsls	r1, r3, #28
 8006026:	d422      	bmi.n	800606e <__swsetup_r+0x62>
 8006028:	06da      	lsls	r2, r3, #27
 800602a:	d407      	bmi.n	800603c <__swsetup_r+0x30>
 800602c:	2209      	movs	r2, #9
 800602e:	602a      	str	r2, [r5, #0]
 8006030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006034:	81a3      	strh	r3, [r4, #12]
 8006036:	f04f 30ff 	mov.w	r0, #4294967295
 800603a:	e033      	b.n	80060a4 <__swsetup_r+0x98>
 800603c:	0758      	lsls	r0, r3, #29
 800603e:	d512      	bpl.n	8006066 <__swsetup_r+0x5a>
 8006040:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006042:	b141      	cbz	r1, 8006056 <__swsetup_r+0x4a>
 8006044:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006048:	4299      	cmp	r1, r3
 800604a:	d002      	beq.n	8006052 <__swsetup_r+0x46>
 800604c:	4628      	mov	r0, r5
 800604e:	f000 f8bd 	bl	80061cc <_free_r>
 8006052:	2300      	movs	r3, #0
 8006054:	6363      	str	r3, [r4, #52]	@ 0x34
 8006056:	89a3      	ldrh	r3, [r4, #12]
 8006058:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800605c:	81a3      	strh	r3, [r4, #12]
 800605e:	2300      	movs	r3, #0
 8006060:	6063      	str	r3, [r4, #4]
 8006062:	6923      	ldr	r3, [r4, #16]
 8006064:	6023      	str	r3, [r4, #0]
 8006066:	89a3      	ldrh	r3, [r4, #12]
 8006068:	f043 0308 	orr.w	r3, r3, #8
 800606c:	81a3      	strh	r3, [r4, #12]
 800606e:	6923      	ldr	r3, [r4, #16]
 8006070:	b94b      	cbnz	r3, 8006086 <__swsetup_r+0x7a>
 8006072:	89a3      	ldrh	r3, [r4, #12]
 8006074:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800607c:	d003      	beq.n	8006086 <__swsetup_r+0x7a>
 800607e:	4621      	mov	r1, r4
 8006080:	4628      	mov	r0, r5
 8006082:	f000 fd3d 	bl	8006b00 <__smakebuf_r>
 8006086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800608a:	f013 0201 	ands.w	r2, r3, #1
 800608e:	d00a      	beq.n	80060a6 <__swsetup_r+0x9a>
 8006090:	2200      	movs	r2, #0
 8006092:	60a2      	str	r2, [r4, #8]
 8006094:	6962      	ldr	r2, [r4, #20]
 8006096:	4252      	negs	r2, r2
 8006098:	61a2      	str	r2, [r4, #24]
 800609a:	6922      	ldr	r2, [r4, #16]
 800609c:	b942      	cbnz	r2, 80060b0 <__swsetup_r+0xa4>
 800609e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80060a2:	d1c5      	bne.n	8006030 <__swsetup_r+0x24>
 80060a4:	bd38      	pop	{r3, r4, r5, pc}
 80060a6:	0799      	lsls	r1, r3, #30
 80060a8:	bf58      	it	pl
 80060aa:	6962      	ldrpl	r2, [r4, #20]
 80060ac:	60a2      	str	r2, [r4, #8]
 80060ae:	e7f4      	b.n	800609a <__swsetup_r+0x8e>
 80060b0:	2000      	movs	r0, #0
 80060b2:	e7f7      	b.n	80060a4 <__swsetup_r+0x98>
 80060b4:	20000018 	.word	0x20000018

080060b8 <memset>:
 80060b8:	4402      	add	r2, r0
 80060ba:	4603      	mov	r3, r0
 80060bc:	4293      	cmp	r3, r2
 80060be:	d100      	bne.n	80060c2 <memset+0xa>
 80060c0:	4770      	bx	lr
 80060c2:	f803 1b01 	strb.w	r1, [r3], #1
 80060c6:	e7f9      	b.n	80060bc <memset+0x4>

080060c8 <_close_r>:
 80060c8:	b538      	push	{r3, r4, r5, lr}
 80060ca:	4d06      	ldr	r5, [pc, #24]	@ (80060e4 <_close_r+0x1c>)
 80060cc:	2300      	movs	r3, #0
 80060ce:	4604      	mov	r4, r0
 80060d0:	4608      	mov	r0, r1
 80060d2:	602b      	str	r3, [r5, #0]
 80060d4:	f7fd ff23 	bl	8003f1e <_close>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d102      	bne.n	80060e2 <_close_r+0x1a>
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	b103      	cbz	r3, 80060e2 <_close_r+0x1a>
 80060e0:	6023      	str	r3, [r4, #0]
 80060e2:	bd38      	pop	{r3, r4, r5, pc}
 80060e4:	200002a0 	.word	0x200002a0

080060e8 <_lseek_r>:
 80060e8:	b538      	push	{r3, r4, r5, lr}
 80060ea:	4d07      	ldr	r5, [pc, #28]	@ (8006108 <_lseek_r+0x20>)
 80060ec:	4604      	mov	r4, r0
 80060ee:	4608      	mov	r0, r1
 80060f0:	4611      	mov	r1, r2
 80060f2:	2200      	movs	r2, #0
 80060f4:	602a      	str	r2, [r5, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	f7fd ff38 	bl	8003f6c <_lseek>
 80060fc:	1c43      	adds	r3, r0, #1
 80060fe:	d102      	bne.n	8006106 <_lseek_r+0x1e>
 8006100:	682b      	ldr	r3, [r5, #0]
 8006102:	b103      	cbz	r3, 8006106 <_lseek_r+0x1e>
 8006104:	6023      	str	r3, [r4, #0]
 8006106:	bd38      	pop	{r3, r4, r5, pc}
 8006108:	200002a0 	.word	0x200002a0

0800610c <_read_r>:
 800610c:	b538      	push	{r3, r4, r5, lr}
 800610e:	4d07      	ldr	r5, [pc, #28]	@ (800612c <_read_r+0x20>)
 8006110:	4604      	mov	r4, r0
 8006112:	4608      	mov	r0, r1
 8006114:	4611      	mov	r1, r2
 8006116:	2200      	movs	r2, #0
 8006118:	602a      	str	r2, [r5, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	f7fd fec6 	bl	8003eac <_read>
 8006120:	1c43      	adds	r3, r0, #1
 8006122:	d102      	bne.n	800612a <_read_r+0x1e>
 8006124:	682b      	ldr	r3, [r5, #0]
 8006126:	b103      	cbz	r3, 800612a <_read_r+0x1e>
 8006128:	6023      	str	r3, [r4, #0]
 800612a:	bd38      	pop	{r3, r4, r5, pc}
 800612c:	200002a0 	.word	0x200002a0

08006130 <_write_r>:
 8006130:	b538      	push	{r3, r4, r5, lr}
 8006132:	4d07      	ldr	r5, [pc, #28]	@ (8006150 <_write_r+0x20>)
 8006134:	4604      	mov	r4, r0
 8006136:	4608      	mov	r0, r1
 8006138:	4611      	mov	r1, r2
 800613a:	2200      	movs	r2, #0
 800613c:	602a      	str	r2, [r5, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	f7fd fed1 	bl	8003ee6 <_write>
 8006144:	1c43      	adds	r3, r0, #1
 8006146:	d102      	bne.n	800614e <_write_r+0x1e>
 8006148:	682b      	ldr	r3, [r5, #0]
 800614a:	b103      	cbz	r3, 800614e <_write_r+0x1e>
 800614c:	6023      	str	r3, [r4, #0]
 800614e:	bd38      	pop	{r3, r4, r5, pc}
 8006150:	200002a0 	.word	0x200002a0

08006154 <__errno>:
 8006154:	4b01      	ldr	r3, [pc, #4]	@ (800615c <__errno+0x8>)
 8006156:	6818      	ldr	r0, [r3, #0]
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	20000018 	.word	0x20000018

08006160 <__libc_init_array>:
 8006160:	b570      	push	{r4, r5, r6, lr}
 8006162:	4d0d      	ldr	r5, [pc, #52]	@ (8006198 <__libc_init_array+0x38>)
 8006164:	4c0d      	ldr	r4, [pc, #52]	@ (800619c <__libc_init_array+0x3c>)
 8006166:	1b64      	subs	r4, r4, r5
 8006168:	10a4      	asrs	r4, r4, #2
 800616a:	2600      	movs	r6, #0
 800616c:	42a6      	cmp	r6, r4
 800616e:	d109      	bne.n	8006184 <__libc_init_array+0x24>
 8006170:	4d0b      	ldr	r5, [pc, #44]	@ (80061a0 <__libc_init_array+0x40>)
 8006172:	4c0c      	ldr	r4, [pc, #48]	@ (80061a4 <__libc_init_array+0x44>)
 8006174:	f000 fd32 	bl	8006bdc <_init>
 8006178:	1b64      	subs	r4, r4, r5
 800617a:	10a4      	asrs	r4, r4, #2
 800617c:	2600      	movs	r6, #0
 800617e:	42a6      	cmp	r6, r4
 8006180:	d105      	bne.n	800618e <__libc_init_array+0x2e>
 8006182:	bd70      	pop	{r4, r5, r6, pc}
 8006184:	f855 3b04 	ldr.w	r3, [r5], #4
 8006188:	4798      	blx	r3
 800618a:	3601      	adds	r6, #1
 800618c:	e7ee      	b.n	800616c <__libc_init_array+0xc>
 800618e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006192:	4798      	blx	r3
 8006194:	3601      	adds	r6, #1
 8006196:	e7f2      	b.n	800617e <__libc_init_array+0x1e>
 8006198:	08006f94 	.word	0x08006f94
 800619c:	08006f94 	.word	0x08006f94
 80061a0:	08006f94 	.word	0x08006f94
 80061a4:	08006f98 	.word	0x08006f98

080061a8 <__retarget_lock_init_recursive>:
 80061a8:	4770      	bx	lr

080061aa <__retarget_lock_acquire_recursive>:
 80061aa:	4770      	bx	lr

080061ac <__retarget_lock_release_recursive>:
 80061ac:	4770      	bx	lr

080061ae <memcpy>:
 80061ae:	440a      	add	r2, r1
 80061b0:	4291      	cmp	r1, r2
 80061b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80061b6:	d100      	bne.n	80061ba <memcpy+0xc>
 80061b8:	4770      	bx	lr
 80061ba:	b510      	push	{r4, lr}
 80061bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061c4:	4291      	cmp	r1, r2
 80061c6:	d1f9      	bne.n	80061bc <memcpy+0xe>
 80061c8:	bd10      	pop	{r4, pc}
	...

080061cc <_free_r>:
 80061cc:	b538      	push	{r3, r4, r5, lr}
 80061ce:	4605      	mov	r5, r0
 80061d0:	2900      	cmp	r1, #0
 80061d2:	d041      	beq.n	8006258 <_free_r+0x8c>
 80061d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061d8:	1f0c      	subs	r4, r1, #4
 80061da:	2b00      	cmp	r3, #0
 80061dc:	bfb8      	it	lt
 80061de:	18e4      	addlt	r4, r4, r3
 80061e0:	f000 f8e0 	bl	80063a4 <__malloc_lock>
 80061e4:	4a1d      	ldr	r2, [pc, #116]	@ (800625c <_free_r+0x90>)
 80061e6:	6813      	ldr	r3, [r2, #0]
 80061e8:	b933      	cbnz	r3, 80061f8 <_free_r+0x2c>
 80061ea:	6063      	str	r3, [r4, #4]
 80061ec:	6014      	str	r4, [r2, #0]
 80061ee:	4628      	mov	r0, r5
 80061f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061f4:	f000 b8dc 	b.w	80063b0 <__malloc_unlock>
 80061f8:	42a3      	cmp	r3, r4
 80061fa:	d908      	bls.n	800620e <_free_r+0x42>
 80061fc:	6820      	ldr	r0, [r4, #0]
 80061fe:	1821      	adds	r1, r4, r0
 8006200:	428b      	cmp	r3, r1
 8006202:	bf01      	itttt	eq
 8006204:	6819      	ldreq	r1, [r3, #0]
 8006206:	685b      	ldreq	r3, [r3, #4]
 8006208:	1809      	addeq	r1, r1, r0
 800620a:	6021      	streq	r1, [r4, #0]
 800620c:	e7ed      	b.n	80061ea <_free_r+0x1e>
 800620e:	461a      	mov	r2, r3
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	b10b      	cbz	r3, 8006218 <_free_r+0x4c>
 8006214:	42a3      	cmp	r3, r4
 8006216:	d9fa      	bls.n	800620e <_free_r+0x42>
 8006218:	6811      	ldr	r1, [r2, #0]
 800621a:	1850      	adds	r0, r2, r1
 800621c:	42a0      	cmp	r0, r4
 800621e:	d10b      	bne.n	8006238 <_free_r+0x6c>
 8006220:	6820      	ldr	r0, [r4, #0]
 8006222:	4401      	add	r1, r0
 8006224:	1850      	adds	r0, r2, r1
 8006226:	4283      	cmp	r3, r0
 8006228:	6011      	str	r1, [r2, #0]
 800622a:	d1e0      	bne.n	80061ee <_free_r+0x22>
 800622c:	6818      	ldr	r0, [r3, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	6053      	str	r3, [r2, #4]
 8006232:	4408      	add	r0, r1
 8006234:	6010      	str	r0, [r2, #0]
 8006236:	e7da      	b.n	80061ee <_free_r+0x22>
 8006238:	d902      	bls.n	8006240 <_free_r+0x74>
 800623a:	230c      	movs	r3, #12
 800623c:	602b      	str	r3, [r5, #0]
 800623e:	e7d6      	b.n	80061ee <_free_r+0x22>
 8006240:	6820      	ldr	r0, [r4, #0]
 8006242:	1821      	adds	r1, r4, r0
 8006244:	428b      	cmp	r3, r1
 8006246:	bf04      	itt	eq
 8006248:	6819      	ldreq	r1, [r3, #0]
 800624a:	685b      	ldreq	r3, [r3, #4]
 800624c:	6063      	str	r3, [r4, #4]
 800624e:	bf04      	itt	eq
 8006250:	1809      	addeq	r1, r1, r0
 8006252:	6021      	streq	r1, [r4, #0]
 8006254:	6054      	str	r4, [r2, #4]
 8006256:	e7ca      	b.n	80061ee <_free_r+0x22>
 8006258:	bd38      	pop	{r3, r4, r5, pc}
 800625a:	bf00      	nop
 800625c:	200002ac 	.word	0x200002ac

08006260 <sbrk_aligned>:
 8006260:	b570      	push	{r4, r5, r6, lr}
 8006262:	4e0f      	ldr	r6, [pc, #60]	@ (80062a0 <sbrk_aligned+0x40>)
 8006264:	460c      	mov	r4, r1
 8006266:	6831      	ldr	r1, [r6, #0]
 8006268:	4605      	mov	r5, r0
 800626a:	b911      	cbnz	r1, 8006272 <sbrk_aligned+0x12>
 800626c:	f000 fca6 	bl	8006bbc <_sbrk_r>
 8006270:	6030      	str	r0, [r6, #0]
 8006272:	4621      	mov	r1, r4
 8006274:	4628      	mov	r0, r5
 8006276:	f000 fca1 	bl	8006bbc <_sbrk_r>
 800627a:	1c43      	adds	r3, r0, #1
 800627c:	d103      	bne.n	8006286 <sbrk_aligned+0x26>
 800627e:	f04f 34ff 	mov.w	r4, #4294967295
 8006282:	4620      	mov	r0, r4
 8006284:	bd70      	pop	{r4, r5, r6, pc}
 8006286:	1cc4      	adds	r4, r0, #3
 8006288:	f024 0403 	bic.w	r4, r4, #3
 800628c:	42a0      	cmp	r0, r4
 800628e:	d0f8      	beq.n	8006282 <sbrk_aligned+0x22>
 8006290:	1a21      	subs	r1, r4, r0
 8006292:	4628      	mov	r0, r5
 8006294:	f000 fc92 	bl	8006bbc <_sbrk_r>
 8006298:	3001      	adds	r0, #1
 800629a:	d1f2      	bne.n	8006282 <sbrk_aligned+0x22>
 800629c:	e7ef      	b.n	800627e <sbrk_aligned+0x1e>
 800629e:	bf00      	nop
 80062a0:	200002a8 	.word	0x200002a8

080062a4 <_malloc_r>:
 80062a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062a8:	1ccd      	adds	r5, r1, #3
 80062aa:	f025 0503 	bic.w	r5, r5, #3
 80062ae:	3508      	adds	r5, #8
 80062b0:	2d0c      	cmp	r5, #12
 80062b2:	bf38      	it	cc
 80062b4:	250c      	movcc	r5, #12
 80062b6:	2d00      	cmp	r5, #0
 80062b8:	4606      	mov	r6, r0
 80062ba:	db01      	blt.n	80062c0 <_malloc_r+0x1c>
 80062bc:	42a9      	cmp	r1, r5
 80062be:	d904      	bls.n	80062ca <_malloc_r+0x26>
 80062c0:	230c      	movs	r3, #12
 80062c2:	6033      	str	r3, [r6, #0]
 80062c4:	2000      	movs	r0, #0
 80062c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063a0 <_malloc_r+0xfc>
 80062ce:	f000 f869 	bl	80063a4 <__malloc_lock>
 80062d2:	f8d8 3000 	ldr.w	r3, [r8]
 80062d6:	461c      	mov	r4, r3
 80062d8:	bb44      	cbnz	r4, 800632c <_malloc_r+0x88>
 80062da:	4629      	mov	r1, r5
 80062dc:	4630      	mov	r0, r6
 80062de:	f7ff ffbf 	bl	8006260 <sbrk_aligned>
 80062e2:	1c43      	adds	r3, r0, #1
 80062e4:	4604      	mov	r4, r0
 80062e6:	d158      	bne.n	800639a <_malloc_r+0xf6>
 80062e8:	f8d8 4000 	ldr.w	r4, [r8]
 80062ec:	4627      	mov	r7, r4
 80062ee:	2f00      	cmp	r7, #0
 80062f0:	d143      	bne.n	800637a <_malloc_r+0xd6>
 80062f2:	2c00      	cmp	r4, #0
 80062f4:	d04b      	beq.n	800638e <_malloc_r+0xea>
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	4639      	mov	r1, r7
 80062fa:	4630      	mov	r0, r6
 80062fc:	eb04 0903 	add.w	r9, r4, r3
 8006300:	f000 fc5c 	bl	8006bbc <_sbrk_r>
 8006304:	4581      	cmp	r9, r0
 8006306:	d142      	bne.n	800638e <_malloc_r+0xea>
 8006308:	6821      	ldr	r1, [r4, #0]
 800630a:	1a6d      	subs	r5, r5, r1
 800630c:	4629      	mov	r1, r5
 800630e:	4630      	mov	r0, r6
 8006310:	f7ff ffa6 	bl	8006260 <sbrk_aligned>
 8006314:	3001      	adds	r0, #1
 8006316:	d03a      	beq.n	800638e <_malloc_r+0xea>
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	442b      	add	r3, r5
 800631c:	6023      	str	r3, [r4, #0]
 800631e:	f8d8 3000 	ldr.w	r3, [r8]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	bb62      	cbnz	r2, 8006380 <_malloc_r+0xdc>
 8006326:	f8c8 7000 	str.w	r7, [r8]
 800632a:	e00f      	b.n	800634c <_malloc_r+0xa8>
 800632c:	6822      	ldr	r2, [r4, #0]
 800632e:	1b52      	subs	r2, r2, r5
 8006330:	d420      	bmi.n	8006374 <_malloc_r+0xd0>
 8006332:	2a0b      	cmp	r2, #11
 8006334:	d917      	bls.n	8006366 <_malloc_r+0xc2>
 8006336:	1961      	adds	r1, r4, r5
 8006338:	42a3      	cmp	r3, r4
 800633a:	6025      	str	r5, [r4, #0]
 800633c:	bf18      	it	ne
 800633e:	6059      	strne	r1, [r3, #4]
 8006340:	6863      	ldr	r3, [r4, #4]
 8006342:	bf08      	it	eq
 8006344:	f8c8 1000 	streq.w	r1, [r8]
 8006348:	5162      	str	r2, [r4, r5]
 800634a:	604b      	str	r3, [r1, #4]
 800634c:	4630      	mov	r0, r6
 800634e:	f000 f82f 	bl	80063b0 <__malloc_unlock>
 8006352:	f104 000b 	add.w	r0, r4, #11
 8006356:	1d23      	adds	r3, r4, #4
 8006358:	f020 0007 	bic.w	r0, r0, #7
 800635c:	1ac2      	subs	r2, r0, r3
 800635e:	bf1c      	itt	ne
 8006360:	1a1b      	subne	r3, r3, r0
 8006362:	50a3      	strne	r3, [r4, r2]
 8006364:	e7af      	b.n	80062c6 <_malloc_r+0x22>
 8006366:	6862      	ldr	r2, [r4, #4]
 8006368:	42a3      	cmp	r3, r4
 800636a:	bf0c      	ite	eq
 800636c:	f8c8 2000 	streq.w	r2, [r8]
 8006370:	605a      	strne	r2, [r3, #4]
 8006372:	e7eb      	b.n	800634c <_malloc_r+0xa8>
 8006374:	4623      	mov	r3, r4
 8006376:	6864      	ldr	r4, [r4, #4]
 8006378:	e7ae      	b.n	80062d8 <_malloc_r+0x34>
 800637a:	463c      	mov	r4, r7
 800637c:	687f      	ldr	r7, [r7, #4]
 800637e:	e7b6      	b.n	80062ee <_malloc_r+0x4a>
 8006380:	461a      	mov	r2, r3
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	42a3      	cmp	r3, r4
 8006386:	d1fb      	bne.n	8006380 <_malloc_r+0xdc>
 8006388:	2300      	movs	r3, #0
 800638a:	6053      	str	r3, [r2, #4]
 800638c:	e7de      	b.n	800634c <_malloc_r+0xa8>
 800638e:	230c      	movs	r3, #12
 8006390:	6033      	str	r3, [r6, #0]
 8006392:	4630      	mov	r0, r6
 8006394:	f000 f80c 	bl	80063b0 <__malloc_unlock>
 8006398:	e794      	b.n	80062c4 <_malloc_r+0x20>
 800639a:	6005      	str	r5, [r0, #0]
 800639c:	e7d6      	b.n	800634c <_malloc_r+0xa8>
 800639e:	bf00      	nop
 80063a0:	200002ac 	.word	0x200002ac

080063a4 <__malloc_lock>:
 80063a4:	4801      	ldr	r0, [pc, #4]	@ (80063ac <__malloc_lock+0x8>)
 80063a6:	f7ff bf00 	b.w	80061aa <__retarget_lock_acquire_recursive>
 80063aa:	bf00      	nop
 80063ac:	200002a4 	.word	0x200002a4

080063b0 <__malloc_unlock>:
 80063b0:	4801      	ldr	r0, [pc, #4]	@ (80063b8 <__malloc_unlock+0x8>)
 80063b2:	f7ff befb 	b.w	80061ac <__retarget_lock_release_recursive>
 80063b6:	bf00      	nop
 80063b8:	200002a4 	.word	0x200002a4

080063bc <__sfputc_r>:
 80063bc:	6893      	ldr	r3, [r2, #8]
 80063be:	3b01      	subs	r3, #1
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	b410      	push	{r4}
 80063c4:	6093      	str	r3, [r2, #8]
 80063c6:	da08      	bge.n	80063da <__sfputc_r+0x1e>
 80063c8:	6994      	ldr	r4, [r2, #24]
 80063ca:	42a3      	cmp	r3, r4
 80063cc:	db01      	blt.n	80063d2 <__sfputc_r+0x16>
 80063ce:	290a      	cmp	r1, #10
 80063d0:	d103      	bne.n	80063da <__sfputc_r+0x1e>
 80063d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063d6:	f7ff bdda 	b.w	8005f8e <__swbuf_r>
 80063da:	6813      	ldr	r3, [r2, #0]
 80063dc:	1c58      	adds	r0, r3, #1
 80063de:	6010      	str	r0, [r2, #0]
 80063e0:	7019      	strb	r1, [r3, #0]
 80063e2:	4608      	mov	r0, r1
 80063e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <__sfputs_r>:
 80063ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ec:	4606      	mov	r6, r0
 80063ee:	460f      	mov	r7, r1
 80063f0:	4614      	mov	r4, r2
 80063f2:	18d5      	adds	r5, r2, r3
 80063f4:	42ac      	cmp	r4, r5
 80063f6:	d101      	bne.n	80063fc <__sfputs_r+0x12>
 80063f8:	2000      	movs	r0, #0
 80063fa:	e007      	b.n	800640c <__sfputs_r+0x22>
 80063fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006400:	463a      	mov	r2, r7
 8006402:	4630      	mov	r0, r6
 8006404:	f7ff ffda 	bl	80063bc <__sfputc_r>
 8006408:	1c43      	adds	r3, r0, #1
 800640a:	d1f3      	bne.n	80063f4 <__sfputs_r+0xa>
 800640c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006410 <_vfiprintf_r>:
 8006410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006414:	460d      	mov	r5, r1
 8006416:	b09d      	sub	sp, #116	@ 0x74
 8006418:	4614      	mov	r4, r2
 800641a:	4698      	mov	r8, r3
 800641c:	4606      	mov	r6, r0
 800641e:	b118      	cbz	r0, 8006428 <_vfiprintf_r+0x18>
 8006420:	6a03      	ldr	r3, [r0, #32]
 8006422:	b90b      	cbnz	r3, 8006428 <_vfiprintf_r+0x18>
 8006424:	f7ff fcca 	bl	8005dbc <__sinit>
 8006428:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800642a:	07d9      	lsls	r1, r3, #31
 800642c:	d405      	bmi.n	800643a <_vfiprintf_r+0x2a>
 800642e:	89ab      	ldrh	r3, [r5, #12]
 8006430:	059a      	lsls	r2, r3, #22
 8006432:	d402      	bmi.n	800643a <_vfiprintf_r+0x2a>
 8006434:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006436:	f7ff feb8 	bl	80061aa <__retarget_lock_acquire_recursive>
 800643a:	89ab      	ldrh	r3, [r5, #12]
 800643c:	071b      	lsls	r3, r3, #28
 800643e:	d501      	bpl.n	8006444 <_vfiprintf_r+0x34>
 8006440:	692b      	ldr	r3, [r5, #16]
 8006442:	b99b      	cbnz	r3, 800646c <_vfiprintf_r+0x5c>
 8006444:	4629      	mov	r1, r5
 8006446:	4630      	mov	r0, r6
 8006448:	f7ff fde0 	bl	800600c <__swsetup_r>
 800644c:	b170      	cbz	r0, 800646c <_vfiprintf_r+0x5c>
 800644e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006450:	07dc      	lsls	r4, r3, #31
 8006452:	d504      	bpl.n	800645e <_vfiprintf_r+0x4e>
 8006454:	f04f 30ff 	mov.w	r0, #4294967295
 8006458:	b01d      	add	sp, #116	@ 0x74
 800645a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800645e:	89ab      	ldrh	r3, [r5, #12]
 8006460:	0598      	lsls	r0, r3, #22
 8006462:	d4f7      	bmi.n	8006454 <_vfiprintf_r+0x44>
 8006464:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006466:	f7ff fea1 	bl	80061ac <__retarget_lock_release_recursive>
 800646a:	e7f3      	b.n	8006454 <_vfiprintf_r+0x44>
 800646c:	2300      	movs	r3, #0
 800646e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006470:	2320      	movs	r3, #32
 8006472:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006476:	f8cd 800c 	str.w	r8, [sp, #12]
 800647a:	2330      	movs	r3, #48	@ 0x30
 800647c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800662c <_vfiprintf_r+0x21c>
 8006480:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006484:	f04f 0901 	mov.w	r9, #1
 8006488:	4623      	mov	r3, r4
 800648a:	469a      	mov	sl, r3
 800648c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006490:	b10a      	cbz	r2, 8006496 <_vfiprintf_r+0x86>
 8006492:	2a25      	cmp	r2, #37	@ 0x25
 8006494:	d1f9      	bne.n	800648a <_vfiprintf_r+0x7a>
 8006496:	ebba 0b04 	subs.w	fp, sl, r4
 800649a:	d00b      	beq.n	80064b4 <_vfiprintf_r+0xa4>
 800649c:	465b      	mov	r3, fp
 800649e:	4622      	mov	r2, r4
 80064a0:	4629      	mov	r1, r5
 80064a2:	4630      	mov	r0, r6
 80064a4:	f7ff ffa1 	bl	80063ea <__sfputs_r>
 80064a8:	3001      	adds	r0, #1
 80064aa:	f000 80a7 	beq.w	80065fc <_vfiprintf_r+0x1ec>
 80064ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064b0:	445a      	add	r2, fp
 80064b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80064b4:	f89a 3000 	ldrb.w	r3, [sl]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 809f 	beq.w	80065fc <_vfiprintf_r+0x1ec>
 80064be:	2300      	movs	r3, #0
 80064c0:	f04f 32ff 	mov.w	r2, #4294967295
 80064c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064c8:	f10a 0a01 	add.w	sl, sl, #1
 80064cc:	9304      	str	r3, [sp, #16]
 80064ce:	9307      	str	r3, [sp, #28]
 80064d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80064d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80064d6:	4654      	mov	r4, sl
 80064d8:	2205      	movs	r2, #5
 80064da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064de:	4853      	ldr	r0, [pc, #332]	@ (800662c <_vfiprintf_r+0x21c>)
 80064e0:	f7f9 fe76 	bl	80001d0 <memchr>
 80064e4:	9a04      	ldr	r2, [sp, #16]
 80064e6:	b9d8      	cbnz	r0, 8006520 <_vfiprintf_r+0x110>
 80064e8:	06d1      	lsls	r1, r2, #27
 80064ea:	bf44      	itt	mi
 80064ec:	2320      	movmi	r3, #32
 80064ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064f2:	0713      	lsls	r3, r2, #28
 80064f4:	bf44      	itt	mi
 80064f6:	232b      	movmi	r3, #43	@ 0x2b
 80064f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006500:	2b2a      	cmp	r3, #42	@ 0x2a
 8006502:	d015      	beq.n	8006530 <_vfiprintf_r+0x120>
 8006504:	9a07      	ldr	r2, [sp, #28]
 8006506:	4654      	mov	r4, sl
 8006508:	2000      	movs	r0, #0
 800650a:	f04f 0c0a 	mov.w	ip, #10
 800650e:	4621      	mov	r1, r4
 8006510:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006514:	3b30      	subs	r3, #48	@ 0x30
 8006516:	2b09      	cmp	r3, #9
 8006518:	d94b      	bls.n	80065b2 <_vfiprintf_r+0x1a2>
 800651a:	b1b0      	cbz	r0, 800654a <_vfiprintf_r+0x13a>
 800651c:	9207      	str	r2, [sp, #28]
 800651e:	e014      	b.n	800654a <_vfiprintf_r+0x13a>
 8006520:	eba0 0308 	sub.w	r3, r0, r8
 8006524:	fa09 f303 	lsl.w	r3, r9, r3
 8006528:	4313      	orrs	r3, r2
 800652a:	9304      	str	r3, [sp, #16]
 800652c:	46a2      	mov	sl, r4
 800652e:	e7d2      	b.n	80064d6 <_vfiprintf_r+0xc6>
 8006530:	9b03      	ldr	r3, [sp, #12]
 8006532:	1d19      	adds	r1, r3, #4
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	9103      	str	r1, [sp, #12]
 8006538:	2b00      	cmp	r3, #0
 800653a:	bfbb      	ittet	lt
 800653c:	425b      	neglt	r3, r3
 800653e:	f042 0202 	orrlt.w	r2, r2, #2
 8006542:	9307      	strge	r3, [sp, #28]
 8006544:	9307      	strlt	r3, [sp, #28]
 8006546:	bfb8      	it	lt
 8006548:	9204      	strlt	r2, [sp, #16]
 800654a:	7823      	ldrb	r3, [r4, #0]
 800654c:	2b2e      	cmp	r3, #46	@ 0x2e
 800654e:	d10a      	bne.n	8006566 <_vfiprintf_r+0x156>
 8006550:	7863      	ldrb	r3, [r4, #1]
 8006552:	2b2a      	cmp	r3, #42	@ 0x2a
 8006554:	d132      	bne.n	80065bc <_vfiprintf_r+0x1ac>
 8006556:	9b03      	ldr	r3, [sp, #12]
 8006558:	1d1a      	adds	r2, r3, #4
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	9203      	str	r2, [sp, #12]
 800655e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006562:	3402      	adds	r4, #2
 8006564:	9305      	str	r3, [sp, #20]
 8006566:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800663c <_vfiprintf_r+0x22c>
 800656a:	7821      	ldrb	r1, [r4, #0]
 800656c:	2203      	movs	r2, #3
 800656e:	4650      	mov	r0, sl
 8006570:	f7f9 fe2e 	bl	80001d0 <memchr>
 8006574:	b138      	cbz	r0, 8006586 <_vfiprintf_r+0x176>
 8006576:	9b04      	ldr	r3, [sp, #16]
 8006578:	eba0 000a 	sub.w	r0, r0, sl
 800657c:	2240      	movs	r2, #64	@ 0x40
 800657e:	4082      	lsls	r2, r0
 8006580:	4313      	orrs	r3, r2
 8006582:	3401      	adds	r4, #1
 8006584:	9304      	str	r3, [sp, #16]
 8006586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800658a:	4829      	ldr	r0, [pc, #164]	@ (8006630 <_vfiprintf_r+0x220>)
 800658c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006590:	2206      	movs	r2, #6
 8006592:	f7f9 fe1d 	bl	80001d0 <memchr>
 8006596:	2800      	cmp	r0, #0
 8006598:	d03f      	beq.n	800661a <_vfiprintf_r+0x20a>
 800659a:	4b26      	ldr	r3, [pc, #152]	@ (8006634 <_vfiprintf_r+0x224>)
 800659c:	bb1b      	cbnz	r3, 80065e6 <_vfiprintf_r+0x1d6>
 800659e:	9b03      	ldr	r3, [sp, #12]
 80065a0:	3307      	adds	r3, #7
 80065a2:	f023 0307 	bic.w	r3, r3, #7
 80065a6:	3308      	adds	r3, #8
 80065a8:	9303      	str	r3, [sp, #12]
 80065aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065ac:	443b      	add	r3, r7
 80065ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80065b0:	e76a      	b.n	8006488 <_vfiprintf_r+0x78>
 80065b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80065b6:	460c      	mov	r4, r1
 80065b8:	2001      	movs	r0, #1
 80065ba:	e7a8      	b.n	800650e <_vfiprintf_r+0xfe>
 80065bc:	2300      	movs	r3, #0
 80065be:	3401      	adds	r4, #1
 80065c0:	9305      	str	r3, [sp, #20]
 80065c2:	4619      	mov	r1, r3
 80065c4:	f04f 0c0a 	mov.w	ip, #10
 80065c8:	4620      	mov	r0, r4
 80065ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065ce:	3a30      	subs	r2, #48	@ 0x30
 80065d0:	2a09      	cmp	r2, #9
 80065d2:	d903      	bls.n	80065dc <_vfiprintf_r+0x1cc>
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d0c6      	beq.n	8006566 <_vfiprintf_r+0x156>
 80065d8:	9105      	str	r1, [sp, #20]
 80065da:	e7c4      	b.n	8006566 <_vfiprintf_r+0x156>
 80065dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80065e0:	4604      	mov	r4, r0
 80065e2:	2301      	movs	r3, #1
 80065e4:	e7f0      	b.n	80065c8 <_vfiprintf_r+0x1b8>
 80065e6:	ab03      	add	r3, sp, #12
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	462a      	mov	r2, r5
 80065ec:	4b12      	ldr	r3, [pc, #72]	@ (8006638 <_vfiprintf_r+0x228>)
 80065ee:	a904      	add	r1, sp, #16
 80065f0:	4630      	mov	r0, r6
 80065f2:	f3af 8000 	nop.w
 80065f6:	4607      	mov	r7, r0
 80065f8:	1c78      	adds	r0, r7, #1
 80065fa:	d1d6      	bne.n	80065aa <_vfiprintf_r+0x19a>
 80065fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065fe:	07d9      	lsls	r1, r3, #31
 8006600:	d405      	bmi.n	800660e <_vfiprintf_r+0x1fe>
 8006602:	89ab      	ldrh	r3, [r5, #12]
 8006604:	059a      	lsls	r2, r3, #22
 8006606:	d402      	bmi.n	800660e <_vfiprintf_r+0x1fe>
 8006608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800660a:	f7ff fdcf 	bl	80061ac <__retarget_lock_release_recursive>
 800660e:	89ab      	ldrh	r3, [r5, #12]
 8006610:	065b      	lsls	r3, r3, #25
 8006612:	f53f af1f 	bmi.w	8006454 <_vfiprintf_r+0x44>
 8006616:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006618:	e71e      	b.n	8006458 <_vfiprintf_r+0x48>
 800661a:	ab03      	add	r3, sp, #12
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	462a      	mov	r2, r5
 8006620:	4b05      	ldr	r3, [pc, #20]	@ (8006638 <_vfiprintf_r+0x228>)
 8006622:	a904      	add	r1, sp, #16
 8006624:	4630      	mov	r0, r6
 8006626:	f000 f879 	bl	800671c <_printf_i>
 800662a:	e7e4      	b.n	80065f6 <_vfiprintf_r+0x1e6>
 800662c:	08006f58 	.word	0x08006f58
 8006630:	08006f62 	.word	0x08006f62
 8006634:	00000000 	.word	0x00000000
 8006638:	080063eb 	.word	0x080063eb
 800663c:	08006f5e 	.word	0x08006f5e

08006640 <_printf_common>:
 8006640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006644:	4616      	mov	r6, r2
 8006646:	4698      	mov	r8, r3
 8006648:	688a      	ldr	r2, [r1, #8]
 800664a:	690b      	ldr	r3, [r1, #16]
 800664c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006650:	4293      	cmp	r3, r2
 8006652:	bfb8      	it	lt
 8006654:	4613      	movlt	r3, r2
 8006656:	6033      	str	r3, [r6, #0]
 8006658:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800665c:	4607      	mov	r7, r0
 800665e:	460c      	mov	r4, r1
 8006660:	b10a      	cbz	r2, 8006666 <_printf_common+0x26>
 8006662:	3301      	adds	r3, #1
 8006664:	6033      	str	r3, [r6, #0]
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	0699      	lsls	r1, r3, #26
 800666a:	bf42      	ittt	mi
 800666c:	6833      	ldrmi	r3, [r6, #0]
 800666e:	3302      	addmi	r3, #2
 8006670:	6033      	strmi	r3, [r6, #0]
 8006672:	6825      	ldr	r5, [r4, #0]
 8006674:	f015 0506 	ands.w	r5, r5, #6
 8006678:	d106      	bne.n	8006688 <_printf_common+0x48>
 800667a:	f104 0a19 	add.w	sl, r4, #25
 800667e:	68e3      	ldr	r3, [r4, #12]
 8006680:	6832      	ldr	r2, [r6, #0]
 8006682:	1a9b      	subs	r3, r3, r2
 8006684:	42ab      	cmp	r3, r5
 8006686:	dc26      	bgt.n	80066d6 <_printf_common+0x96>
 8006688:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800668c:	6822      	ldr	r2, [r4, #0]
 800668e:	3b00      	subs	r3, #0
 8006690:	bf18      	it	ne
 8006692:	2301      	movne	r3, #1
 8006694:	0692      	lsls	r2, r2, #26
 8006696:	d42b      	bmi.n	80066f0 <_printf_common+0xb0>
 8006698:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800669c:	4641      	mov	r1, r8
 800669e:	4638      	mov	r0, r7
 80066a0:	47c8      	blx	r9
 80066a2:	3001      	adds	r0, #1
 80066a4:	d01e      	beq.n	80066e4 <_printf_common+0xa4>
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	6922      	ldr	r2, [r4, #16]
 80066aa:	f003 0306 	and.w	r3, r3, #6
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	bf02      	ittt	eq
 80066b2:	68e5      	ldreq	r5, [r4, #12]
 80066b4:	6833      	ldreq	r3, [r6, #0]
 80066b6:	1aed      	subeq	r5, r5, r3
 80066b8:	68a3      	ldr	r3, [r4, #8]
 80066ba:	bf0c      	ite	eq
 80066bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066c0:	2500      	movne	r5, #0
 80066c2:	4293      	cmp	r3, r2
 80066c4:	bfc4      	itt	gt
 80066c6:	1a9b      	subgt	r3, r3, r2
 80066c8:	18ed      	addgt	r5, r5, r3
 80066ca:	2600      	movs	r6, #0
 80066cc:	341a      	adds	r4, #26
 80066ce:	42b5      	cmp	r5, r6
 80066d0:	d11a      	bne.n	8006708 <_printf_common+0xc8>
 80066d2:	2000      	movs	r0, #0
 80066d4:	e008      	b.n	80066e8 <_printf_common+0xa8>
 80066d6:	2301      	movs	r3, #1
 80066d8:	4652      	mov	r2, sl
 80066da:	4641      	mov	r1, r8
 80066dc:	4638      	mov	r0, r7
 80066de:	47c8      	blx	r9
 80066e0:	3001      	adds	r0, #1
 80066e2:	d103      	bne.n	80066ec <_printf_common+0xac>
 80066e4:	f04f 30ff 	mov.w	r0, #4294967295
 80066e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ec:	3501      	adds	r5, #1
 80066ee:	e7c6      	b.n	800667e <_printf_common+0x3e>
 80066f0:	18e1      	adds	r1, r4, r3
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	2030      	movs	r0, #48	@ 0x30
 80066f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066fa:	4422      	add	r2, r4
 80066fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006700:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006704:	3302      	adds	r3, #2
 8006706:	e7c7      	b.n	8006698 <_printf_common+0x58>
 8006708:	2301      	movs	r3, #1
 800670a:	4622      	mov	r2, r4
 800670c:	4641      	mov	r1, r8
 800670e:	4638      	mov	r0, r7
 8006710:	47c8      	blx	r9
 8006712:	3001      	adds	r0, #1
 8006714:	d0e6      	beq.n	80066e4 <_printf_common+0xa4>
 8006716:	3601      	adds	r6, #1
 8006718:	e7d9      	b.n	80066ce <_printf_common+0x8e>
	...

0800671c <_printf_i>:
 800671c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006720:	7e0f      	ldrb	r7, [r1, #24]
 8006722:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006724:	2f78      	cmp	r7, #120	@ 0x78
 8006726:	4691      	mov	r9, r2
 8006728:	4680      	mov	r8, r0
 800672a:	460c      	mov	r4, r1
 800672c:	469a      	mov	sl, r3
 800672e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006732:	d807      	bhi.n	8006744 <_printf_i+0x28>
 8006734:	2f62      	cmp	r7, #98	@ 0x62
 8006736:	d80a      	bhi.n	800674e <_printf_i+0x32>
 8006738:	2f00      	cmp	r7, #0
 800673a:	f000 80d2 	beq.w	80068e2 <_printf_i+0x1c6>
 800673e:	2f58      	cmp	r7, #88	@ 0x58
 8006740:	f000 80b9 	beq.w	80068b6 <_printf_i+0x19a>
 8006744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006748:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800674c:	e03a      	b.n	80067c4 <_printf_i+0xa8>
 800674e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006752:	2b15      	cmp	r3, #21
 8006754:	d8f6      	bhi.n	8006744 <_printf_i+0x28>
 8006756:	a101      	add	r1, pc, #4	@ (adr r1, 800675c <_printf_i+0x40>)
 8006758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800675c:	080067b5 	.word	0x080067b5
 8006760:	080067c9 	.word	0x080067c9
 8006764:	08006745 	.word	0x08006745
 8006768:	08006745 	.word	0x08006745
 800676c:	08006745 	.word	0x08006745
 8006770:	08006745 	.word	0x08006745
 8006774:	080067c9 	.word	0x080067c9
 8006778:	08006745 	.word	0x08006745
 800677c:	08006745 	.word	0x08006745
 8006780:	08006745 	.word	0x08006745
 8006784:	08006745 	.word	0x08006745
 8006788:	080068c9 	.word	0x080068c9
 800678c:	080067f3 	.word	0x080067f3
 8006790:	08006883 	.word	0x08006883
 8006794:	08006745 	.word	0x08006745
 8006798:	08006745 	.word	0x08006745
 800679c:	080068eb 	.word	0x080068eb
 80067a0:	08006745 	.word	0x08006745
 80067a4:	080067f3 	.word	0x080067f3
 80067a8:	08006745 	.word	0x08006745
 80067ac:	08006745 	.word	0x08006745
 80067b0:	0800688b 	.word	0x0800688b
 80067b4:	6833      	ldr	r3, [r6, #0]
 80067b6:	1d1a      	adds	r2, r3, #4
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6032      	str	r2, [r6, #0]
 80067bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80067c4:	2301      	movs	r3, #1
 80067c6:	e09d      	b.n	8006904 <_printf_i+0x1e8>
 80067c8:	6833      	ldr	r3, [r6, #0]
 80067ca:	6820      	ldr	r0, [r4, #0]
 80067cc:	1d19      	adds	r1, r3, #4
 80067ce:	6031      	str	r1, [r6, #0]
 80067d0:	0606      	lsls	r6, r0, #24
 80067d2:	d501      	bpl.n	80067d8 <_printf_i+0xbc>
 80067d4:	681d      	ldr	r5, [r3, #0]
 80067d6:	e003      	b.n	80067e0 <_printf_i+0xc4>
 80067d8:	0645      	lsls	r5, r0, #25
 80067da:	d5fb      	bpl.n	80067d4 <_printf_i+0xb8>
 80067dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80067e0:	2d00      	cmp	r5, #0
 80067e2:	da03      	bge.n	80067ec <_printf_i+0xd0>
 80067e4:	232d      	movs	r3, #45	@ 0x2d
 80067e6:	426d      	negs	r5, r5
 80067e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067ec:	4859      	ldr	r0, [pc, #356]	@ (8006954 <_printf_i+0x238>)
 80067ee:	230a      	movs	r3, #10
 80067f0:	e011      	b.n	8006816 <_printf_i+0xfa>
 80067f2:	6821      	ldr	r1, [r4, #0]
 80067f4:	6833      	ldr	r3, [r6, #0]
 80067f6:	0608      	lsls	r0, r1, #24
 80067f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80067fc:	d402      	bmi.n	8006804 <_printf_i+0xe8>
 80067fe:	0649      	lsls	r1, r1, #25
 8006800:	bf48      	it	mi
 8006802:	b2ad      	uxthmi	r5, r5
 8006804:	2f6f      	cmp	r7, #111	@ 0x6f
 8006806:	4853      	ldr	r0, [pc, #332]	@ (8006954 <_printf_i+0x238>)
 8006808:	6033      	str	r3, [r6, #0]
 800680a:	bf14      	ite	ne
 800680c:	230a      	movne	r3, #10
 800680e:	2308      	moveq	r3, #8
 8006810:	2100      	movs	r1, #0
 8006812:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006816:	6866      	ldr	r6, [r4, #4]
 8006818:	60a6      	str	r6, [r4, #8]
 800681a:	2e00      	cmp	r6, #0
 800681c:	bfa2      	ittt	ge
 800681e:	6821      	ldrge	r1, [r4, #0]
 8006820:	f021 0104 	bicge.w	r1, r1, #4
 8006824:	6021      	strge	r1, [r4, #0]
 8006826:	b90d      	cbnz	r5, 800682c <_printf_i+0x110>
 8006828:	2e00      	cmp	r6, #0
 800682a:	d04b      	beq.n	80068c4 <_printf_i+0x1a8>
 800682c:	4616      	mov	r6, r2
 800682e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006832:	fb03 5711 	mls	r7, r3, r1, r5
 8006836:	5dc7      	ldrb	r7, [r0, r7]
 8006838:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800683c:	462f      	mov	r7, r5
 800683e:	42bb      	cmp	r3, r7
 8006840:	460d      	mov	r5, r1
 8006842:	d9f4      	bls.n	800682e <_printf_i+0x112>
 8006844:	2b08      	cmp	r3, #8
 8006846:	d10b      	bne.n	8006860 <_printf_i+0x144>
 8006848:	6823      	ldr	r3, [r4, #0]
 800684a:	07df      	lsls	r7, r3, #31
 800684c:	d508      	bpl.n	8006860 <_printf_i+0x144>
 800684e:	6923      	ldr	r3, [r4, #16]
 8006850:	6861      	ldr	r1, [r4, #4]
 8006852:	4299      	cmp	r1, r3
 8006854:	bfde      	ittt	le
 8006856:	2330      	movle	r3, #48	@ 0x30
 8006858:	f806 3c01 	strble.w	r3, [r6, #-1]
 800685c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006860:	1b92      	subs	r2, r2, r6
 8006862:	6122      	str	r2, [r4, #16]
 8006864:	f8cd a000 	str.w	sl, [sp]
 8006868:	464b      	mov	r3, r9
 800686a:	aa03      	add	r2, sp, #12
 800686c:	4621      	mov	r1, r4
 800686e:	4640      	mov	r0, r8
 8006870:	f7ff fee6 	bl	8006640 <_printf_common>
 8006874:	3001      	adds	r0, #1
 8006876:	d14a      	bne.n	800690e <_printf_i+0x1f2>
 8006878:	f04f 30ff 	mov.w	r0, #4294967295
 800687c:	b004      	add	sp, #16
 800687e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	f043 0320 	orr.w	r3, r3, #32
 8006888:	6023      	str	r3, [r4, #0]
 800688a:	4833      	ldr	r0, [pc, #204]	@ (8006958 <_printf_i+0x23c>)
 800688c:	2778      	movs	r7, #120	@ 0x78
 800688e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	6831      	ldr	r1, [r6, #0]
 8006896:	061f      	lsls	r7, r3, #24
 8006898:	f851 5b04 	ldr.w	r5, [r1], #4
 800689c:	d402      	bmi.n	80068a4 <_printf_i+0x188>
 800689e:	065f      	lsls	r7, r3, #25
 80068a0:	bf48      	it	mi
 80068a2:	b2ad      	uxthmi	r5, r5
 80068a4:	6031      	str	r1, [r6, #0]
 80068a6:	07d9      	lsls	r1, r3, #31
 80068a8:	bf44      	itt	mi
 80068aa:	f043 0320 	orrmi.w	r3, r3, #32
 80068ae:	6023      	strmi	r3, [r4, #0]
 80068b0:	b11d      	cbz	r5, 80068ba <_printf_i+0x19e>
 80068b2:	2310      	movs	r3, #16
 80068b4:	e7ac      	b.n	8006810 <_printf_i+0xf4>
 80068b6:	4827      	ldr	r0, [pc, #156]	@ (8006954 <_printf_i+0x238>)
 80068b8:	e7e9      	b.n	800688e <_printf_i+0x172>
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	f023 0320 	bic.w	r3, r3, #32
 80068c0:	6023      	str	r3, [r4, #0]
 80068c2:	e7f6      	b.n	80068b2 <_printf_i+0x196>
 80068c4:	4616      	mov	r6, r2
 80068c6:	e7bd      	b.n	8006844 <_printf_i+0x128>
 80068c8:	6833      	ldr	r3, [r6, #0]
 80068ca:	6825      	ldr	r5, [r4, #0]
 80068cc:	6961      	ldr	r1, [r4, #20]
 80068ce:	1d18      	adds	r0, r3, #4
 80068d0:	6030      	str	r0, [r6, #0]
 80068d2:	062e      	lsls	r6, r5, #24
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	d501      	bpl.n	80068dc <_printf_i+0x1c0>
 80068d8:	6019      	str	r1, [r3, #0]
 80068da:	e002      	b.n	80068e2 <_printf_i+0x1c6>
 80068dc:	0668      	lsls	r0, r5, #25
 80068de:	d5fb      	bpl.n	80068d8 <_printf_i+0x1bc>
 80068e0:	8019      	strh	r1, [r3, #0]
 80068e2:	2300      	movs	r3, #0
 80068e4:	6123      	str	r3, [r4, #16]
 80068e6:	4616      	mov	r6, r2
 80068e8:	e7bc      	b.n	8006864 <_printf_i+0x148>
 80068ea:	6833      	ldr	r3, [r6, #0]
 80068ec:	1d1a      	adds	r2, r3, #4
 80068ee:	6032      	str	r2, [r6, #0]
 80068f0:	681e      	ldr	r6, [r3, #0]
 80068f2:	6862      	ldr	r2, [r4, #4]
 80068f4:	2100      	movs	r1, #0
 80068f6:	4630      	mov	r0, r6
 80068f8:	f7f9 fc6a 	bl	80001d0 <memchr>
 80068fc:	b108      	cbz	r0, 8006902 <_printf_i+0x1e6>
 80068fe:	1b80      	subs	r0, r0, r6
 8006900:	6060      	str	r0, [r4, #4]
 8006902:	6863      	ldr	r3, [r4, #4]
 8006904:	6123      	str	r3, [r4, #16]
 8006906:	2300      	movs	r3, #0
 8006908:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800690c:	e7aa      	b.n	8006864 <_printf_i+0x148>
 800690e:	6923      	ldr	r3, [r4, #16]
 8006910:	4632      	mov	r2, r6
 8006912:	4649      	mov	r1, r9
 8006914:	4640      	mov	r0, r8
 8006916:	47d0      	blx	sl
 8006918:	3001      	adds	r0, #1
 800691a:	d0ad      	beq.n	8006878 <_printf_i+0x15c>
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	079b      	lsls	r3, r3, #30
 8006920:	d413      	bmi.n	800694a <_printf_i+0x22e>
 8006922:	68e0      	ldr	r0, [r4, #12]
 8006924:	9b03      	ldr	r3, [sp, #12]
 8006926:	4298      	cmp	r0, r3
 8006928:	bfb8      	it	lt
 800692a:	4618      	movlt	r0, r3
 800692c:	e7a6      	b.n	800687c <_printf_i+0x160>
 800692e:	2301      	movs	r3, #1
 8006930:	4632      	mov	r2, r6
 8006932:	4649      	mov	r1, r9
 8006934:	4640      	mov	r0, r8
 8006936:	47d0      	blx	sl
 8006938:	3001      	adds	r0, #1
 800693a:	d09d      	beq.n	8006878 <_printf_i+0x15c>
 800693c:	3501      	adds	r5, #1
 800693e:	68e3      	ldr	r3, [r4, #12]
 8006940:	9903      	ldr	r1, [sp, #12]
 8006942:	1a5b      	subs	r3, r3, r1
 8006944:	42ab      	cmp	r3, r5
 8006946:	dcf2      	bgt.n	800692e <_printf_i+0x212>
 8006948:	e7eb      	b.n	8006922 <_printf_i+0x206>
 800694a:	2500      	movs	r5, #0
 800694c:	f104 0619 	add.w	r6, r4, #25
 8006950:	e7f5      	b.n	800693e <_printf_i+0x222>
 8006952:	bf00      	nop
 8006954:	08006f69 	.word	0x08006f69
 8006958:	08006f7a 	.word	0x08006f7a

0800695c <__sflush_r>:
 800695c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006964:	0716      	lsls	r6, r2, #28
 8006966:	4605      	mov	r5, r0
 8006968:	460c      	mov	r4, r1
 800696a:	d454      	bmi.n	8006a16 <__sflush_r+0xba>
 800696c:	684b      	ldr	r3, [r1, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	dc02      	bgt.n	8006978 <__sflush_r+0x1c>
 8006972:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006974:	2b00      	cmp	r3, #0
 8006976:	dd48      	ble.n	8006a0a <__sflush_r+0xae>
 8006978:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800697a:	2e00      	cmp	r6, #0
 800697c:	d045      	beq.n	8006a0a <__sflush_r+0xae>
 800697e:	2300      	movs	r3, #0
 8006980:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006984:	682f      	ldr	r7, [r5, #0]
 8006986:	6a21      	ldr	r1, [r4, #32]
 8006988:	602b      	str	r3, [r5, #0]
 800698a:	d030      	beq.n	80069ee <__sflush_r+0x92>
 800698c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800698e:	89a3      	ldrh	r3, [r4, #12]
 8006990:	0759      	lsls	r1, r3, #29
 8006992:	d505      	bpl.n	80069a0 <__sflush_r+0x44>
 8006994:	6863      	ldr	r3, [r4, #4]
 8006996:	1ad2      	subs	r2, r2, r3
 8006998:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800699a:	b10b      	cbz	r3, 80069a0 <__sflush_r+0x44>
 800699c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800699e:	1ad2      	subs	r2, r2, r3
 80069a0:	2300      	movs	r3, #0
 80069a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069a4:	6a21      	ldr	r1, [r4, #32]
 80069a6:	4628      	mov	r0, r5
 80069a8:	47b0      	blx	r6
 80069aa:	1c43      	adds	r3, r0, #1
 80069ac:	89a3      	ldrh	r3, [r4, #12]
 80069ae:	d106      	bne.n	80069be <__sflush_r+0x62>
 80069b0:	6829      	ldr	r1, [r5, #0]
 80069b2:	291d      	cmp	r1, #29
 80069b4:	d82b      	bhi.n	8006a0e <__sflush_r+0xb2>
 80069b6:	4a2a      	ldr	r2, [pc, #168]	@ (8006a60 <__sflush_r+0x104>)
 80069b8:	410a      	asrs	r2, r1
 80069ba:	07d6      	lsls	r6, r2, #31
 80069bc:	d427      	bmi.n	8006a0e <__sflush_r+0xb2>
 80069be:	2200      	movs	r2, #0
 80069c0:	6062      	str	r2, [r4, #4]
 80069c2:	04d9      	lsls	r1, r3, #19
 80069c4:	6922      	ldr	r2, [r4, #16]
 80069c6:	6022      	str	r2, [r4, #0]
 80069c8:	d504      	bpl.n	80069d4 <__sflush_r+0x78>
 80069ca:	1c42      	adds	r2, r0, #1
 80069cc:	d101      	bne.n	80069d2 <__sflush_r+0x76>
 80069ce:	682b      	ldr	r3, [r5, #0]
 80069d0:	b903      	cbnz	r3, 80069d4 <__sflush_r+0x78>
 80069d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80069d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069d6:	602f      	str	r7, [r5, #0]
 80069d8:	b1b9      	cbz	r1, 8006a0a <__sflush_r+0xae>
 80069da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069de:	4299      	cmp	r1, r3
 80069e0:	d002      	beq.n	80069e8 <__sflush_r+0x8c>
 80069e2:	4628      	mov	r0, r5
 80069e4:	f7ff fbf2 	bl	80061cc <_free_r>
 80069e8:	2300      	movs	r3, #0
 80069ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80069ec:	e00d      	b.n	8006a0a <__sflush_r+0xae>
 80069ee:	2301      	movs	r3, #1
 80069f0:	4628      	mov	r0, r5
 80069f2:	47b0      	blx	r6
 80069f4:	4602      	mov	r2, r0
 80069f6:	1c50      	adds	r0, r2, #1
 80069f8:	d1c9      	bne.n	800698e <__sflush_r+0x32>
 80069fa:	682b      	ldr	r3, [r5, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d0c6      	beq.n	800698e <__sflush_r+0x32>
 8006a00:	2b1d      	cmp	r3, #29
 8006a02:	d001      	beq.n	8006a08 <__sflush_r+0xac>
 8006a04:	2b16      	cmp	r3, #22
 8006a06:	d11e      	bne.n	8006a46 <__sflush_r+0xea>
 8006a08:	602f      	str	r7, [r5, #0]
 8006a0a:	2000      	movs	r0, #0
 8006a0c:	e022      	b.n	8006a54 <__sflush_r+0xf8>
 8006a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a12:	b21b      	sxth	r3, r3
 8006a14:	e01b      	b.n	8006a4e <__sflush_r+0xf2>
 8006a16:	690f      	ldr	r7, [r1, #16]
 8006a18:	2f00      	cmp	r7, #0
 8006a1a:	d0f6      	beq.n	8006a0a <__sflush_r+0xae>
 8006a1c:	0793      	lsls	r3, r2, #30
 8006a1e:	680e      	ldr	r6, [r1, #0]
 8006a20:	bf08      	it	eq
 8006a22:	694b      	ldreq	r3, [r1, #20]
 8006a24:	600f      	str	r7, [r1, #0]
 8006a26:	bf18      	it	ne
 8006a28:	2300      	movne	r3, #0
 8006a2a:	eba6 0807 	sub.w	r8, r6, r7
 8006a2e:	608b      	str	r3, [r1, #8]
 8006a30:	f1b8 0f00 	cmp.w	r8, #0
 8006a34:	dde9      	ble.n	8006a0a <__sflush_r+0xae>
 8006a36:	6a21      	ldr	r1, [r4, #32]
 8006a38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006a3a:	4643      	mov	r3, r8
 8006a3c:	463a      	mov	r2, r7
 8006a3e:	4628      	mov	r0, r5
 8006a40:	47b0      	blx	r6
 8006a42:	2800      	cmp	r0, #0
 8006a44:	dc08      	bgt.n	8006a58 <__sflush_r+0xfc>
 8006a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a4e:	81a3      	strh	r3, [r4, #12]
 8006a50:	f04f 30ff 	mov.w	r0, #4294967295
 8006a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a58:	4407      	add	r7, r0
 8006a5a:	eba8 0800 	sub.w	r8, r8, r0
 8006a5e:	e7e7      	b.n	8006a30 <__sflush_r+0xd4>
 8006a60:	dfbffffe 	.word	0xdfbffffe

08006a64 <_fflush_r>:
 8006a64:	b538      	push	{r3, r4, r5, lr}
 8006a66:	690b      	ldr	r3, [r1, #16]
 8006a68:	4605      	mov	r5, r0
 8006a6a:	460c      	mov	r4, r1
 8006a6c:	b913      	cbnz	r3, 8006a74 <_fflush_r+0x10>
 8006a6e:	2500      	movs	r5, #0
 8006a70:	4628      	mov	r0, r5
 8006a72:	bd38      	pop	{r3, r4, r5, pc}
 8006a74:	b118      	cbz	r0, 8006a7e <_fflush_r+0x1a>
 8006a76:	6a03      	ldr	r3, [r0, #32]
 8006a78:	b90b      	cbnz	r3, 8006a7e <_fflush_r+0x1a>
 8006a7a:	f7ff f99f 	bl	8005dbc <__sinit>
 8006a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0f3      	beq.n	8006a6e <_fflush_r+0xa>
 8006a86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a88:	07d0      	lsls	r0, r2, #31
 8006a8a:	d404      	bmi.n	8006a96 <_fflush_r+0x32>
 8006a8c:	0599      	lsls	r1, r3, #22
 8006a8e:	d402      	bmi.n	8006a96 <_fflush_r+0x32>
 8006a90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a92:	f7ff fb8a 	bl	80061aa <__retarget_lock_acquire_recursive>
 8006a96:	4628      	mov	r0, r5
 8006a98:	4621      	mov	r1, r4
 8006a9a:	f7ff ff5f 	bl	800695c <__sflush_r>
 8006a9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006aa0:	07da      	lsls	r2, r3, #31
 8006aa2:	4605      	mov	r5, r0
 8006aa4:	d4e4      	bmi.n	8006a70 <_fflush_r+0xc>
 8006aa6:	89a3      	ldrh	r3, [r4, #12]
 8006aa8:	059b      	lsls	r3, r3, #22
 8006aaa:	d4e1      	bmi.n	8006a70 <_fflush_r+0xc>
 8006aac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006aae:	f7ff fb7d 	bl	80061ac <__retarget_lock_release_recursive>
 8006ab2:	e7dd      	b.n	8006a70 <_fflush_r+0xc>

08006ab4 <__swhatbuf_r>:
 8006ab4:	b570      	push	{r4, r5, r6, lr}
 8006ab6:	460c      	mov	r4, r1
 8006ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006abc:	2900      	cmp	r1, #0
 8006abe:	b096      	sub	sp, #88	@ 0x58
 8006ac0:	4615      	mov	r5, r2
 8006ac2:	461e      	mov	r6, r3
 8006ac4:	da0d      	bge.n	8006ae2 <__swhatbuf_r+0x2e>
 8006ac6:	89a3      	ldrh	r3, [r4, #12]
 8006ac8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006acc:	f04f 0100 	mov.w	r1, #0
 8006ad0:	bf14      	ite	ne
 8006ad2:	2340      	movne	r3, #64	@ 0x40
 8006ad4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006ad8:	2000      	movs	r0, #0
 8006ada:	6031      	str	r1, [r6, #0]
 8006adc:	602b      	str	r3, [r5, #0]
 8006ade:	b016      	add	sp, #88	@ 0x58
 8006ae0:	bd70      	pop	{r4, r5, r6, pc}
 8006ae2:	466a      	mov	r2, sp
 8006ae4:	f000 f848 	bl	8006b78 <_fstat_r>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	dbec      	blt.n	8006ac6 <__swhatbuf_r+0x12>
 8006aec:	9901      	ldr	r1, [sp, #4]
 8006aee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006af2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006af6:	4259      	negs	r1, r3
 8006af8:	4159      	adcs	r1, r3
 8006afa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006afe:	e7eb      	b.n	8006ad8 <__swhatbuf_r+0x24>

08006b00 <__smakebuf_r>:
 8006b00:	898b      	ldrh	r3, [r1, #12]
 8006b02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b04:	079d      	lsls	r5, r3, #30
 8006b06:	4606      	mov	r6, r0
 8006b08:	460c      	mov	r4, r1
 8006b0a:	d507      	bpl.n	8006b1c <__smakebuf_r+0x1c>
 8006b0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006b10:	6023      	str	r3, [r4, #0]
 8006b12:	6123      	str	r3, [r4, #16]
 8006b14:	2301      	movs	r3, #1
 8006b16:	6163      	str	r3, [r4, #20]
 8006b18:	b003      	add	sp, #12
 8006b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b1c:	ab01      	add	r3, sp, #4
 8006b1e:	466a      	mov	r2, sp
 8006b20:	f7ff ffc8 	bl	8006ab4 <__swhatbuf_r>
 8006b24:	9f00      	ldr	r7, [sp, #0]
 8006b26:	4605      	mov	r5, r0
 8006b28:	4639      	mov	r1, r7
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	f7ff fbba 	bl	80062a4 <_malloc_r>
 8006b30:	b948      	cbnz	r0, 8006b46 <__smakebuf_r+0x46>
 8006b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b36:	059a      	lsls	r2, r3, #22
 8006b38:	d4ee      	bmi.n	8006b18 <__smakebuf_r+0x18>
 8006b3a:	f023 0303 	bic.w	r3, r3, #3
 8006b3e:	f043 0302 	orr.w	r3, r3, #2
 8006b42:	81a3      	strh	r3, [r4, #12]
 8006b44:	e7e2      	b.n	8006b0c <__smakebuf_r+0xc>
 8006b46:	89a3      	ldrh	r3, [r4, #12]
 8006b48:	6020      	str	r0, [r4, #0]
 8006b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b4e:	81a3      	strh	r3, [r4, #12]
 8006b50:	9b01      	ldr	r3, [sp, #4]
 8006b52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006b56:	b15b      	cbz	r3, 8006b70 <__smakebuf_r+0x70>
 8006b58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	f000 f81d 	bl	8006b9c <_isatty_r>
 8006b62:	b128      	cbz	r0, 8006b70 <__smakebuf_r+0x70>
 8006b64:	89a3      	ldrh	r3, [r4, #12]
 8006b66:	f023 0303 	bic.w	r3, r3, #3
 8006b6a:	f043 0301 	orr.w	r3, r3, #1
 8006b6e:	81a3      	strh	r3, [r4, #12]
 8006b70:	89a3      	ldrh	r3, [r4, #12]
 8006b72:	431d      	orrs	r5, r3
 8006b74:	81a5      	strh	r5, [r4, #12]
 8006b76:	e7cf      	b.n	8006b18 <__smakebuf_r+0x18>

08006b78 <_fstat_r>:
 8006b78:	b538      	push	{r3, r4, r5, lr}
 8006b7a:	4d07      	ldr	r5, [pc, #28]	@ (8006b98 <_fstat_r+0x20>)
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	4604      	mov	r4, r0
 8006b80:	4608      	mov	r0, r1
 8006b82:	4611      	mov	r1, r2
 8006b84:	602b      	str	r3, [r5, #0]
 8006b86:	f7fd f9d6 	bl	8003f36 <_fstat>
 8006b8a:	1c43      	adds	r3, r0, #1
 8006b8c:	d102      	bne.n	8006b94 <_fstat_r+0x1c>
 8006b8e:	682b      	ldr	r3, [r5, #0]
 8006b90:	b103      	cbz	r3, 8006b94 <_fstat_r+0x1c>
 8006b92:	6023      	str	r3, [r4, #0]
 8006b94:	bd38      	pop	{r3, r4, r5, pc}
 8006b96:	bf00      	nop
 8006b98:	200002a0 	.word	0x200002a0

08006b9c <_isatty_r>:
 8006b9c:	b538      	push	{r3, r4, r5, lr}
 8006b9e:	4d06      	ldr	r5, [pc, #24]	@ (8006bb8 <_isatty_r+0x1c>)
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	4608      	mov	r0, r1
 8006ba6:	602b      	str	r3, [r5, #0]
 8006ba8:	f7fd f9d5 	bl	8003f56 <_isatty>
 8006bac:	1c43      	adds	r3, r0, #1
 8006bae:	d102      	bne.n	8006bb6 <_isatty_r+0x1a>
 8006bb0:	682b      	ldr	r3, [r5, #0]
 8006bb2:	b103      	cbz	r3, 8006bb6 <_isatty_r+0x1a>
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	bd38      	pop	{r3, r4, r5, pc}
 8006bb8:	200002a0 	.word	0x200002a0

08006bbc <_sbrk_r>:
 8006bbc:	b538      	push	{r3, r4, r5, lr}
 8006bbe:	4d06      	ldr	r5, [pc, #24]	@ (8006bd8 <_sbrk_r+0x1c>)
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	4608      	mov	r0, r1
 8006bc6:	602b      	str	r3, [r5, #0]
 8006bc8:	f7fd f9de 	bl	8003f88 <_sbrk>
 8006bcc:	1c43      	adds	r3, r0, #1
 8006bce:	d102      	bne.n	8006bd6 <_sbrk_r+0x1a>
 8006bd0:	682b      	ldr	r3, [r5, #0]
 8006bd2:	b103      	cbz	r3, 8006bd6 <_sbrk_r+0x1a>
 8006bd4:	6023      	str	r3, [r4, #0]
 8006bd6:	bd38      	pop	{r3, r4, r5, pc}
 8006bd8:	200002a0 	.word	0x200002a0

08006bdc <_init>:
 8006bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bde:	bf00      	nop
 8006be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006be2:	bc08      	pop	{r3}
 8006be4:	469e      	mov	lr, r3
 8006be6:	4770      	bx	lr

08006be8 <_fini>:
 8006be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bea:	bf00      	nop
 8006bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bee:	bc08      	pop	{r3}
 8006bf0:	469e      	mov	lr, r3
 8006bf2:	4770      	bx	lr
