
cJSON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1c0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  0800a350  0800a350  0000b350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9e0  0800a9e0  0000c1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9e0  0800a9e0  0000b9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9e8  0800a9e8  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9e8  0800a9e8  0000b9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a9ec  0800a9ec  0000b9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800a9f0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1e0  2**0
                  CONTENTS
 10 .bss          00000208  200001e0  200001e0  0000c1e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003e8  200003e8  0000c1e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fac1  00000000  00000000  0000c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000216b  00000000  00000000  0001bcd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001008  00000000  00000000  0001de40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cce  00000000  00000000  0001ee48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000225fe  00000000  00000000  0001fb16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001120a  00000000  00000000  00042114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfbee  00000000  00000000  0005331e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00122f0c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c60  00000000  00000000  00122f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00128bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a338 	.word	0x0800a338

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a338 	.word	0x0800a338

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b9a0 	b.w	8000f60 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f83c 	bl	8000ca4 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff5b 	bl	8000afc <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fcd1 	bl	8000618 <__aeabi_dmul>
 8000c76:	f7ff ffa7 	bl	8000bc8 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc52 	bl	8000524 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fcc8 	bl	8000618 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fb0a 	bl	80002a8 <__aeabi_dsub>
 8000c94:	f7ff ff98 	bl	8000bc8 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <__udivmoddi4>:
 8000ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca8:	9d08      	ldr	r5, [sp, #32]
 8000caa:	460c      	mov	r4, r1
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d14e      	bne.n	8000d4e <__udivmoddi4+0xaa>
 8000cb0:	4694      	mov	ip, r2
 8000cb2:	458c      	cmp	ip, r1
 8000cb4:	4686      	mov	lr, r0
 8000cb6:	fab2 f282 	clz	r2, r2
 8000cba:	d962      	bls.n	8000d82 <__udivmoddi4+0xde>
 8000cbc:	b14a      	cbz	r2, 8000cd2 <__udivmoddi4+0x2e>
 8000cbe:	f1c2 0320 	rsb	r3, r2, #32
 8000cc2:	4091      	lsls	r1, r2
 8000cc4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	4319      	orrs	r1, r3
 8000cce:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f f68c 	uxth.w	r6, ip
 8000cda:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ce6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cea:	fb04 f106 	mul.w	r1, r4, r6
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x64>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cfa:	f080 8112 	bcs.w	8000f22 <__udivmoddi4+0x27e>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 810f 	bls.w	8000f22 <__udivmoddi4+0x27e>
 8000d04:	3c02      	subs	r4, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a59      	subs	r1, r3, r1
 8000d0a:	fa1f f38e 	uxth.w	r3, lr
 8000d0e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d12:	fb07 1110 	mls	r1, r7, r0, r1
 8000d16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1a:	fb00 f606 	mul.w	r6, r0, r6
 8000d1e:	429e      	cmp	r6, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x94>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2a:	f080 80fc 	bcs.w	8000f26 <__udivmoddi4+0x282>
 8000d2e:	429e      	cmp	r6, r3
 8000d30:	f240 80f9 	bls.w	8000f26 <__udivmoddi4+0x282>
 8000d34:	4463      	add	r3, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	1b9b      	subs	r3, r3, r6
 8000d3a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11d      	cbz	r5, 8000d4a <__udivmoddi4+0xa6>
 8000d42:	40d3      	lsrs	r3, r2
 8000d44:	2200      	movs	r2, #0
 8000d46:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d905      	bls.n	8000d5e <__udivmoddi4+0xba>
 8000d52:	b10d      	cbz	r5, 8000d58 <__udivmoddi4+0xb4>
 8000d54:	e9c5 0100 	strd	r0, r1, [r5]
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e7f5      	b.n	8000d4a <__udivmoddi4+0xa6>
 8000d5e:	fab3 f183 	clz	r1, r3
 8000d62:	2900      	cmp	r1, #0
 8000d64:	d146      	bne.n	8000df4 <__udivmoddi4+0x150>
 8000d66:	42a3      	cmp	r3, r4
 8000d68:	d302      	bcc.n	8000d70 <__udivmoddi4+0xcc>
 8000d6a:	4290      	cmp	r0, r2
 8000d6c:	f0c0 80f0 	bcc.w	8000f50 <__udivmoddi4+0x2ac>
 8000d70:	1a86      	subs	r6, r0, r2
 8000d72:	eb64 0303 	sbc.w	r3, r4, r3
 8000d76:	2001      	movs	r0, #1
 8000d78:	2d00      	cmp	r5, #0
 8000d7a:	d0e6      	beq.n	8000d4a <__udivmoddi4+0xa6>
 8000d7c:	e9c5 6300 	strd	r6, r3, [r5]
 8000d80:	e7e3      	b.n	8000d4a <__udivmoddi4+0xa6>
 8000d82:	2a00      	cmp	r2, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x204>
 8000d88:	eba1 040c 	sub.w	r4, r1, ip
 8000d8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d90:	fa1f f78c 	uxth.w	r7, ip
 8000d94:	2101      	movs	r1, #1
 8000d96:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d9a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d9e:	fb08 4416 	mls	r4, r8, r6, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb07 f006 	mul.w	r0, r7, r6
 8000daa:	4298      	cmp	r0, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x11c>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x11a>
 8000db8:	4298      	cmp	r0, r3
 8000dba:	f200 80cd 	bhi.w	8000f58 <__udivmoddi4+0x2b4>
 8000dbe:	4626      	mov	r6, r4
 8000dc0:	1a1c      	subs	r4, r3, r0
 8000dc2:	fa1f f38e 	uxth.w	r3, lr
 8000dc6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dca:	fb08 4410 	mls	r4, r8, r0, r4
 8000dce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd2:	fb00 f707 	mul.w	r7, r0, r7
 8000dd6:	429f      	cmp	r7, r3
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x148>
 8000dda:	eb1c 0303 	adds.w	r3, ip, r3
 8000dde:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x146>
 8000de4:	429f      	cmp	r7, r3
 8000de6:	f200 80b0 	bhi.w	8000f4a <__udivmoddi4+0x2a6>
 8000dea:	4620      	mov	r0, r4
 8000dec:	1bdb      	subs	r3, r3, r7
 8000dee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df2:	e7a5      	b.n	8000d40 <__udivmoddi4+0x9c>
 8000df4:	f1c1 0620 	rsb	r6, r1, #32
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dfe:	431f      	orrs	r7, r3
 8000e00:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e04:	fa04 f301 	lsl.w	r3, r4, r1
 8000e08:	ea43 030c 	orr.w	r3, r3, ip
 8000e0c:	40f4      	lsrs	r4, r6
 8000e0e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e12:	0c38      	lsrs	r0, r7, #16
 8000e14:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e18:	fbb4 fef0 	udiv	lr, r4, r0
 8000e1c:	fa1f fc87 	uxth.w	ip, r7
 8000e20:	fb00 441e 	mls	r4, r0, lr, r4
 8000e24:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e28:	fb0e f90c 	mul.w	r9, lr, ip
 8000e2c:	45a1      	cmp	r9, r4
 8000e2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e32:	d90a      	bls.n	8000e4a <__udivmoddi4+0x1a6>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e3a:	f080 8084 	bcs.w	8000f46 <__udivmoddi4+0x2a2>
 8000e3e:	45a1      	cmp	r9, r4
 8000e40:	f240 8081 	bls.w	8000f46 <__udivmoddi4+0x2a2>
 8000e44:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	eba4 0409 	sub.w	r4, r4, r9
 8000e4e:	fa1f f983 	uxth.w	r9, r3
 8000e52:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e56:	fb00 4413 	mls	r4, r0, r3, r4
 8000e5a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x1d2>
 8000e66:	193c      	adds	r4, r7, r4
 8000e68:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e6c:	d267      	bcs.n	8000f3e <__udivmoddi4+0x29a>
 8000e6e:	45a4      	cmp	ip, r4
 8000e70:	d965      	bls.n	8000f3e <__udivmoddi4+0x29a>
 8000e72:	3b02      	subs	r3, #2
 8000e74:	443c      	add	r4, r7
 8000e76:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e7a:	fba0 9302 	umull	r9, r3, r0, r2
 8000e7e:	eba4 040c 	sub.w	r4, r4, ip
 8000e82:	429c      	cmp	r4, r3
 8000e84:	46ce      	mov	lr, r9
 8000e86:	469c      	mov	ip, r3
 8000e88:	d351      	bcc.n	8000f2e <__udivmoddi4+0x28a>
 8000e8a:	d04e      	beq.n	8000f2a <__udivmoddi4+0x286>
 8000e8c:	b155      	cbz	r5, 8000ea4 <__udivmoddi4+0x200>
 8000e8e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e92:	eb64 040c 	sbc.w	r4, r4, ip
 8000e96:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9a:	40cb      	lsrs	r3, r1
 8000e9c:	431e      	orrs	r6, r3
 8000e9e:	40cc      	lsrs	r4, r1
 8000ea0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	e750      	b.n	8000d4a <__udivmoddi4+0xa6>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f103 	lsr.w	r1, r0, r3
 8000eb0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb4:	fa24 f303 	lsr.w	r3, r4, r3
 8000eb8:	4094      	lsls	r4, r2
 8000eba:	430c      	orrs	r4, r1
 8000ebc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ec4:	fa1f f78c 	uxth.w	r7, ip
 8000ec8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ecc:	fb08 3110 	mls	r1, r8, r0, r3
 8000ed0:	0c23      	lsrs	r3, r4, #16
 8000ed2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed6:	fb00 f107 	mul.w	r1, r0, r7
 8000eda:	4299      	cmp	r1, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x24c>
 8000ede:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ee6:	d22c      	bcs.n	8000f42 <__udivmoddi4+0x29e>
 8000ee8:	4299      	cmp	r1, r3
 8000eea:	d92a      	bls.n	8000f42 <__udivmoddi4+0x29e>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ef8:	fb08 3311 	mls	r3, r8, r1, r3
 8000efc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f00:	fb01 f307 	mul.w	r3, r1, r7
 8000f04:	42a3      	cmp	r3, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x276>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f10:	d213      	bcs.n	8000f3a <__udivmoddi4+0x296>
 8000f12:	42a3      	cmp	r3, r4
 8000f14:	d911      	bls.n	8000f3a <__udivmoddi4+0x296>
 8000f16:	3902      	subs	r1, #2
 8000f18:	4464      	add	r4, ip
 8000f1a:	1ae4      	subs	r4, r4, r3
 8000f1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f20:	e739      	b.n	8000d96 <__udivmoddi4+0xf2>
 8000f22:	4604      	mov	r4, r0
 8000f24:	e6f0      	b.n	8000d08 <__udivmoddi4+0x64>
 8000f26:	4608      	mov	r0, r1
 8000f28:	e706      	b.n	8000d38 <__udivmoddi4+0x94>
 8000f2a:	45c8      	cmp	r8, r9
 8000f2c:	d2ae      	bcs.n	8000e8c <__udivmoddi4+0x1e8>
 8000f2e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f32:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f36:	3801      	subs	r0, #1
 8000f38:	e7a8      	b.n	8000e8c <__udivmoddi4+0x1e8>
 8000f3a:	4631      	mov	r1, r6
 8000f3c:	e7ed      	b.n	8000f1a <__udivmoddi4+0x276>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	e799      	b.n	8000e76 <__udivmoddi4+0x1d2>
 8000f42:	4630      	mov	r0, r6
 8000f44:	e7d4      	b.n	8000ef0 <__udivmoddi4+0x24c>
 8000f46:	46d6      	mov	lr, sl
 8000f48:	e77f      	b.n	8000e4a <__udivmoddi4+0x1a6>
 8000f4a:	4463      	add	r3, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e74d      	b.n	8000dec <__udivmoddi4+0x148>
 8000f50:	4606      	mov	r6, r0
 8000f52:	4623      	mov	r3, r4
 8000f54:	4608      	mov	r0, r1
 8000f56:	e70f      	b.n	8000d78 <__udivmoddi4+0xd4>
 8000f58:	3e02      	subs	r6, #2
 8000f5a:	4463      	add	r3, ip
 8000f5c:	e730      	b.n	8000dc0 <__udivmoddi4+0x11c>
 8000f5e:	bf00      	nop

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <cJSON_GetErrorPtr>:
    size_t position;
} error;
static error global_error = { NULL, 0 };

CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
    return (const char*) (global_error.json + global_error.position);
 8000f68:	4b04      	ldr	r3, [pc, #16]	@ (8000f7c <cJSON_GetErrorPtr+0x18>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b03      	ldr	r3, [pc, #12]	@ (8000f7c <cJSON_GetErrorPtr+0x18>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	4413      	add	r3, r2
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	200001fc 	.word	0x200001fc

08000f80 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <case_insensitive_strcmp+0x16>
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e056      	b.n	8001048 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d10d      	bne.n	8000fbe <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e050      	b.n	8001048 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <case_insensitive_strcmp+0x32>
        {
            return 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e04a      	b.n	8001048 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	603b      	str	r3, [r7, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	4a22      	ldr	r2, [pc, #136]	@ (8001054 <case_insensitive_strcmp+0xd4>)
 8000fca:	4413      	add	r3, r2
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d103      	bne.n	8000fde <case_insensitive_strcmp+0x5e>
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	f103 0220 	add.w	r2, r3, #32
 8000fdc:	e000      	b.n	8000fe0 <case_insensitive_strcmp+0x60>
 8000fde:	7bfa      	ldrb	r2, [r7, #15]
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	73bb      	strb	r3, [r7, #14]
 8000fe6:	7bbb      	ldrb	r3, [r7, #14]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	491a      	ldr	r1, [pc, #104]	@ (8001054 <case_insensitive_strcmp+0xd4>)
 8000fec:	440b      	add	r3, r1
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d102      	bne.n	8000ffe <case_insensitive_strcmp+0x7e>
 8000ff8:	7bbb      	ldrb	r3, [r7, #14]
 8000ffa:	3320      	adds	r3, #32
 8000ffc:	e000      	b.n	8001000 <case_insensitive_strcmp+0x80>
 8000ffe:	7bbb      	ldrb	r3, [r7, #14]
 8001000:	429a      	cmp	r2, r3
 8001002:	d0d0      	beq.n	8000fa6 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	737b      	strb	r3, [r7, #13]
 800100a:	7b7b      	ldrb	r3, [r7, #13]
 800100c:	3301      	adds	r3, #1
 800100e:	4a11      	ldr	r2, [pc, #68]	@ (8001054 <case_insensitive_strcmp+0xd4>)
 8001010:	4413      	add	r3, r2
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	2b01      	cmp	r3, #1
 800101a:	d103      	bne.n	8001024 <case_insensitive_strcmp+0xa4>
 800101c:	7b7b      	ldrb	r3, [r7, #13]
 800101e:	f103 0220 	add.w	r2, r3, #32
 8001022:	e000      	b.n	8001026 <case_insensitive_strcmp+0xa6>
 8001024:	7b7a      	ldrb	r2, [r7, #13]
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	733b      	strb	r3, [r7, #12]
 800102c:	7b3b      	ldrb	r3, [r7, #12]
 800102e:	3301      	adds	r3, #1
 8001030:	4908      	ldr	r1, [pc, #32]	@ (8001054 <case_insensitive_strcmp+0xd4>)
 8001032:	440b      	add	r3, r1
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	2b01      	cmp	r3, #1
 800103c:	d102      	bne.n	8001044 <case_insensitive_strcmp+0xc4>
 800103e:	7b3b      	ldrb	r3, [r7, #12]
 8001040:	3320      	adds	r3, #32
 8001042:	e000      	b.n	8001046 <case_insensitive_strcmp+0xc6>
 8001044:	7b3b      	ldrb	r3, [r7, #12]
 8001046:	1ad3      	subs	r3, r2, r3
}
 8001048:	4618      	mov	r0, r3
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	0800a5f8 	.word	0x0800a5f8

08001058 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <cJSON_strdup+0x1c>
    {
        return NULL;
 8001070:	2300      	movs	r3, #0
 8001072:	e015      	b.n	80010a0 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff f90b 	bl	8000290 <strlen>
 800107a:	4603      	mov	r3, r0
 800107c:	3301      	adds	r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	4798      	blx	r3
 8001088:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <cJSON_strdup+0x3c>
    {
        return NULL;
 8001090:	2300      	movs	r3, #0
 8001092:	e005      	b.n	80010a0 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	68b8      	ldr	r0, [r7, #8]
 800109a:	f006 f9b0 	bl	80073fe <memcpy>

    return copy;
 800109e:	68bb      	ldr	r3, [r7, #8]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2028      	movs	r0, #40	@ 0x28
 80010b6:	4798      	blx	r3
 80010b8:	60f8      	str	r0, [r7, #12]
    if (node)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d004      	beq.n	80010ca <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 80010c0:	2228      	movs	r2, #40	@ 0x28
 80010c2:	2100      	movs	r1, #0
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f006 f8f9 	bl	80072bc <memset>
    }

    return node;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 80010e0:	e03d      	b.n	800115e <cJSON_Delete+0x8a>
    {
        next = item->next;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d108      	bne.n	8001106 <cJSON_Delete+0x32>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d004      	beq.n	8001106 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ffe7 	bl	80010d4 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10c      	bne.n	800112c <cJSON_Delete+0x58>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d008      	beq.n	800112c <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 800111a:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <cJSON_Delete+0x9c>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	6912      	ldr	r2, [r2, #16]
 8001122:	4610      	mov	r0, r2
 8001124:	4798      	blx	r3
            item->valuestring = NULL;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10c      	bne.n	8001152 <cJSON_Delete+0x7e>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d008      	beq.n	8001152 <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 8001140:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <cJSON_Delete+0x9c>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	6a12      	ldr	r2, [r2, #32]
 8001148:	4610      	mov	r0, r2
 800114a:	4798      	blx	r3
            item->string = NULL;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 8001152:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <cJSON_Delete+0x9c>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	4798      	blx	r3
        item = next;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1be      	bne.n	80010e2 <cJSON_Delete+0xe>
    }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000000 	.word	0x20000000

08001174 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001178:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	0000      	movs	r0, r0
	...

08001188 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b098      	sub	sp, #96	@ 0x60
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
    double number = 0;
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 80011a2:	f7ff ffe7 	bl	8001174 <get_decimal_point>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <parse_number+0x36>
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <parse_number+0x3a>
    {
        return false;
 80011be:	2300      	movs	r3, #0
 80011c0:	e0a0      	b.n	8001304 <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80011c6:	e03d      	b.n	8001244 <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	6899      	ldr	r1, [r3, #8]
 80011d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011d2:	440b      	add	r3, r1
 80011d4:	4413      	add	r3, r2
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b45      	cmp	r3, #69	@ 0x45
 80011da:	dc17      	bgt.n	800120c <parse_number+0x84>
 80011dc:	2b2b      	cmp	r3, #43	@ 0x2b
 80011de:	db40      	blt.n	8001262 <parse_number+0xda>
 80011e0:	3b2b      	subs	r3, #43	@ 0x2b
 80011e2:	2201      	movs	r2, #1
 80011e4:	409a      	lsls	r2, r3
 80011e6:	4b4c      	ldr	r3, [pc, #304]	@ (8001318 <parse_number+0x190>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	bf14      	ite	ne
 80011ee:	2301      	movne	r3, #1
 80011f0:	2300      	moveq	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d10b      	bne.n	8001210 <parse_number+0x88>
 80011f8:	f002 0308 	and.w	r3, r2, #8
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	bf14      	ite	ne
 8001200:	2301      	movne	r3, #1
 8001202:	2300      	moveq	r3, #0
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d111      	bne.n	800122e <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 800120a:	e02a      	b.n	8001262 <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 800120c:	2b65      	cmp	r3, #101	@ 0x65
 800120e:	d128      	bne.n	8001262 <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	6899      	ldr	r1, [r3, #8]
 8001218:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800121a:	440b      	add	r3, r1
 800121c:	4413      	add	r3, r2
 800121e:	7819      	ldrb	r1, [r3, #0]
 8001220:	f107 0208 	add.w	r2, r7, #8
 8001224:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001226:	4413      	add	r3, r2
 8001228:	460a      	mov	r2, r1
 800122a:	701a      	strb	r2, [r3, #0]
                break;
 800122c:	e007      	b.n	800123e <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 800122e:	f107 0208 	add.w	r2, r7, #8
 8001232:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001234:	4413      	add	r3, r2
 8001236:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800123a:	701a      	strb	r2, [r3, #0]
                break;
 800123c:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800123e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001240:	3301      	adds	r3, #1
 8001242:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001244:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001246:	2b3e      	cmp	r3, #62	@ 0x3e
 8001248:	d80d      	bhi.n	8001266 <parse_number+0xde>
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d00a      	beq.n	8001266 <parse_number+0xde>
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001256:	441a      	add	r2, r3
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	429a      	cmp	r2, r3
 800125e:	d3b3      	bcc.n	80011c8 <parse_number+0x40>
        }
    }
loop_end:
 8001260:	e001      	b.n	8001266 <parse_number+0xde>
                goto loop_end;
 8001262:	bf00      	nop
 8001264:	e000      	b.n	8001268 <parse_number+0xe0>
loop_end:
 8001266:	bf00      	nop
    number_c_string[i] = '\0';
 8001268:	f107 0208 	add.w	r2, r7, #8
 800126c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800126e:	4413      	add	r3, r2
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8001274:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001278:	f107 0308 	add.w	r3, r7, #8
 800127c:	4611      	mov	r1, r2
 800127e:	4618      	mov	r0, r3
 8001280:	f005 f8f6 	bl	8006470 <strtod>
 8001284:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 8001288:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	429a      	cmp	r2, r3
 8001290:	d101      	bne.n	8001296 <parse_number+0x10e>
    {
        return false; /* parse_error */
 8001292:	2300      	movs	r3, #0
 8001294:	e036      	b.n	8001304 <parse_number+0x17c>
    }

    item->valuedouble = number;
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800129c:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 80012a0:	a31b      	add	r3, pc, #108	@ (adr r3, 8001310 <parse_number+0x188>)
 80012a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80012aa:	f7ff fc3b 	bl	8000b24 <__aeabi_dcmpge>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d004      	beq.n	80012be <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80012ba:	615a      	str	r2, [r3, #20]
 80012bc:	e015      	b.n	80012ea <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	4b16      	ldr	r3, [pc, #88]	@ (800131c <parse_number+0x194>)
 80012c4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80012c8:	f7ff fc22 	bl	8000b10 <__aeabi_dcmple>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d004      	beq.n	80012dc <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80012d8:	615a      	str	r2, [r3, #20]
 80012da:	e006      	b.n	80012ea <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 80012dc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80012e0:	f7ff fc4a 	bl	8000b78 <__aeabi_d2iz>
 80012e4:	4602      	mov	r2, r0
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2208      	movs	r2, #8
 80012ee:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80012f6:	f107 0208 	add.w	r2, r7, #8
 80012fa:	1a8a      	subs	r2, r1, r2
 80012fc:	441a      	add	r2, r3
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	609a      	str	r2, [r3, #8]
    return true;
 8001302:	2301      	movs	r3, #1
}
 8001304:	4618      	mov	r0, r3
 8001306:	3760      	adds	r7, #96	@ 0x60
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	f3af 8000 	nop.w
 8001310:	ffc00000 	.word	0xffc00000
 8001314:	41dfffff 	.word	0x41dfffff
 8001318:	04007fe5 	.word	0x04007fe5
 800131c:	c1e00000 	.word	0xc1e00000

08001320 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <ensure+0x20>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <ensure+0x24>
    {
        return NULL;
 8001340:	2300      	movs	r3, #0
 8001342:	e083      	b.n	800144c <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d007      	beq.n	800135c <ensure+0x3c>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	429a      	cmp	r2, r3
 8001356:	d301      	bcc.n	800135c <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8001358:	2300      	movs	r3, #0
 800135a:	e077      	b.n	800144c <ensure+0x12c>
    }

    if (needed > INT_MAX)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	da01      	bge.n	8001366 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8001362:	2300      	movs	r3, #0
 8001364:	e072      	b.n	800144c <ensure+0x12c>
    }

    needed += p->offset + 1;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	4413      	add	r3, r2
 800136e:	3301      	adds	r3, #1
 8001370:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	429a      	cmp	r2, r3
 800137a:	d805      	bhi.n	8001388 <ensure+0x68>
    {
        return p->buffer + p->offset;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	4413      	add	r3, r2
 8001386:	e061      	b.n	800144c <ensure+0x12c>
    }

    if (p->noalloc) {
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <ensure+0x74>
        return NULL;
 8001390:	2300      	movs	r3, #0
 8001392:	e05b      	b.n	800144c <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800139a:	d308      	bcc.n	80013ae <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	db03      	blt.n	80013aa <ensure+0x8a>
        {
            newsize = INT_MAX;
 80013a2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	e004      	b.n	80013b4 <ensure+0x94>
        }
        else
        {
            return NULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e04e      	b.n	800144c <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d018      	beq.n	80013ee <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6812      	ldr	r2, [r2, #0]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	4610      	mov	r0, r2
 80013c8:	4798      	blx	r3
 80013ca:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d132      	bne.n	8001438 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	6812      	ldr	r2, [r2, #0]
 80013da:	4610      	mov	r0, r2
 80013dc:	4798      	blx	r3
            p->length = 0;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]

            return NULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	e02e      	b.n	800144c <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	68b8      	ldr	r0, [r7, #8]
 80013f4:	4798      	blx	r3
 80013f6:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10d      	bne.n	800141a <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6812      	ldr	r2, [r2, #0]
 8001406:	4610      	mov	r0, r2
 8001408:	4798      	blx	r3
            p->length = 0;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]

            return NULL;
 8001416:	2300      	movs	r3, #0
 8001418:	e018      	b.n	800144c <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6819      	ldr	r1, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	3301      	adds	r3, #1
 8001424:	461a      	mov	r2, r3
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f005 ffe9 	bl	80073fe <memcpy>
        p->hooks.deallocate(p->buffer);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6812      	ldr	r2, [r2, #0]
 8001434:	4610      	mov	r0, r2
 8001436:	4798      	blx	r3
    }
    p->length = newsize;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	4413      	add	r3, r2
}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d013      	beq.n	800148e <update_offset+0x3a>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00f      	beq.n	800148e <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	4413      	add	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689c      	ldr	r4, [r3, #8]
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f7fe ff06 	bl	8000290 <strlen>
 8001484:	4603      	mov	r3, r0
 8001486:	18e2      	adds	r2, r4, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	e000      	b.n	8001490 <update_offset+0x3c>
        return;
 800148e:	bf00      	nop
}
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	bd90      	pop	{r4, r7, pc}
	...

08001498 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8001498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800149c:	b087      	sub	sp, #28
 800149e:	af00      	add	r7, sp, #0
 80014a0:	ed87 0b02 	vstr	d0, [r7, #8]
 80014a4:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 80014a8:	68b8      	ldr	r0, [r7, #8]
 80014aa:	68fe      	ldr	r6, [r7, #12]
 80014ac:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	687e      	ldr	r6, [r7, #4]
 80014b4:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80014b8:	f7ff fb3e 	bl	8000b38 <__aeabi_dcmpgt>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d004      	beq.n	80014cc <compare_double+0x34>
 80014c2:	68bc      	ldr	r4, [r7, #8]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80014ca:	e003      	b.n	80014d4 <compare_double+0x3c>
 80014cc:	683c      	ldr	r4, [r7, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80014d4:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 80014d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014e0:	f7fe fee2 	bl	80002a8 <__aeabi_dsub>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4690      	mov	r8, r2
 80014ea:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001524 <compare_double+0x8c>)
 80014f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014f8:	f7ff f88e 	bl	8000618 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	2101      	movs	r1, #1
 8001502:	460c      	mov	r4, r1
 8001504:	4640      	mov	r0, r8
 8001506:	4649      	mov	r1, r9
 8001508:	f7ff fb02 	bl	8000b10 <__aeabi_dcmple>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <compare_double+0x7e>
 8001512:	2300      	movs	r3, #0
 8001514:	461c      	mov	r4, r3
 8001516:	b2e3      	uxtb	r3, r4
}
 8001518:	4618      	mov	r0, r3
 800151a:	371c      	adds	r7, #28
 800151c:	46bd      	mov	sp, r7
 800151e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001522:	bf00      	nop
 8001524:	3cb00000 	.word	0x3cb00000

08001528 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8001528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152a:	b093      	sub	sp, #76	@ 0x4c
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001532:	2300      	movs	r3, #0
 8001534:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800153c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	f107 0318 	add.w	r3, r7, #24
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
 800155c:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 800155e:	f7ff fe09 	bl	8001174 <get_decimal_point>
 8001562:	4603      	mov	r3, r0
 8001564:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <print_number+0x56>
    {
        return false;
 800157a:	2300      	movs	r3, #0
 800157c:	e0b4      	b.n	80016e8 <print_number+0x1c0>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 800157e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001582:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001586:	f7ff fae1 	bl	8000b4c <__aeabi_dcmpun>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d121      	bne.n	80015d4 <print_number+0xac>
 8001590:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8001592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001594:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001598:	2301      	movs	r3, #1
 800159a:	461e      	mov	r6, r3
 800159c:	f04f 32ff 	mov.w	r2, #4294967295
 80015a0:	4b53      	ldr	r3, [pc, #332]	@ (80016f0 <print_number+0x1c8>)
 80015a2:	4620      	mov	r0, r4
 80015a4:	4629      	mov	r1, r5
 80015a6:	f7ff fad1 	bl	8000b4c <__aeabi_dcmpun>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d10b      	bne.n	80015c8 <print_number+0xa0>
 80015b0:	f04f 32ff 	mov.w	r2, #4294967295
 80015b4:	4b4e      	ldr	r3, [pc, #312]	@ (80016f0 <print_number+0x1c8>)
 80015b6:	4620      	mov	r0, r4
 80015b8:	4629      	mov	r1, r5
 80015ba:	f7ff faa9 	bl	8000b10 <__aeabi_dcmple>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <print_number+0xa0>
 80015c4:	2300      	movs	r3, #0
 80015c6:	461e      	mov	r6, r3
 80015c8:	b2f3      	uxtb	r3, r6
 80015ca:	f083 0301 	eor.w	r3, r3, #1
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d007      	beq.n	80015e4 <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4946      	ldr	r1, [pc, #280]	@ (80016f4 <print_number+0x1cc>)
 80015da:	4618      	mov	r0, r3
 80015dc:	f005 fd4a 	bl	8007074 <siprintf>
 80015e0:	6478      	str	r0, [r7, #68]	@ 0x44
 80015e2:	e03f      	b.n	8001664 <print_number+0x13c>
    }
    else if(d == (double)item->valueint)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe ffab 	bl	8000544 <__aeabi_i2d>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80015f6:	f7ff fa77 	bl	8000ae8 <__aeabi_dcmpeq>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d009      	beq.n	8001614 <print_number+0xec>
    {
        length = sprintf((char*)number_buffer, "%d", item->valueint);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	695a      	ldr	r2, [r3, #20]
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	493b      	ldr	r1, [pc, #236]	@ (80016f8 <print_number+0x1d0>)
 800160a:	4618      	mov	r0, r3
 800160c:	f005 fd32 	bl	8007074 <siprintf>
 8001610:	6478      	str	r0, [r7, #68]	@ 0x44
 8001612:	e027      	b.n	8001664 <print_number+0x13c>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8001614:	f107 0014 	add.w	r0, r7, #20
 8001618:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800161c:	4937      	ldr	r1, [pc, #220]	@ (80016fc <print_number+0x1d4>)
 800161e:	f005 fd29 	bl	8007074 <siprintf>
 8001622:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8001624:	f107 0208 	add.w	r2, r7, #8
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4934      	ldr	r1, [pc, #208]	@ (8001700 <print_number+0x1d8>)
 800162e:	4618      	mov	r0, r3
 8001630:	f005 fd40 	bl	80070b4 <siscanf>
 8001634:	4603      	mov	r3, r0
 8001636:	2b01      	cmp	r3, #1
 8001638:	d10c      	bne.n	8001654 <print_number+0x12c>
 800163a:	ed97 7b02 	vldr	d7, [r7, #8]
 800163e:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8001642:	eeb0 0a47 	vmov.f32	s0, s14
 8001646:	eef0 0a67 	vmov.f32	s1, s15
 800164a:	f7ff ff25 	bl	8001498 <compare_double>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d107      	bne.n	8001664 <print_number+0x13c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8001654:	f107 0014 	add.w	r0, r7, #20
 8001658:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800165c:	4929      	ldr	r1, [pc, #164]	@ (8001704 <print_number+0x1dc>)
 800165e:	f005 fd09 	bl	8007074 <siprintf>
 8001662:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8001664:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001666:	2b00      	cmp	r3, #0
 8001668:	db02      	blt.n	8001670 <print_number+0x148>
 800166a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800166c:	2b19      	cmp	r3, #25
 800166e:	dd01      	ble.n	8001674 <print_number+0x14c>
    {
        return false;
 8001670:	2300      	movs	r3, #0
 8001672:	e039      	b.n	80016e8 <print_number+0x1c0>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8001674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001676:	3301      	adds	r3, #1
 8001678:	4619      	mov	r1, r3
 800167a:	6838      	ldr	r0, [r7, #0]
 800167c:	f7ff fe50 	bl	8001320 <ensure>
 8001680:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 8001682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <print_number+0x164>
    {
        return false;
 8001688:	2300      	movs	r3, #0
 800168a:	e02d      	b.n	80016e8 <print_number+0x1c0>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 800168c:	2300      	movs	r3, #0
 800168e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001690:	e01a      	b.n	80016c8 <print_number+0x1a0>
    {
        if (number_buffer[i] == decimal_point)
 8001692:	f107 0214 	add.w	r2, r7, #20
 8001696:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001698:	4413      	add	r3, r2
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d105      	bne.n	80016b0 <print_number+0x188>
        {
            output_pointer[i] = '.';
 80016a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016a8:	4413      	add	r3, r2
 80016aa:	222e      	movs	r2, #46	@ 0x2e
 80016ac:	701a      	strb	r2, [r3, #0]
            continue;
 80016ae:	e008      	b.n	80016c2 <print_number+0x19a>
        }

        output_pointer[i] = number_buffer[i];
 80016b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016b4:	4413      	add	r3, r2
 80016b6:	f107 0114 	add.w	r1, r7, #20
 80016ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80016bc:	440a      	add	r2, r1
 80016be:	7812      	ldrb	r2, [r2, #0]
 80016c0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 80016c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016c4:	3301      	adds	r3, #1
 80016c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80016c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d3e0      	bcc.n	8001692 <print_number+0x16a>
    }
    output_pointer[i] = '\0';
 80016d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016d4:	4413      	add	r3, r2
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016e0:	441a      	add	r2, r3
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	609a      	str	r2, [r3, #8]

    return true;
 80016e6:	2301      	movs	r3, #1
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	374c      	adds	r7, #76	@ 0x4c
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f0:	7fefffff 	.word	0x7fefffff
 80016f4:	0800a35c 	.word	0x0800a35c
 80016f8:	0800a364 	.word	0x0800a364
 80016fc:	0800a368 	.word	0x0800a368
 8001700:	0800a370 	.word	0x0800a370
 8001704:	0800a374 	.word	0x0800a374

08001708 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001718:	2300      	movs	r3, #0
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	e04c      	b.n	80017b8 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	4413      	add	r3, r2
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b2f      	cmp	r3, #47	@ 0x2f
 8001728:	d90f      	bls.n	800174a <parse_hex4+0x42>
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	4413      	add	r3, r2
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b39      	cmp	r3, #57	@ 0x39
 8001734:	d809      	bhi.n	800174a <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	4413      	add	r3, r2
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4413      	add	r3, r2
 8001744:	3b30      	subs	r3, #48	@ 0x30
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	e02d      	b.n	80017a6 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	4413      	add	r3, r2
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b40      	cmp	r3, #64	@ 0x40
 8001754:	d90f      	bls.n	8001776 <parse_hex4+0x6e>
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4413      	add	r3, r2
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b46      	cmp	r3, #70	@ 0x46
 8001760:	d809      	bhi.n	8001776 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	4413      	add	r3, r2
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4413      	add	r3, r2
 8001770:	3b37      	subs	r3, #55	@ 0x37
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	e017      	b.n	80017a6 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	4413      	add	r3, r2
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b60      	cmp	r3, #96	@ 0x60
 8001780:	d90f      	bls.n	80017a2 <parse_hex4+0x9a>
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	4413      	add	r3, r2
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b66      	cmp	r3, #102	@ 0x66
 800178c:	d809      	bhi.n	80017a2 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	4413      	add	r3, r2
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4413      	add	r3, r2
 800179c:	3b57      	subs	r3, #87	@ 0x57
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	e001      	b.n	80017a6 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e00c      	b.n	80017c0 <parse_hex4+0xb8>
        }

        if (i < 3)
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d802      	bhi.n	80017b2 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	3301      	adds	r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d9af      	bls.n	800171e <parse_hex4+0x16>
        }
    }

    return h;
 80017be:	68fb      	ldr	r3, [r7, #12]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	@ 0x28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80017fc:	68ba      	ldr	r2, [r7, #8]
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b05      	cmp	r3, #5
 8001804:	f340 80b7 	ble.w	8001976 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	3302      	adds	r3, #2
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff7b 	bl	8001708 <parse_hex4>
 8001812:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800181a:	d304      	bcc.n	8001826 <utf16_literal_to_utf8+0x5a>
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8001822:	f0c0 80aa 	bcc.w	800197a <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800182c:	d337      	bcc.n	800189e <utf16_literal_to_utf8+0xd2>
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001834:	d233      	bcs.n	800189e <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	3306      	adds	r3, #6
 800183a:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8001840:	230c      	movs	r3, #12
 8001842:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b05      	cmp	r3, #5
 800184e:	f340 8096 	ble.w	800197e <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b5c      	cmp	r3, #92	@ 0x5c
 8001858:	f040 8093 	bne.w	8001982 <utf16_literal_to_utf8+0x1b6>
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b75      	cmp	r3, #117	@ 0x75
 8001864:	f040 808d 	bne.w	8001982 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	3302      	adds	r3, #2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff4b 	bl	8001708 <parse_hex4>
 8001872:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800187a:	f0c0 8084 	bcc.w	8001986 <utf16_literal_to_utf8+0x1ba>
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8001884:	d27f      	bcs.n	8001986 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	029a      	lsls	r2, r3, #10
 800188a:	4b43      	ldr	r3, [pc, #268]	@ (8001998 <utf16_literal_to_utf8+0x1cc>)
 800188c:	4013      	ands	r3, r2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001894:	4313      	orrs	r3, r2
 8001896:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 800189c:	e004      	b.n	80018a8 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800189e:	2306      	movs	r3, #6
 80018a0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 80018a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80018ac:	d803      	bhi.n	80018b6 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 80018ae:	2301      	movs	r3, #1
 80018b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80018b4:	e01f      	b.n	80018f6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 80018b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018bc:	d206      	bcs.n	80018cc <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 80018be:	2302      	movs	r3, #2
 80018c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 80018c4:	23c0      	movs	r3, #192	@ 0xc0
 80018c6:	f887 3020 	strb.w	r3, [r7, #32]
 80018ca:	e014      	b.n	80018f6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 80018cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018d2:	d206      	bcs.n	80018e2 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 80018d4:	2303      	movs	r3, #3
 80018d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 80018da:	23e0      	movs	r3, #224	@ 0xe0
 80018dc:	f887 3020 	strb.w	r3, [r7, #32]
 80018e0:	e009      	b.n	80018f6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80018e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e4:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80018e8:	d24f      	bcs.n	800198a <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80018ea:	2304      	movs	r3, #4
 80018ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80018f0:	23f0      	movs	r3, #240	@ 0xf0
 80018f2:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80018f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80018fa:	3b01      	subs	r3, #1
 80018fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001900:	e015      	b.n	800192e <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8001902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001904:	b2db      	uxtb	r3, r3
 8001906:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800190a:	b2da      	uxtb	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6819      	ldr	r1, [r3, #0]
 8001910:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001914:	440b      	add	r3, r1
 8001916:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800191e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001920:	099b      	lsrs	r3, r3, #6
 8001922:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001924:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001928:	3b01      	subs	r3, #1
 800192a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800192e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1e5      	bne.n	8001902 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001936:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800193a:	2b01      	cmp	r3, #1
 800193c:	d909      	bls.n	8001952 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800193e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001940:	b2d9      	uxtb	r1, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f897 2020 	ldrb.w	r2, [r7, #32]
 800194a:	430a      	orrs	r2, r1
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	701a      	strb	r2, [r3, #0]
 8001950:	e007      	b.n	8001962 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001954:	b2da      	uxtb	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800196a:	441a      	add	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001970:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001974:	e00b      	b.n	800198e <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8001976:	bf00      	nop
 8001978:	e008      	b.n	800198c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800197a:	bf00      	nop
 800197c:	e006      	b.n	800198c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800197e:	bf00      	nop
 8001980:	e004      	b.n	800198c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001982:	bf00      	nop
 8001984:	e002      	b.n	800198c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001986:	bf00      	nop
 8001988:	e000      	b.n	800198c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800198a:	bf00      	nop

fail:
    return 0;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3728      	adds	r7, #40	@ 0x28
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	000ffc00 	.word	0x000ffc00

0800199c <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	@ 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	3301      	adds	r3, #1
 80019b0:	4413      	add	r3, r2
 80019b2:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	3301      	adds	r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	4413      	add	r3, r2
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b22      	cmp	r3, #34	@ 0x22
 80019d8:	f040 8103 	bne.w	8001be2 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80019e4:	e017      	b.n	8001a16 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b5c      	cmp	r3, #92	@ 0x5c
 80019ec:	d110      	bne.n	8001a10 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 80019ee:	6a3b      	ldr	r3, [r7, #32]
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	461a      	mov	r2, r3
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	f080 80f1 	bcs.w	8001be6 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	3301      	adds	r3, #1
 8001a08:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	3301      	adds	r3, #1
 8001a14:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6a3a      	ldr	r2, [r7, #32]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	461a      	mov	r2, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d203      	bcs.n	8001a30 <parse_string+0x94>
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b22      	cmp	r3, #34	@ 0x22
 8001a2e:	d1da      	bne.n	80019e6 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6a3a      	ldr	r2, [r7, #32]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	461a      	mov	r2, r3
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	f080 80d3 	bcs.w	8001bea <parse_string+0x24e>
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b22      	cmp	r3, #34	@ 0x22
 8001a4a:	f040 80ce 	bne.w	8001bea <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	4413      	add	r3, r2
 8001a58:	6a3a      	ldr	r2, [r7, #32]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	3201      	adds	r2, #1
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4798      	blx	r3
 8001a70:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 80ba 	beq.w	8001bee <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001a7e:	e094      	b.n	8001baa <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8001a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b5c      	cmp	r3, #92	@ 0x5c
 8001a86:	d008      	beq.n	8001a9a <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001a88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a8a:	1c53      	adds	r3, r2, #1
 8001a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	1c59      	adds	r1, r3, #1
 8001a92:	60f9      	str	r1, [r7, #12]
 8001a94:	7812      	ldrb	r2, [r2, #0]
 8001a96:	701a      	strb	r2, [r3, #0]
 8001a98:	e087      	b.n	8001baa <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001a9e:	6a3a      	ldr	r2, [r7, #32]
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f340 80a4 	ble.w	8001bf2 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aac:	3301      	adds	r3, #1
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b75      	cmp	r3, #117	@ 0x75
 8001ab2:	f300 80a0 	bgt.w	8001bf6 <parse_string+0x25a>
 8001ab6:	2b5c      	cmp	r3, #92	@ 0x5c
 8001ab8:	da04      	bge.n	8001ac4 <parse_string+0x128>
 8001aba:	2b22      	cmp	r3, #34	@ 0x22
 8001abc:	d05c      	beq.n	8001b78 <parse_string+0x1dc>
 8001abe:	2b2f      	cmp	r3, #47	@ 0x2f
 8001ac0:	d05a      	beq.n	8001b78 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001ac2:	e098      	b.n	8001bf6 <parse_string+0x25a>
            switch (input_pointer[1])
 8001ac4:	3b5c      	subs	r3, #92	@ 0x5c
 8001ac6:	2b19      	cmp	r3, #25
 8001ac8:	f200 8095 	bhi.w	8001bf6 <parse_string+0x25a>
 8001acc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad4 <parse_string+0x138>)
 8001ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad2:	bf00      	nop
 8001ad4:	08001b79 	.word	0x08001b79
 8001ad8:	08001bf7 	.word	0x08001bf7
 8001adc:	08001bf7 	.word	0x08001bf7
 8001ae0:	08001bf7 	.word	0x08001bf7
 8001ae4:	08001bf7 	.word	0x08001bf7
 8001ae8:	08001bf7 	.word	0x08001bf7
 8001aec:	08001b3d 	.word	0x08001b3d
 8001af0:	08001bf7 	.word	0x08001bf7
 8001af4:	08001bf7 	.word	0x08001bf7
 8001af8:	08001bf7 	.word	0x08001bf7
 8001afc:	08001b49 	.word	0x08001b49
 8001b00:	08001bf7 	.word	0x08001bf7
 8001b04:	08001bf7 	.word	0x08001bf7
 8001b08:	08001bf7 	.word	0x08001bf7
 8001b0c:	08001bf7 	.word	0x08001bf7
 8001b10:	08001bf7 	.word	0x08001bf7
 8001b14:	08001bf7 	.word	0x08001bf7
 8001b18:	08001bf7 	.word	0x08001bf7
 8001b1c:	08001b55 	.word	0x08001b55
 8001b20:	08001bf7 	.word	0x08001bf7
 8001b24:	08001bf7 	.word	0x08001bf7
 8001b28:	08001bf7 	.word	0x08001bf7
 8001b2c:	08001b61 	.word	0x08001b61
 8001b30:	08001bf7 	.word	0x08001bf7
 8001b34:	08001b6d 	.word	0x08001b6d
 8001b38:	08001b89 	.word	0x08001b89
                    *output_pointer++ = '\b';
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	60fa      	str	r2, [r7, #12]
 8001b42:	2208      	movs	r2, #8
 8001b44:	701a      	strb	r2, [r3, #0]
                    break;
 8001b46:	e02c      	b.n	8001ba2 <parse_string+0x206>
                    *output_pointer++ = '\f';
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	60fa      	str	r2, [r7, #12]
 8001b4e:	220c      	movs	r2, #12
 8001b50:	701a      	strb	r2, [r3, #0]
                    break;
 8001b52:	e026      	b.n	8001ba2 <parse_string+0x206>
                    *output_pointer++ = '\n';
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	60fa      	str	r2, [r7, #12]
 8001b5a:	220a      	movs	r2, #10
 8001b5c:	701a      	strb	r2, [r3, #0]
                    break;
 8001b5e:	e020      	b.n	8001ba2 <parse_string+0x206>
                    *output_pointer++ = '\r';
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	60fa      	str	r2, [r7, #12]
 8001b66:	220d      	movs	r2, #13
 8001b68:	701a      	strb	r2, [r3, #0]
                    break;
 8001b6a:	e01a      	b.n	8001ba2 <parse_string+0x206>
                    *output_pointer++ = '\t';
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	60fa      	str	r2, [r7, #12]
 8001b72:	2209      	movs	r2, #9
 8001b74:	701a      	strb	r2, [r3, #0]
                    break;
 8001b76:	e014      	b.n	8001ba2 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 8001b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	1c59      	adds	r1, r3, #1
 8001b80:	60f9      	str	r1, [r7, #12]
 8001b82:	7812      	ldrb	r2, [r2, #0]
 8001b84:	701a      	strb	r2, [r3, #0]
                    break;
 8001b86:	e00c      	b.n	8001ba2 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001b88:	f107 030c 	add.w	r3, r7, #12
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	6a39      	ldr	r1, [r7, #32]
 8001b90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b92:	f7ff fe1b 	bl	80017cc <utf16_literal_to_utf8>
 8001b96:	4603      	mov	r3, r0
 8001b98:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001b9a:	7dfb      	ldrb	r3, [r7, #23]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d02c      	beq.n	8001bfa <parse_string+0x25e>
                    break;
 8001ba0:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001ba2:	7dfb      	ldrb	r3, [r7, #23]
 8001ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ba6:	4413      	add	r3, r2
 8001ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 8001baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	f4ff af66 	bcc.w	8001a80 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2210      	movs	r2, #16
 8001bbe:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6a3a      	ldr	r2, [r7, #32]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	609a      	str	r2, [r3, #8]

    return true;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e020      	b.n	8001c24 <parse_string+0x288>
        goto fail;
 8001be2:	bf00      	nop
 8001be4:	e00a      	b.n	8001bfc <parse_string+0x260>
                    goto fail;
 8001be6:	bf00      	nop
 8001be8:	e008      	b.n	8001bfc <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 8001bea:	bf00      	nop
 8001bec:	e006      	b.n	8001bfc <parse_string+0x260>
            goto fail; /* allocation failure */
 8001bee:	bf00      	nop
 8001bf0:	e004      	b.n	8001bfc <parse_string+0x260>
                goto fail;
 8001bf2:	bf00      	nop
 8001bf4:	e002      	b.n	8001bfc <parse_string+0x260>
                    goto fail;
 8001bf6:	bf00      	nop
 8001bf8:	e000      	b.n	8001bfc <parse_string+0x260>
                        goto fail;
 8001bfa:	bf00      	nop

fail:
    if (output != NULL)
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d005      	beq.n	8001c0e <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	69f8      	ldr	r0, [r7, #28]
 8001c08:	4798      	blx	r3
        output = NULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d006      	beq.n	8001c22 <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3728      	adds	r7, #40	@ 0x28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <print_string_ptr+0x28>
    {
        return false;
 8001c50:	2300      	movs	r3, #0
 8001c52:	e110      	b.n	8001e76 <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d111      	bne.n	8001c7e <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8001c5a:	2103      	movs	r1, #3
 8001c5c:	6838      	ldr	r0, [r7, #0]
 8001c5e:	f7ff fb5f 	bl	8001320 <ensure>
 8001c62:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <print_string_ptr+0x42>
        {
            return false;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e103      	b.n	8001e76 <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4a83      	ldr	r2, [pc, #524]	@ (8001e80 <print_string_ptr+0x254>)
 8001c72:	8811      	ldrh	r1, [r2, #0]
 8001c74:	7892      	ldrb	r2, [r2, #2]
 8001c76:	8019      	strh	r1, [r3, #0]
 8001c78:	709a      	strb	r2, [r3, #2]

        return true;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e0fb      	b.n	8001e76 <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	e024      	b.n	8001cce <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b22      	cmp	r3, #34	@ 0x22
 8001c8a:	dc0f      	bgt.n	8001cac <print_string_ptr+0x80>
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	db13      	blt.n	8001cb8 <print_string_ptr+0x8c>
 8001c90:	3b08      	subs	r3, #8
 8001c92:	4a7c      	ldr	r2, [pc, #496]	@ (8001e84 <print_string_ptr+0x258>)
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	bf14      	ite	ne
 8001ca0:	2301      	movne	r3, #1
 8001ca2:	2300      	moveq	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d102      	bne.n	8001cb0 <print_string_ptr+0x84>
 8001caa:	e005      	b.n	8001cb8 <print_string_ptr+0x8c>
 8001cac:	2b5c      	cmp	r3, #92	@ 0x5c
 8001cae:	d103      	bne.n	8001cb8 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
                break;
 8001cb6:	e007      	b.n	8001cc8 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b1f      	cmp	r3, #31
 8001cbe:	d802      	bhi.n	8001cc6 <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	3305      	adds	r3, #5
 8001cc4:	617b      	str	r3, [r7, #20]
                }
                break;
 8001cc6:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1d6      	bne.n	8001c84 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	461a      	mov	r2, r3
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	3303      	adds	r3, #3
 8001ce8:	4619      	mov	r1, r3
 8001cea:	6838      	ldr	r0, [r7, #0]
 8001cec:	f7ff fb18 	bl	8001320 <ensure>
 8001cf0:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <print_string_ptr+0xd0>
    {
        return false;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e0bc      	b.n	8001e76 <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d117      	bne.n	8001d32 <print_string_ptr+0x106>
    {
        output[0] = '\"';
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	2222      	movs	r2, #34	@ 0x22
 8001d06:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f005 fb74 	bl	80073fe <memcpy>
        output[output_length + 1] = '\"';
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	2222      	movs	r2, #34	@ 0x22
 8001d20:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3302      	adds	r3, #2
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4413      	add	r3, r2
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]

        return true;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e0a1      	b.n	8001e76 <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	2222      	movs	r2, #34	@ 0x22
 8001d36:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	61fb      	str	r3, [r7, #28]
 8001d42:	e086      	b.n	8001e52 <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b1f      	cmp	r3, #31
 8001d4a:	d90c      	bls.n	8001d66 <print_string_ptr+0x13a>
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b22      	cmp	r3, #34	@ 0x22
 8001d52:	d008      	beq.n	8001d66 <print_string_ptr+0x13a>
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b5c      	cmp	r3, #92	@ 0x5c
 8001d5a:	d004      	beq.n	8001d66 <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	781a      	ldrb	r2, [r3, #0]
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	701a      	strb	r2, [r3, #0]
 8001d64:	e06f      	b.n	8001e46 <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	61ba      	str	r2, [r7, #24]
 8001d6c:	225c      	movs	r2, #92	@ 0x5c
 8001d6e:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b22      	cmp	r3, #34	@ 0x22
 8001d76:	dc3d      	bgt.n	8001df4 <print_string_ptr+0x1c8>
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	db59      	blt.n	8001e30 <print_string_ptr+0x204>
 8001d7c:	3b08      	subs	r3, #8
 8001d7e:	2b1a      	cmp	r3, #26
 8001d80:	d856      	bhi.n	8001e30 <print_string_ptr+0x204>
 8001d82:	a201      	add	r2, pc, #4	@ (adr r2, 8001d88 <print_string_ptr+0x15c>)
 8001d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d88:	08001e09 	.word	0x08001e09
 8001d8c:	08001e29 	.word	0x08001e29
 8001d90:	08001e19 	.word	0x08001e19
 8001d94:	08001e31 	.word	0x08001e31
 8001d98:	08001e11 	.word	0x08001e11
 8001d9c:	08001e21 	.word	0x08001e21
 8001da0:	08001e31 	.word	0x08001e31
 8001da4:	08001e31 	.word	0x08001e31
 8001da8:	08001e31 	.word	0x08001e31
 8001dac:	08001e31 	.word	0x08001e31
 8001db0:	08001e31 	.word	0x08001e31
 8001db4:	08001e31 	.word	0x08001e31
 8001db8:	08001e31 	.word	0x08001e31
 8001dbc:	08001e31 	.word	0x08001e31
 8001dc0:	08001e31 	.word	0x08001e31
 8001dc4:	08001e31 	.word	0x08001e31
 8001dc8:	08001e31 	.word	0x08001e31
 8001dcc:	08001e31 	.word	0x08001e31
 8001dd0:	08001e31 	.word	0x08001e31
 8001dd4:	08001e31 	.word	0x08001e31
 8001dd8:	08001e31 	.word	0x08001e31
 8001ddc:	08001e31 	.word	0x08001e31
 8001de0:	08001e31 	.word	0x08001e31
 8001de4:	08001e31 	.word	0x08001e31
 8001de8:	08001e31 	.word	0x08001e31
 8001dec:	08001e31 	.word	0x08001e31
 8001df0:	08001e01 	.word	0x08001e01
 8001df4:	2b5c      	cmp	r3, #92	@ 0x5c
 8001df6:	d11b      	bne.n	8001e30 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	225c      	movs	r2, #92	@ 0x5c
 8001dfc:	701a      	strb	r2, [r3, #0]
                    break;
 8001dfe:	e022      	b.n	8001e46 <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	2222      	movs	r2, #34	@ 0x22
 8001e04:	701a      	strb	r2, [r3, #0]
                    break;
 8001e06:	e01e      	b.n	8001e46 <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	2262      	movs	r2, #98	@ 0x62
 8001e0c:	701a      	strb	r2, [r3, #0]
                    break;
 8001e0e:	e01a      	b.n	8001e46 <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	2266      	movs	r2, #102	@ 0x66
 8001e14:	701a      	strb	r2, [r3, #0]
                    break;
 8001e16:	e016      	b.n	8001e46 <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	226e      	movs	r2, #110	@ 0x6e
 8001e1c:	701a      	strb	r2, [r3, #0]
                    break;
 8001e1e:	e012      	b.n	8001e46 <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	2272      	movs	r2, #114	@ 0x72
 8001e24:	701a      	strb	r2, [r3, #0]
                    break;
 8001e26:	e00e      	b.n	8001e46 <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	2274      	movs	r2, #116	@ 0x74
 8001e2c:	701a      	strb	r2, [r3, #0]
                    break;
 8001e2e:	e00a      	b.n	8001e46 <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	4914      	ldr	r1, [pc, #80]	@ (8001e88 <print_string_ptr+0x25c>)
 8001e38:	69b8      	ldr	r0, [r7, #24]
 8001e3a:	f005 f91b 	bl	8007074 <siprintf>
                    output_pointer += 4;
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	3304      	adds	r3, #4
 8001e42:	61bb      	str	r3, [r7, #24]
                    break;
 8001e44:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	61fb      	str	r3, [r7, #28]
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	61bb      	str	r3, [r7, #24]
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f47f af74 	bne.w	8001d44 <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4413      	add	r3, r2
 8001e64:	2222      	movs	r2, #34	@ 0x22
 8001e66:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4413      	add	r3, r2
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]

    return true;
 8001e74:	2301      	movs	r3, #1
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3720      	adds	r7, #32
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	0800a37c 	.word	0x0800a37c
 8001e84:	04000037 	.word	0x04000037
 8001e88:	0800a380 	.word	0x0800a380

08001e8c <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	6839      	ldr	r1, [r7, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fec5 	bl	8001c2c <print_string_ptr>
 8001ea2:	4603      	mov	r3, r0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <buffer_skip_whitespace+0x16>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	e02c      	b.n	8001f20 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d005      	beq.n	8001ed8 <buffer_skip_whitespace+0x2c>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d306      	bcc.n	8001ee6 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	e021      	b.n	8001f20 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00d      	beq.n	8001f08 <buffer_skip_whitespace+0x5c>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d207      	bcs.n	8001f08 <buffer_skip_whitespace+0x5c>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	4413      	add	r3, r2
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b20      	cmp	r3, #32
 8001f06:	d9e9      	bls.n	8001edc <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d104      	bne.n	8001f1e <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	1e5a      	subs	r2, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001f1e:	687b      	ldr	r3, [r7, #4]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d007      	beq.n	8001f4a <skip_utf8_bom+0x1e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <skip_utf8_bom+0x1e>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <skip_utf8_bom+0x22>
    {
        return NULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	e01c      	b.n	8001f88 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d018      	beq.n	8001f86 <skip_utf8_bom+0x5a>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	1d1a      	adds	r2, r3, #4
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d211      	bcs.n	8001f86 <skip_utf8_bom+0x5a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	4908      	ldr	r1, [pc, #32]	@ (8001f90 <skip_utf8_bom+0x64>)
 8001f70:	4618      	mov	r0, r3
 8001f72:	f005 f9ab 	bl	80072cc <strncmp>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d104      	bne.n	8001f86 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	1cda      	adds	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001f86:	687b      	ldr	r3, [r7, #4]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	0800a388 	.word	0x0800a388

08001f94 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e00c      	b.n	8001fc4 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f7fe f970 	bl	8000290 <strlen>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	6979      	ldr	r1, [r7, #20]
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 f805 	bl	8001fcc <cJSON_ParseWithLengthOpts>
 8001fc2:	4603      	mov	r3, r0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08e      	sub	sp, #56	@ 0x38
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001fda:	f107 0318 	add.w	r3, r7, #24
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]
 8001fe8:	611a      	str	r2, [r3, #16]
 8001fea:	615a      	str	r2, [r3, #20]
 8001fec:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 8001ff2:	4b41      	ldr	r3, [pc, #260]	@ (80020f8 <cJSON_ParseWithLengthOpts+0x12c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001ff8:	4b3f      	ldr	r3, [pc, #252]	@ (80020f8 <cJSON_ParseWithLengthOpts+0x12c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d042      	beq.n	800208a <cJSON_ParseWithLengthOpts+0xbe>
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d03f      	beq.n	800208a <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8002016:	4a39      	ldr	r2, [pc, #228]	@ (80020fc <cJSON_ParseWithLengthOpts+0x130>)
 8002018:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800201c:	ca07      	ldmia	r2, {r0, r1, r2}
 800201e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8002022:	4836      	ldr	r0, [pc, #216]	@ (80020fc <cJSON_ParseWithLengthOpts+0x130>)
 8002024:	f7ff f840 	bl	80010a8 <cJSON_New_Item>
 8002028:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 800202a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800202c:	2b00      	cmp	r3, #0
 800202e:	d02e      	beq.n	800208e <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8002030:	f107 0318 	add.w	r3, r7, #24
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff79 	bl	8001f2c <skip_utf8_bom>
 800203a:	4603      	mov	r3, r0
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff35 	bl	8001eac <buffer_skip_whitespace>
 8002042:	4603      	mov	r3, r0
 8002044:	4619      	mov	r1, r3
 8002046:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002048:	f000 f902 	bl	8002250 <parse_value>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d01f      	beq.n	8002092 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00e      	beq.n	8002076 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8002058:	f107 0318 	add.w	r3, r7, #24
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff25 	bl	8001eac <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8002062:	6a3a      	ldr	r2, [r7, #32]
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	429a      	cmp	r2, r3
 8002068:	d215      	bcs.n	8002096 <cJSON_ParseWithLengthOpts+0xca>
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	4413      	add	r3, r2
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10f      	bne.n	8002096 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d004      	beq.n	8002086 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	441a      	add	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	601a      	str	r2, [r3, #0]
    }

    return item;
 8002086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002088:	e031      	b.n	80020ee <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800208a:	bf00      	nop
 800208c:	e004      	b.n	8002098 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800208e:	bf00      	nop
 8002090:	e002      	b.n	8002098 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8002092:	bf00      	nop
 8002094:	e000      	b.n	8002098 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8002096:	bf00      	nop

fail:
    if (item != NULL)
 8002098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800209e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80020a0:	f7ff f818 	bl	80010d4 <cJSON_Delete>
    }

    if (value != NULL)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d020      	beq.n	80020ec <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 80020b2:	6a3a      	ldr	r2, [r7, #32]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d202      	bcs.n	80020c0 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	e005      	b.n	80020cc <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3b01      	subs	r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d004      	beq.n	80020dc <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	441a      	add	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 80020dc:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <cJSON_ParseWithLengthOpts+0x12c>)
 80020de:	461a      	mov	r2, r3
 80020e0:	f107 0310 	add.w	r3, r7, #16
 80020e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020e8:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3738      	adds	r7, #56	@ 0x38
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200001fc 	.word	0x200001fc
 80020fc:	20000000 	.word	0x20000000

08002100 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8002108:	2200      	movs	r2, #0
 800210a:	2100      	movs	r1, #0
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ff41 	bl	8001f94 <cJSON_ParseWithOpts>
 8002112:	4603      	mov	r3, r0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08e      	sub	sp, #56	@ 0x38
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8002128:	2300      	movs	r3, #0
 800212a:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 800212c:	f107 0310 	add.w	r3, r7, #16
 8002130:	2224      	movs	r2, #36	@ 0x24
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f005 f8c1 	bl	80072bc <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a3b      	ldr	r2, [pc, #236]	@ (800222c <print+0x110>)
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	4610      	mov	r0, r2
 8002144:	4798      	blx	r3
 8002146:	4603      	mov	r3, r0
 8002148:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 800214a:	4b38      	ldr	r3, [pc, #224]	@ (800222c <print+0x110>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800215a:	ca07      	ldmia	r2, {r0, r1, r2}
 800215c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d042      	beq.n	80021ec <print+0xd0>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8002166:	f107 0310 	add.w	r3, r7, #16
 800216a:	4619      	mov	r1, r3
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 f95b 	bl	8002428 <print_value>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d03b      	beq.n	80021f0 <print+0xd4>
    {
        goto fail;
    }
    update_offset(buffer);
 8002178:	f107 0310 	add.w	r3, r7, #16
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff f969 	bl	8001454 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00d      	beq.n	80021a6 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	6938      	ldr	r0, [r7, #16]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	3201      	adds	r2, #1
 8002194:	4611      	mov	r1, r2
 8002196:	4798      	blx	r3
 8002198:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 800219a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800219c:	2b00      	cmp	r3, #0
 800219e:	d029      	beq.n	80021f4 <print+0xd8>
            goto fail;
        }
        buffer->buffer = NULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	e020      	b.n	80021e8 <print+0xcc>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	3201      	adds	r2, #1
 80021ae:	4610      	mov	r0, r2
 80021b0:	4798      	blx	r3
 80021b2:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 80021b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d01e      	beq.n	80021f8 <print+0xdc>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 80021ba:	6939      	ldr	r1, [r7, #16]
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	4293      	cmp	r3, r2
 80021c4:	bf28      	it	cs
 80021c6:	4613      	movcs	r3, r2
 80021c8:	461a      	mov	r2, r3
 80021ca:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80021cc:	f005 f917 	bl	80073fe <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80021d4:	4413      	add	r3, r2
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4610      	mov	r0, r2
 80021e2:	4798      	blx	r3
        buffer->buffer = NULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	613b      	str	r3, [r7, #16]
    }

    return printed;
 80021e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ea:	e01a      	b.n	8002222 <print+0x106>
        goto fail;
 80021ec:	bf00      	nop
 80021ee:	e004      	b.n	80021fa <print+0xde>
        goto fail;
 80021f0:	bf00      	nop
 80021f2:	e002      	b.n	80021fa <print+0xde>
            goto fail;
 80021f4:	bf00      	nop
 80021f6:	e000      	b.n	80021fa <print+0xde>
            goto fail;
 80021f8:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d006      	beq.n	800220e <print+0xf2>
    {
        hooks->deallocate(buffer->buffer);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4610      	mov	r0, r2
 8002208:	4798      	blx	r3
        buffer->buffer = NULL;
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
    }

    if (printed != NULL)
 800220e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <print+0x104>
    {
        hooks->deallocate(printed);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800221a:	4798      	blx	r3
        printed = NULL;
 800221c:	2300      	movs	r3, #0
 800221e:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    return NULL;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3738      	adds	r7, #56	@ 0x38
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	0800a57c 	.word	0x0800a57c

08002230 <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 8002238:	4a04      	ldr	r2, [pc, #16]	@ (800224c <cJSON_Print+0x1c>)
 800223a:	2101      	movs	r1, #1
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff ff6d 	bl	800211c <print>
 8002242:	4603      	mov	r3, r0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000000 	.word	0x20000000

08002250 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <parse_value+0x18>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <parse_value+0x1c>
    {
        return false; /* no input */
 8002268:	2300      	movs	r3, #0
 800226a:	e0d2      	b.n	8002412 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d01d      	beq.n	80022ae <parse_value+0x5e>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	1d1a      	adds	r2, r3, #4
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	d816      	bhi.n	80022ae <parse_value+0x5e>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	4413      	add	r3, r2
 800228a:	2204      	movs	r2, #4
 800228c:	4963      	ldr	r1, [pc, #396]	@ (800241c <parse_value+0x1cc>)
 800228e:	4618      	mov	r0, r3
 8002290:	f005 f81c 	bl	80072cc <strncmp>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d109      	bne.n	80022ae <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2204      	movs	r2, #4
 800229e:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	1d1a      	adds	r2, r3, #4
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	609a      	str	r2, [r3, #8]
        return true;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e0b1      	b.n	8002412 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d01d      	beq.n	80022f0 <parse_value+0xa0>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	1d5a      	adds	r2, r3, #5
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d816      	bhi.n	80022f0 <parse_value+0xa0>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	4413      	add	r3, r2
 80022cc:	2205      	movs	r2, #5
 80022ce:	4954      	ldr	r1, [pc, #336]	@ (8002420 <parse_value+0x1d0>)
 80022d0:	4618      	mov	r0, r3
 80022d2:	f004 fffb 	bl	80072cc <strncmp>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d109      	bne.n	80022f0 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	1d5a      	adds	r2, r3, #5
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	609a      	str	r2, [r3, #8]
        return true;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e090      	b.n	8002412 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d020      	beq.n	8002338 <parse_value+0xe8>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	1d1a      	adds	r2, r3, #4
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	429a      	cmp	r2, r3
 8002302:	d819      	bhi.n	8002338 <parse_value+0xe8>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4413      	add	r3, r2
 800230e:	2204      	movs	r2, #4
 8002310:	4944      	ldr	r1, [pc, #272]	@ (8002424 <parse_value+0x1d4>)
 8002312:	4618      	mov	r0, r3
 8002314:	f004 ffda 	bl	80072cc <strncmp>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10c      	bne.n	8002338 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2202      	movs	r2, #2
 8002322:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	1d1a      	adds	r2, r3, #4
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	609a      	str	r2, [r3, #8]
        return true;
 8002334:	2301      	movs	r3, #1
 8002336:	e06c      	b.n	8002412 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d013      	beq.n	8002366 <parse_value+0x116>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	429a      	cmp	r2, r3
 8002348:	d20d      	bcs.n	8002366 <parse_value+0x116>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	4413      	add	r3, r2
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b22      	cmp	r3, #34	@ 0x22
 8002358:	d105      	bne.n	8002366 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800235a:	6839      	ldr	r1, [r7, #0]
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff fb1d 	bl	800199c <parse_string>
 8002362:	4603      	mov	r3, r0
 8002364:	e055      	b.n	8002412 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d023      	beq.n	80023b4 <parse_value+0x164>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	429a      	cmp	r2, r3
 8002376:	d21d      	bcs.n	80023b4 <parse_value+0x164>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	4413      	add	r3, r2
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b2d      	cmp	r3, #45	@ 0x2d
 8002386:	d00f      	beq.n	80023a8 <parse_value+0x158>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	4413      	add	r3, r2
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b2f      	cmp	r3, #47	@ 0x2f
 8002396:	d90d      	bls.n	80023b4 <parse_value+0x164>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4413      	add	r3, r2
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b39      	cmp	r3, #57	@ 0x39
 80023a6:	d805      	bhi.n	80023b4 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 80023a8:	6839      	ldr	r1, [r7, #0]
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7fe feec 	bl	8001188 <parse_number>
 80023b0:	4603      	mov	r3, r0
 80023b2:	e02e      	b.n	8002412 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d013      	beq.n	80023e2 <parse_value+0x192>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d20d      	bcs.n	80023e2 <parse_value+0x192>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	4413      	add	r3, r2
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b5b      	cmp	r3, #91	@ 0x5b
 80023d4:	d105      	bne.n	80023e2 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 80023d6:	6839      	ldr	r1, [r7, #0]
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f909 	bl	80025f0 <parse_array>
 80023de:	4603      	mov	r3, r0
 80023e0:	e017      	b.n	8002412 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d013      	beq.n	8002410 <parse_value+0x1c0>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d20d      	bcs.n	8002410 <parse_value+0x1c0>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	4413      	add	r3, r2
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b7b      	cmp	r3, #123	@ 0x7b
 8002402:	d105      	bne.n	8002410 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8002404:	6839      	ldr	r1, [r7, #0]
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fa3c 	bl	8002884 <parse_object>
 800240c:	4603      	mov	r3, r0
 800240e:	e000      	b.n	8002412 <parse_value+0x1c2>
    }

    return false;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	0800a35c 	.word	0x0800a35c
 8002420:	0800a38c 	.word	0x0800a38c
 8002424:	0800a394 	.word	0x0800a394

08002428 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <print_value+0x1a>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <print_value+0x1e>
    {
        return false;
 8002442:	2300      	movs	r3, #0
 8002444:	e0c9      	b.n	80025da <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b80      	cmp	r3, #128	@ 0x80
 800244e:	f000 808e 	beq.w	800256e <print_value+0x146>
 8002452:	2b80      	cmp	r3, #128	@ 0x80
 8002454:	f300 80c0 	bgt.w	80025d8 <print_value+0x1b0>
 8002458:	2b20      	cmp	r3, #32
 800245a:	dc49      	bgt.n	80024f0 <print_value+0xc8>
 800245c:	2b00      	cmp	r3, #0
 800245e:	f340 80bb 	ble.w	80025d8 <print_value+0x1b0>
 8002462:	3b01      	subs	r3, #1
 8002464:	2b1f      	cmp	r3, #31
 8002466:	f200 80b7 	bhi.w	80025d8 <print_value+0x1b0>
 800246a:	a201      	add	r2, pc, #4	@ (adr r2, 8002470 <print_value+0x48>)
 800246c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002470:	0800251b 	.word	0x0800251b
 8002474:	0800253f 	.word	0x0800253f
 8002478:	080025d9 	.word	0x080025d9
 800247c:	080024f7 	.word	0x080024f7
 8002480:	080025d9 	.word	0x080025d9
 8002484:	080025d9 	.word	0x080025d9
 8002488:	080025d9 	.word	0x080025d9
 800248c:	08002563 	.word	0x08002563
 8002490:	080025d9 	.word	0x080025d9
 8002494:	080025d9 	.word	0x080025d9
 8002498:	080025d9 	.word	0x080025d9
 800249c:	080025d9 	.word	0x080025d9
 80024a0:	080025d9 	.word	0x080025d9
 80024a4:	080025d9 	.word	0x080025d9
 80024a8:	080025d9 	.word	0x080025d9
 80024ac:	080025b5 	.word	0x080025b5
 80024b0:	080025d9 	.word	0x080025d9
 80024b4:	080025d9 	.word	0x080025d9
 80024b8:	080025d9 	.word	0x080025d9
 80024bc:	080025d9 	.word	0x080025d9
 80024c0:	080025d9 	.word	0x080025d9
 80024c4:	080025d9 	.word	0x080025d9
 80024c8:	080025d9 	.word	0x080025d9
 80024cc:	080025d9 	.word	0x080025d9
 80024d0:	080025d9 	.word	0x080025d9
 80024d4:	080025d9 	.word	0x080025d9
 80024d8:	080025d9 	.word	0x080025d9
 80024dc:	080025d9 	.word	0x080025d9
 80024e0:	080025d9 	.word	0x080025d9
 80024e4:	080025d9 	.word	0x080025d9
 80024e8:	080025d9 	.word	0x080025d9
 80024ec:	080025c1 	.word	0x080025c1
 80024f0:	2b40      	cmp	r3, #64	@ 0x40
 80024f2:	d06b      	beq.n	80025cc <print_value+0x1a4>
 80024f4:	e070      	b.n	80025d8 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 80024f6:	2105      	movs	r1, #5
 80024f8:	6838      	ldr	r0, [r7, #0]
 80024fa:	f7fe ff11 	bl	8001320 <ensure>
 80024fe:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <print_value+0xe2>
            {
                return false;
 8002506:	2300      	movs	r3, #0
 8002508:	e067      	b.n	80025da <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4a35      	ldr	r2, [pc, #212]	@ (80025e4 <print_value+0x1bc>)
 800250e:	6810      	ldr	r0, [r2, #0]
 8002510:	6018      	str	r0, [r3, #0]
 8002512:	7912      	ldrb	r2, [r2, #4]
 8002514:	711a      	strb	r2, [r3, #4]
            return true;
 8002516:	2301      	movs	r3, #1
 8002518:	e05f      	b.n	80025da <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 800251a:	2106      	movs	r1, #6
 800251c:	6838      	ldr	r0, [r7, #0]
 800251e:	f7fe feff 	bl	8001320 <ensure>
 8002522:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <print_value+0x106>
            {
                return false;
 800252a:	2300      	movs	r3, #0
 800252c:	e055      	b.n	80025da <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	4a2d      	ldr	r2, [pc, #180]	@ (80025e8 <print_value+0x1c0>)
 8002532:	6810      	ldr	r0, [r2, #0]
 8002534:	6018      	str	r0, [r3, #0]
 8002536:	8892      	ldrh	r2, [r2, #4]
 8002538:	809a      	strh	r2, [r3, #4]
            return true;
 800253a:	2301      	movs	r3, #1
 800253c:	e04d      	b.n	80025da <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 800253e:	2105      	movs	r1, #5
 8002540:	6838      	ldr	r0, [r7, #0]
 8002542:	f7fe feed 	bl	8001320 <ensure>
 8002546:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <print_value+0x12a>
            {
                return false;
 800254e:	2300      	movs	r3, #0
 8002550:	e043      	b.n	80025da <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4a25      	ldr	r2, [pc, #148]	@ (80025ec <print_value+0x1c4>)
 8002556:	6810      	ldr	r0, [r2, #0]
 8002558:	6018      	str	r0, [r3, #0]
 800255a:	7912      	ldrb	r2, [r2, #4]
 800255c:	711a      	strb	r2, [r3, #4]
            return true;
 800255e:	2301      	movs	r3, #1
 8002560:	e03b      	b.n	80025da <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 8002562:	6839      	ldr	r1, [r7, #0]
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7fe ffdf 	bl	8001528 <print_number>
 800256a:	4603      	mov	r3, r0
 800256c:	e035      	b.n	80025da <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <print_value+0x156>
            {
                return false;
 800257a:	2300      	movs	r3, #0
 800257c:	e02d      	b.n	80025da <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fd fe84 	bl	8000290 <strlen>
 8002588:	4603      	mov	r3, r0
 800258a:	3301      	adds	r3, #1
 800258c:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 800258e:	68b9      	ldr	r1, [r7, #8]
 8002590:	6838      	ldr	r0, [r7, #0]
 8002592:	f7fe fec5 	bl	8001320 <ensure>
 8002596:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <print_value+0x17a>
            {
                return false;
 800259e:	2300      	movs	r3, #0
 80025a0:	e01b      	b.n	80025da <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	4619      	mov	r1, r3
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f004 ff27 	bl	80073fe <memcpy>
            return true;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e012      	b.n	80025da <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 80025b4:	6839      	ldr	r1, [r7, #0]
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7ff fc68 	bl	8001e8c <print_string>
 80025bc:	4603      	mov	r3, r0
 80025be:	e00c      	b.n	80025da <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 80025c0:	6839      	ldr	r1, [r7, #0]
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f8d8 	bl	8002778 <print_array>
 80025c8:	4603      	mov	r3, r0
 80025ca:	e006      	b.n	80025da <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 80025cc:	6839      	ldr	r1, [r7, #0]
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 fa64 	bl	8002a9c <print_object>
 80025d4:	4603      	mov	r3, r0
 80025d6:	e000      	b.n	80025da <print_value+0x1b2>

        default:
            return false;
 80025d8:	2300      	movs	r3, #0
    }
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	0800a35c 	.word	0x0800a35c
 80025e8:	0800a38c 	.word	0x0800a38c
 80025ec:	0800a394 	.word	0x0800a394

080025f0 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800260a:	d301      	bcc.n	8002610 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 800260c:	2300      	movs	r3, #0
 800260e:	e0af      	b.n	8002770 <parse_array+0x180>
    }
    input_buffer->depth++;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	4413      	add	r3, r2
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b5b      	cmp	r3, #91	@ 0x5b
 8002628:	f040 8094 	bne.w	8002754 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002636:	6838      	ldr	r0, [r7, #0]
 8002638:	f7ff fc38 	bl	8001eac <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00d      	beq.n	800265e <parse_array+0x6e>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	429a      	cmp	r2, r3
 800264c:	d207      	bcs.n	800265e <parse_array+0x6e>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	4413      	add	r3, r2
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b5d      	cmp	r3, #93	@ 0x5d
 800265c:	d061      	beq.n	8002722 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <parse_array+0x80>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	429a      	cmp	r2, r3
 800266e:	d305      	bcc.n	800267c <parse_array+0x8c>
    {
        input_buffer->offset--;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	1e5a      	subs	r2, r3, #1
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	609a      	str	r2, [r3, #8]
        goto fail;
 800267a:	e072      	b.n	8002762 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	1e5a      	subs	r2, r3, #1
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	3310      	adds	r3, #16
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe fd0c 	bl	80010a8 <cJSON_New_Item>
 8002690:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d05f      	beq.n	8002758 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d104      	bne.n	80026a8 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	e007      	b.n	80026b8 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80026c2:	6838      	ldr	r0, [r7, #0]
 80026c4:	f7ff fbf2 	bl	8001eac <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80026c8:	6839      	ldr	r1, [r7, #0]
 80026ca:	6938      	ldr	r0, [r7, #16]
 80026cc:	f7ff fdc0 	bl	8002250 <parse_value>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d042      	beq.n	800275c <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80026d6:	6838      	ldr	r0, [r7, #0]
 80026d8:	f7ff fbe8 	bl	8001eac <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00d      	beq.n	80026fe <parse_array+0x10e>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d207      	bcs.n	80026fe <parse_array+0x10e>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	4413      	add	r3, r2
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b2c      	cmp	r3, #44	@ 0x2c
 80026fc:	d0c3      	beq.n	8002686 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d02d      	beq.n	8002760 <parse_array+0x170>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	429a      	cmp	r2, r3
 800270e:	d227      	bcs.n	8002760 <parse_array+0x170>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	4413      	add	r3, r2
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b5d      	cmp	r3, #93	@ 0x5d
 800271e:	d11f      	bne.n	8002760 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8002720:	e000      	b.n	8002724 <parse_array+0x134>
        goto success;
 8002722:	bf00      	nop
    input_buffer->depth--;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	1e5a      	subs	r2, r3, #1
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <parse_array+0x14a>
        head->prev = current_item;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2220      	movs	r2, #32
 800273e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	1c5a      	adds	r2, r3, #1
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	609a      	str	r2, [r3, #8]

    return true;
 8002750:	2301      	movs	r3, #1
 8002752:	e00d      	b.n	8002770 <parse_array+0x180>
        goto fail;
 8002754:	bf00      	nop
 8002756:	e004      	b.n	8002762 <parse_array+0x172>
            goto fail; /* allocation failure */
 8002758:	bf00      	nop
 800275a:	e002      	b.n	8002762 <parse_array+0x172>
            goto fail; /* failed to parse value */
 800275c:	bf00      	nop
 800275e:	e000      	b.n	8002762 <parse_array+0x172>
        goto fail; /* expected end of array */
 8002760:	bf00      	nop

fail:
    if (head != NULL)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d002      	beq.n	800276e <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8002768:	6978      	ldr	r0, [r7, #20]
 800276a:	f7fe fcb3 	bl	80010d4 <cJSON_Delete>
    }

    return false;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <print_array+0x22>
    {
        return false;
 8002796:	2300      	movs	r3, #0
 8002798:	e070      	b.n	800287c <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800279a:	2101      	movs	r1, #1
 800279c:	6838      	ldr	r0, [r7, #0]
 800279e:	f7fe fdbf 	bl	8001320 <ensure>
 80027a2:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <print_array+0x36>
    {
        return false;
 80027aa:	2300      	movs	r3, #0
 80027ac:	e066      	b.n	800287c <print_array+0x104>
    }

    *output_pointer = '[';
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	225b      	movs	r2, #91	@ 0x5b
 80027b2:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 80027c8:	e03d      	b.n	8002846 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 80027ca:	6839      	ldr	r1, [r7, #0]
 80027cc:	6938      	ldr	r0, [r7, #16]
 80027ce:	f7ff fe2b 	bl	8002428 <print_value>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <print_array+0x64>
        {
            return false;
 80027d8:	2300      	movs	r3, #0
 80027da:	e04f      	b.n	800287c <print_array+0x104>
        }
        update_offset(output_buffer);
 80027dc:	6838      	ldr	r0, [r7, #0]
 80027de:	f7fe fe39 	bl	8001454 <update_offset>
        if (current_element->next)
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d02a      	beq.n	8002840 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <print_array+0x7e>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e000      	b.n	80027f8 <print_array+0x80>
 80027f6:	2301      	movs	r3, #1
 80027f8:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	3301      	adds	r3, #1
 80027fe:	4619      	mov	r1, r3
 8002800:	6838      	ldr	r0, [r7, #0]
 8002802:	f7fe fd8d 	bl	8001320 <ensure>
 8002806:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <print_array+0x9a>
            {
                return false;
 800280e:	2300      	movs	r3, #0
 8002810:	e034      	b.n	800287c <print_array+0x104>
            }
            *output_pointer++ = ',';
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	617a      	str	r2, [r7, #20]
 8002818:	222c      	movs	r2, #44	@ 0x2c
 800281a:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d004      	beq.n	800282e <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	617a      	str	r2, [r7, #20]
 800282a:	2220      	movs	r2, #32
 800282c:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2200      	movs	r2, #0
 8002832:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	441a      	add	r2, r3
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1be      	bne.n	80027ca <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 800284c:	2102      	movs	r1, #2
 800284e:	6838      	ldr	r0, [r7, #0]
 8002850:	f7fe fd66 	bl	8001320 <ensure>
 8002854:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <print_array+0xe8>
    {
        return false;
 800285c:	2300      	movs	r3, #0
 800285e:	e00d      	b.n	800287c <print_array+0x104>
    }
    *output_pointer++ = ']';
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	617a      	str	r2, [r7, #20]
 8002866:	225d      	movs	r2, #93	@ 0x5d
 8002868:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	1e5a      	subs	r2, r3, #1
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	60da      	str	r2, [r3, #12]

    return true;
 800287a:	2301      	movs	r3, #1
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800289e:	d301      	bcc.n	80028a4 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 80028a0:	2300      	movs	r3, #0
 80028a2:	e0f7      	b.n	8002a94 <parse_object+0x210>
    }
    input_buffer->depth++;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80db 	beq.w	8002a6c <parse_object+0x1e8>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	429a      	cmp	r2, r3
 80028c0:	f080 80d4 	bcs.w	8002a6c <parse_object+0x1e8>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4413      	add	r3, r2
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b7b      	cmp	r3, #123	@ 0x7b
 80028d2:	f040 80cb 	bne.w	8002a6c <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80028e0:	6838      	ldr	r0, [r7, #0]
 80028e2:	f7ff fae3 	bl	8001eac <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00e      	beq.n	800290a <parse_object+0x86>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d208      	bcs.n	800290a <parse_object+0x86>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	4413      	add	r3, r2
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b7d      	cmp	r3, #125	@ 0x7d
 8002906:	f000 8098 	beq.w	8002a3a <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d005      	beq.n	800291c <parse_object+0x98>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	429a      	cmp	r2, r3
 800291a:	d305      	bcc.n	8002928 <parse_object+0xa4>
    {
        input_buffer->offset--;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	1e5a      	subs	r2, r3, #1
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	609a      	str	r2, [r3, #8]
        goto fail;
 8002926:	e0ae      	b.n	8002a86 <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	1e5a      	subs	r2, r3, #1
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	3310      	adds	r3, #16
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe fbb6 	bl	80010a8 <cJSON_New_Item>
 800293c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 8095 	beq.w	8002a70 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d104      	bne.n	8002956 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	e007      	b.n	8002966 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 8083 	beq.w	8002a74 <parse_object+0x1f0>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	429a      	cmp	r2, r3
 800297a:	d27b      	bcs.n	8002a74 <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002986:	6838      	ldr	r0, [r7, #0]
 8002988:	f7ff fa90 	bl	8001eac <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800298c:	6839      	ldr	r1, [r7, #0]
 800298e:	6938      	ldr	r0, [r7, #16]
 8002990:	f7ff f804 	bl	800199c <parse_string>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d06e      	beq.n	8002a78 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800299a:	6838      	ldr	r0, [r7, #0]
 800299c:	f7ff fa86 	bl	8001eac <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	2200      	movs	r2, #0
 80029ac:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d063      	beq.n	8002a7c <parse_object+0x1f8>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d25d      	bcs.n	8002a7c <parse_object+0x1f8>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4413      	add	r3, r2
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b3a      	cmp	r3, #58	@ 0x3a
 80029ce:	d155      	bne.n	8002a7c <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80029da:	6838      	ldr	r0, [r7, #0]
 80029dc:	f7ff fa66 	bl	8001eac <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80029e0:	6839      	ldr	r1, [r7, #0]
 80029e2:	6938      	ldr	r0, [r7, #16]
 80029e4:	f7ff fc34 	bl	8002250 <parse_value>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d048      	beq.n	8002a80 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80029ee:	6838      	ldr	r0, [r7, #0]
 80029f0:	f7ff fa5c 	bl	8001eac <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00d      	beq.n	8002a16 <parse_object+0x192>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d207      	bcs.n	8002a16 <parse_object+0x192>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	4413      	add	r3, r2
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b2c      	cmp	r3, #44	@ 0x2c
 8002a14:	d08d      	beq.n	8002932 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d033      	beq.n	8002a84 <parse_object+0x200>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d22d      	bcs.n	8002a84 <parse_object+0x200>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	4413      	add	r3, r2
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b7d      	cmp	r3, #125	@ 0x7d
 8002a36:	d125      	bne.n	8002a84 <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 8002a38:	e000      	b.n	8002a3c <parse_object+0x1b8>
        goto success; /* empty object */
 8002a3a:	bf00      	nop
    input_buffer->depth--;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	1e5a      	subs	r2, r3, #1
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <parse_object+0x1ce>
        head->prev = current_item;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2240      	movs	r2, #64	@ 0x40
 8002a56:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	609a      	str	r2, [r3, #8]
    return true;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e013      	b.n	8002a94 <parse_object+0x210>
        goto fail; /* not an object */
 8002a6c:	bf00      	nop
 8002a6e:	e00a      	b.n	8002a86 <parse_object+0x202>
            goto fail; /* allocation failure */
 8002a70:	bf00      	nop
 8002a72:	e008      	b.n	8002a86 <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 8002a74:	bf00      	nop
 8002a76:	e006      	b.n	8002a86 <parse_object+0x202>
            goto fail; /* failed to parse name */
 8002a78:	bf00      	nop
 8002a7a:	e004      	b.n	8002a86 <parse_object+0x202>
            goto fail; /* invalid object */
 8002a7c:	bf00      	nop
 8002a7e:	e002      	b.n	8002a86 <parse_object+0x202>
            goto fail; /* failed to parse value */
 8002a80:	bf00      	nop
 8002a82:	e000      	b.n	8002a86 <parse_object+0x202>
        goto fail; /* expected end of object */
 8002a84:	bf00      	nop

fail:
    if (head != NULL)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <parse_object+0x20e>
    {
        cJSON_Delete(head);
 8002a8c:	6978      	ldr	r0, [r7, #20]
 8002a8e:	f7fe fb21 	bl	80010d4 <cJSON_Delete>
    }

    return false;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <print_object+0x22>
    {
        return false;
 8002aba:	2300      	movs	r3, #0
 8002abc:	e108      	b.n	8002cd0 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <print_object+0x2e>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e000      	b.n	8002acc <print_object+0x30>
 8002aca:	2301      	movs	r3, #1
 8002acc:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	6838      	ldr	r0, [r7, #0]
 8002ad6:	f7fe fc23 	bl	8001320 <ensure>
 8002ada:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <print_object+0x4a>
    {
        return false;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e0f4      	b.n	8002cd0 <print_object+0x234>
    }

    *output_pointer++ = '{';
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	61fa      	str	r2, [r7, #28]
 8002aec:	227b      	movs	r2, #123	@ 0x7b
 8002aee:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d004      	beq.n	8002b0c <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	61fa      	str	r2, [r7, #28]
 8002b08:	220a      	movs	r2, #10
 8002b0a:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	441a      	add	r2, r3
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	609a      	str	r2, [r3, #8]

    while (current_item)
 8002b18:	e0a0      	b.n	8002c5c <print_object+0x1c0>
    {
        if (output_buffer->format)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d022      	beq.n	8002b68 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	4619      	mov	r1, r3
 8002b28:	6838      	ldr	r0, [r7, #0]
 8002b2a:	f7fe fbf9 	bl	8001320 <ensure>
 8002b2e:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <print_object+0x9e>
            {
                return false;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e0ca      	b.n	8002cd0 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	e007      	b.n	8002b50 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	1c5a      	adds	r2, r3, #1
 8002b44:	61fa      	str	r2, [r7, #28]
 8002b46:	2209      	movs	r2, #9
 8002b48:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d3f2      	bcc.n	8002b40 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	441a      	add	r2, r3
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	6839      	ldr	r1, [r7, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff f85c 	bl	8001c2c <print_string_ptr>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <print_object+0xe2>
        {
            return false;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e0a8      	b.n	8002cd0 <print_object+0x234>
        }
        update_offset(output_buffer);
 8002b7e:	6838      	ldr	r0, [r7, #0]
 8002b80:	f7fe fc68 	bl	8001454 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <print_object+0xf4>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e000      	b.n	8002b92 <print_object+0xf6>
 8002b90:	2301      	movs	r3, #1
 8002b92:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8002b94:	68f9      	ldr	r1, [r7, #12]
 8002b96:	6838      	ldr	r0, [r7, #0]
 8002b98:	f7fe fbc2 	bl	8001320 <ensure>
 8002b9c:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <print_object+0x10c>
        {
            return false;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e093      	b.n	8002cd0 <print_object+0x234>
        }
        *output_pointer++ = ':';
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	61fa      	str	r2, [r7, #28]
 8002bae:	223a      	movs	r2, #58	@ 0x3a
 8002bb0:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d004      	beq.n	8002bc4 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	61fa      	str	r2, [r7, #28]
 8002bc0:	2209      	movs	r2, #9
 8002bc2:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	441a      	add	r2, r3
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8002bd0:	6839      	ldr	r1, [r7, #0]
 8002bd2:	69b8      	ldr	r0, [r7, #24]
 8002bd4:	f7ff fc28 	bl	8002428 <print_value>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <print_object+0x146>
        {
            return false;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e076      	b.n	8002cd0 <print_object+0x234>
        }
        update_offset(output_buffer);
 8002be2:	6838      	ldr	r0, [r7, #0]
 8002be4:	f7fe fc36 	bl	8001454 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <print_object+0x158>
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	e000      	b.n	8002bf6 <print_object+0x15a>
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <print_object+0x166>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <print_object+0x168>
 8002c02:	2300      	movs	r3, #0
 8002c04:	4413      	add	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	6838      	ldr	r0, [r7, #0]
 8002c10:	f7fe fb86 	bl	8001320 <ensure>
 8002c14:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <print_object+0x184>
        {
            return false;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	e057      	b.n	8002cd0 <print_object+0x234>
        }
        if (current_item->next)
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d004      	beq.n	8002c32 <print_object+0x196>
        {
            *output_pointer++ = ',';
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	61fa      	str	r2, [r7, #28]
 8002c2e:	222c      	movs	r2, #44	@ 0x2c
 8002c30:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d004      	beq.n	8002c44 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	61fa      	str	r2, [r7, #28]
 8002c40:	220a      	movs	r2, #10
 8002c42:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	2200      	movs	r2, #0
 8002c48:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	441a      	add	r2, r3
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f47f af5b 	bne.w	8002b1a <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <print_object+0x1d8>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	3301      	adds	r3, #1
 8002c72:	e000      	b.n	8002c76 <print_object+0x1da>
 8002c74:	2302      	movs	r3, #2
 8002c76:	4619      	mov	r1, r3
 8002c78:	6838      	ldr	r0, [r7, #0]
 8002c7a:	f7fe fb51 	bl	8001320 <ensure>
 8002c7e:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <print_object+0x1ee>
    {
        return false;
 8002c86:	2300      	movs	r3, #0
 8002c88:	e022      	b.n	8002cd0 <print_object+0x234>
    }
    if (output_buffer->format)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d010      	beq.n	8002cb4 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002c92:	2300      	movs	r3, #0
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	e007      	b.n	8002ca8 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	61fa      	str	r2, [r7, #28]
 8002c9e:	2209      	movs	r2, #9
 8002ca0:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	613b      	str	r3, [r7, #16]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	3b01      	subs	r3, #1
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d3f1      	bcc.n	8002c98 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	61fa      	str	r2, [r7, #28]
 8002cba:	227d      	movs	r2, #125	@ 0x7d
 8002cbc:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	1e5a      	subs	r2, r3, #1
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	60da      	str	r2, [r3, #12]

    return true;
 8002cce:	2301      	movs	r3, #1
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3720      	adds	r7, #32
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d002      	beq.n	8002cf4 <get_object_item+0x1c>
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <get_object_item+0x20>
    {
        return NULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	e033      	b.n	8002d60 <get_object_item+0x88>
    }

    current_element = object->child;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d017      	beq.n	8002d34 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002d04:	e002      	b.n	8002d0c <get_object_item+0x34>
        {
            current_element = current_element->next;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d01c      	beq.n	8002d4c <get_object_item+0x74>
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d018      	beq.n	8002d4c <get_object_item+0x74>
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	4619      	mov	r1, r3
 8002d20:	68b8      	ldr	r0, [r7, #8]
 8002d22:	f7fd fa55 	bl	80001d0 <strcmp>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ec      	bne.n	8002d06 <get_object_item+0x2e>
 8002d2c:	e00e      	b.n	8002d4c <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d008      	beq.n	8002d4c <get_object_item+0x74>
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	4619      	mov	r1, r3
 8002d40:	68b8      	ldr	r0, [r7, #8]
 8002d42:	f7fe f91d 	bl	8000f80 <case_insensitive_strcmp>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f0      	bne.n	8002d2e <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <get_object_item+0x82>
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <get_object_item+0x86>
        return NULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	e000      	b.n	8002d60 <get_object_item+0x88>
    }

    return current_element;
 8002d5e:	697b      	ldr	r3, [r7, #20]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 8002d72:	2201      	movs	r2, #1
 8002d74:	6839      	ldr	r1, [r7, #0]
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff ffae 	bl	8002cd8 <get_object_item>
 8002d7c:	4603      	mov	r3, r0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	605a      	str	r2, [r3, #4]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d006      	beq.n	8002dca <add_item_to_array+0x22>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <add_item_to_array+0x22>
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d101      	bne.n	8002dce <add_item_to_array+0x26>
    {
        return false;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	e01e      	b.n	8002e0c <add_item_to_array+0x64>
    }

    child = array->child;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d109      	bne.n	8002dee <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	e00d      	b.n	8002e0a <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	6839      	ldr	r1, [r7, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff ffc2 	bl	8002d86 <suffix_object>
            array->child->prev = item;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8002e0a:	2301      	movs	r3, #1
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <cJSON_AddItemToArray>:

/* Add item to array/object. */
CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToArray(cJSON *array, cJSON *item)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
    return add_item_to_array(array, item);
 8002e1e:	6839      	ldr	r1, [r7, #0]
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff ffc1 	bl	8002da8 <add_item_to_array>
 8002e26:	4603      	mov	r3, r0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8002e38:	687b      	ldr	r3, [r7, #4]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b086      	sub	sp, #24
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d009      	beq.n	8002e76 <add_item_to_object+0x30>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d006      	beq.n	8002e76 <add_item_to_object+0x30>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <add_item_to_object+0x30>
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d101      	bne.n	8002e7a <add_item_to_object+0x34>
    {
        return false;
 8002e76:	2300      	movs	r3, #0
 8002e78:	e036      	b.n	8002ee8 <add_item_to_object+0xa2>
    }

    if (constant_key)
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d009      	beq.n	8002e94 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 8002e80:	68b8      	ldr	r0, [r7, #8]
 8002e82:	f7ff ffd5 	bl	8002e30 <cast_away_const>
 8002e86:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	e00e      	b.n	8002eb2 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8002e94:	6839      	ldr	r1, [r7, #0]
 8002e96:	68b8      	ldr	r0, [r7, #8]
 8002e98:	f7fe f8de 	bl	8001058 <cJSON_strdup>
 8002e9c:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <add_item_to_object+0x62>
        {
            return false;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	e01f      	b.n	8002ee8 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002eb0:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d109      	bne.n	8002ed2 <add_item_to_object+0x8c>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d005      	beq.n	8002ed2 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6a12      	ldr	r2, [r2, #32]
 8002ece:	4610      	mov	r0, r2
 8002ed0:	4798      	blx	r3
    }

    item->string = new_key;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f7ff ff61 	bl	8002da8 <add_item_to_array>
 8002ee6:	4603      	mov	r3, r0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <cJSON_AddItemToObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
    return add_item_to_object(object, string, item, &global_hooks, false);
 8002efc:	2300      	movs	r3, #0
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	4b05      	ldr	r3, [pc, #20]	@ (8002f18 <cJSON_AddItemToObject+0x28>)
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f7ff ff9d 	bl	8002e46 <add_item_to_object>
 8002f0c:	4603      	mov	r3, r0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000000 	.word	0x20000000

08002f1c <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 8002f2a:	ed97 0b00 	vldr	d0, [r7]
 8002f2e:	f000 f81b 	bl	8002f68 <cJSON_CreateNumber>
 8002f32:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 8002f34:	2300      	movs	r3, #0
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	4b09      	ldr	r3, [pc, #36]	@ (8002f60 <cJSON_AddNumberToObject+0x44>)
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	68b9      	ldr	r1, [r7, #8]
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f7ff ff81 	bl	8002e46 <add_item_to_object>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	e003      	b.n	8002f56 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 8002f4e:	6978      	ldr	r0, [r7, #20]
 8002f50:	f7fe f8c0 	bl	80010d4 <cJSON_Delete>
    return NULL;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000000 	.word	0x20000000
 8002f64:	00000000 	.word	0x00000000

08002f68 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8002f72:	481f      	ldr	r0, [pc, #124]	@ (8002ff0 <cJSON_CreateNumber+0x88>)
 8002f74:	f7fe f898 	bl	80010a8 <cJSON_New_Item>
 8002f78:	60f8      	str	r0, [r7, #12]
    if(item)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d02c      	beq.n	8002fda <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2208      	movs	r2, #8
 8002f84:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8002f86:	68f9      	ldr	r1, [r7, #12]
 8002f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f8c:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8002f90:	a315      	add	r3, pc, #84	@ (adr r3, 8002fe8 <cJSON_CreateNumber+0x80>)
 8002f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f9a:	f7fd fdc3 	bl	8000b24 <__aeabi_dcmpge>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d004      	beq.n	8002fae <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002faa:	615a      	str	r2, [r3, #20]
 8002fac:	e015      	b.n	8002fda <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	4b10      	ldr	r3, [pc, #64]	@ (8002ff4 <cJSON_CreateNumber+0x8c>)
 8002fb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fb8:	f7fd fdaa 	bl	8000b10 <__aeabi_dcmple>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d004      	beq.n	8002fcc <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002fc8:	615a      	str	r2, [r3, #20]
 8002fca:	e006      	b.n	8002fda <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 8002fcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fd0:	f7fd fdd2 	bl	8000b78 <__aeabi_d2iz>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8002fda:	68fb      	ldr	r3, [r7, #12]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	f3af 8000 	nop.w
 8002fe8:	ffc00000 	.word	0xffc00000
 8002fec:	41dfffff 	.word	0x41dfffff
 8002ff0:	20000000 	.word	0x20000000
 8002ff4:	c1e00000 	.word	0xc1e00000

08002ff8 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8003000:	480f      	ldr	r0, [pc, #60]	@ (8003040 <cJSON_CreateString+0x48>)
 8003002:	f7fe f851 	bl	80010a8 <cJSON_New_Item>
 8003006:	60f8      	str	r0, [r7, #12]
    if(item)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d012      	beq.n	8003034 <cJSON_CreateString+0x3c>
    {
        item->type = cJSON_String;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2210      	movs	r2, #16
 8003012:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 8003014:	490a      	ldr	r1, [pc, #40]	@ (8003040 <cJSON_CreateString+0x48>)
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fe f81e 	bl	8001058 <cJSON_strdup>
 800301c:	4602      	mov	r2, r0
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d104      	bne.n	8003034 <cJSON_CreateString+0x3c>
        {
            cJSON_Delete(item);
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f7fe f852 	bl	80010d4 <cJSON_Delete>
            return NULL;
 8003030:	2300      	movs	r3, #0
 8003032:	e000      	b.n	8003036 <cJSON_CreateString+0x3e>
        }
    }

    return item;
 8003034:	68fb      	ldr	r3, [r7, #12]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000000 	.word	0x20000000

08003044 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 800304a:	4807      	ldr	r0, [pc, #28]	@ (8003068 <cJSON_CreateArray+0x24>)
 800304c:	f7fe f82c 	bl	80010a8 <cJSON_New_Item>
 8003050:	6078      	str	r0, [r7, #4]
    if(item)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d002      	beq.n	800305e <cJSON_CreateArray+0x1a>
    {
        item->type=cJSON_Array;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2220      	movs	r2, #32
 800305c:	60da      	str	r2, [r3, #12]
    }

    return item;
 800305e:	687b      	ldr	r3, [r7, #4]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	20000000 	.word	0x20000000

0800306c <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8003072:	4807      	ldr	r0, [pc, #28]	@ (8003090 <cJSON_CreateObject+0x24>)
 8003074:	f7fe f818 	bl	80010a8 <cJSON_New_Item>
 8003078:	6078      	str	r0, [r7, #4]
    if (item)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2240      	movs	r2, #64	@ 0x40
 8003084:	60da      	str	r2, [r3, #12]
    }

    return item;
 8003086:	687b      	ldr	r3, [r7, #4]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20000000 	.word	0x20000000

08003094 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <cJSON_IsNumber+0x12>
    {
        return false;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e007      	b.n	80030b6 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	bf0c      	ite	eq
 80030b0:	2301      	moveq	r3, #1
 80030b2:	2300      	movne	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <cJSON_IsString+0x12>
    {
        return false;
 80030d0:	2300      	movs	r3, #0
 80030d2:	e007      	b.n	80030e4 <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b10      	cmp	r3, #16
 80030dc:	bf0c      	ite	eq
 80030de:	2301      	moveq	r3, #1
 80030e0:	2300      	movne	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80030f8:	1d39      	adds	r1, r7, #4
 80030fa:	f04f 33ff 	mov.w	r3, #4294967295
 80030fe:	2201      	movs	r2, #1
 8003100:	4803      	ldr	r0, [pc, #12]	@ (8003110 <__io_putchar+0x20>)
 8003102:	f001 ff03 	bl	8004f0c <HAL_UART_Transmit>
  return ch;
 8003106:	687b      	ldr	r3, [r7, #4]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20000204 	.word	0x20000204

08003114 <Serilize>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


static char* Serilize(int Temp, int GatPos[3])
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08a      	sub	sp, #40	@ 0x28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
    const unsigned int Positions[3] = {2,5,10};
    char *string = NULL;
 800311e:	2300      	movs	r3, #0
 8003120:	627b      	str	r3, [r7, #36]	@ 0x24
    cJSON *name = NULL;
 8003122:	2300      	movs	r3, #0
 8003124:	623b      	str	r3, [r7, #32]
    cJSON *resolutions = NULL;
 8003126:	2300      	movs	r3, #0
 8003128:	61fb      	str	r3, [r7, #28]
    cJSON *resolution = NULL;
 800312a:	2300      	movs	r3, #0
 800312c:	61bb      	str	r3, [r7, #24]
    cJSON *width = NULL;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
    cJSON *height = NULL;
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]
    size_t index = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]

    cJSON *monitor = cJSON_CreateObject();
 800313a:	f7ff ff97 	bl	800306c <cJSON_CreateObject>
 800313e:	60b8      	str	r0, [r7, #8]
    if (monitor == NULL)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d104      	bne.n	8003150 <Serilize+0x3c>
    {
        cJSON_Delete(monitor);
 8003146:	68b8      	ldr	r0, [r7, #8]
 8003148:	f7fd ffc4 	bl	80010d4 <cJSON_Delete>
        return NULL_ERROR;
 800314c:	2300      	movs	r3, #0
 800314e:	e095      	b.n	800327c <Serilize+0x168>
    }

    name = cJSON_CreateString("Gantry");
 8003150:	484c      	ldr	r0, [pc, #304]	@ (8003284 <Serilize+0x170>)
 8003152:	f7ff ff51 	bl	8002ff8 <cJSON_CreateString>
 8003156:	6238      	str	r0, [r7, #32]
    if (name == NULL)
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d104      	bne.n	8003168 <Serilize+0x54>
    {
        cJSON_Delete(monitor);
 800315e:	68b8      	ldr	r0, [r7, #8]
 8003160:	f7fd ffb8 	bl	80010d4 <cJSON_Delete>
        return NULL_ERROR;
 8003164:	2300      	movs	r3, #0
 8003166:	e089      	b.n	800327c <Serilize+0x168>
    }
    cJSON_AddItemToObject(monitor, "Name", name);
 8003168:	6a3a      	ldr	r2, [r7, #32]
 800316a:	4947      	ldr	r1, [pc, #284]	@ (8003288 <Serilize+0x174>)
 800316c:	68b8      	ldr	r0, [r7, #8]
 800316e:	f7ff febf 	bl	8002ef0 <cJSON_AddItemToObject>

    cJSON_AddNumberToObject(monitor, "Temperature", Temp);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7fd f9e6 	bl	8000544 <__aeabi_i2d>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	ec43 2b10 	vmov	d0, r2, r3
 8003180:	4942      	ldr	r1, [pc, #264]	@ (800328c <Serilize+0x178>)
 8003182:	68b8      	ldr	r0, [r7, #8]
 8003184:	f7ff feca 	bl	8002f1c <cJSON_AddNumberToObject>


    resolutions = cJSON_CreateArray();
 8003188:	f7ff ff5c 	bl	8003044 <cJSON_CreateArray>
 800318c:	61f8      	str	r0, [r7, #28]
    if (resolutions == NULL)
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d104      	bne.n	800319e <Serilize+0x8a>
    {
        cJSON_Delete(monitor);
 8003194:	68b8      	ldr	r0, [r7, #8]
 8003196:	f7fd ff9d 	bl	80010d4 <cJSON_Delete>
         return NULL_ERROR;
 800319a:	2300      	movs	r3, #0
 800319c:	e06e      	b.n	800327c <Serilize+0x168>
    }
    cJSON_AddItemToObject(monitor, "GantryPositions", resolutions);
 800319e:	69fa      	ldr	r2, [r7, #28]
 80031a0:	493b      	ldr	r1, [pc, #236]	@ (8003290 <Serilize+0x17c>)
 80031a2:	68b8      	ldr	r0, [r7, #8]
 80031a4:	f7ff fea4 	bl	8002ef0 <cJSON_AddItemToObject>

        resolution = cJSON_CreateObject();
 80031a8:	f7ff ff60 	bl	800306c <cJSON_CreateObject>
 80031ac:	61b8      	str	r0, [r7, #24]
        if (resolution == NULL)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d104      	bne.n	80031be <Serilize+0xaa>
        {
            cJSON_Delete(monitor);
 80031b4:	68b8      	ldr	r0, [r7, #8]
 80031b6:	f7fd ff8d 	bl	80010d4 <cJSON_Delete>
         return NULL_ERROR;
 80031ba:	2300      	movs	r3, #0
 80031bc:	e05e      	b.n	800327c <Serilize+0x168>
        }
        cJSON_AddItemToArray(resolutions, resolution);
 80031be:	69b9      	ldr	r1, [r7, #24]
 80031c0:	69f8      	ldr	r0, [r7, #28]
 80031c2:	f7ff fe27 	bl	8002e14 <cJSON_AddItemToArray>

        width = cJSON_CreateNumber(Positions[0]);
 80031c6:	4b33      	ldr	r3, [pc, #204]	@ (8003294 <Serilize+0x180>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fd f9aa 	bl	8000524 <__aeabi_ui2d>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	ec43 2b10 	vmov	d0, r2, r3
 80031d8:	f7ff fec6 	bl	8002f68 <cJSON_CreateNumber>
 80031dc:	6178      	str	r0, [r7, #20]
        if (width == NULL)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d104      	bne.n	80031ee <Serilize+0xda>
        {
            cJSON_Delete(monitor);
 80031e4:	68b8      	ldr	r0, [r7, #8]
 80031e6:	f7fd ff75 	bl	80010d4 <cJSON_Delete>
         return NULL_ERROR;
 80031ea:	2300      	movs	r3, #0
 80031ec:	e046      	b.n	800327c <Serilize+0x168>
        }
        cJSON_AddItemToObject(resolution, "X-Position", width);
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	4929      	ldr	r1, [pc, #164]	@ (8003298 <Serilize+0x184>)
 80031f2:	69b8      	ldr	r0, [r7, #24]
 80031f4:	f7ff fe7c 	bl	8002ef0 <cJSON_AddItemToObject>

        height = cJSON_CreateNumber(Positions[1]);
 80031f8:	4b26      	ldr	r3, [pc, #152]	@ (8003294 <Serilize+0x180>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fd f991 	bl	8000524 <__aeabi_ui2d>
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	ec43 2b10 	vmov	d0, r2, r3
 800320a:	f7ff fead 	bl	8002f68 <cJSON_CreateNumber>
 800320e:	6138      	str	r0, [r7, #16]
        if (height == NULL)
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d104      	bne.n	8003220 <Serilize+0x10c>
        {
            cJSON_Delete(monitor);
 8003216:	68b8      	ldr	r0, [r7, #8]
 8003218:	f7fd ff5c 	bl	80010d4 <cJSON_Delete>
         return NULL_ERROR;
 800321c:	2300      	movs	r3, #0
 800321e:	e02d      	b.n	800327c <Serilize+0x168>
        }
        cJSON_AddItemToObject(resolution, "Y-Position", height);
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	491e      	ldr	r1, [pc, #120]	@ (800329c <Serilize+0x188>)
 8003224:	69b8      	ldr	r0, [r7, #24]
 8003226:	f7ff fe63 	bl	8002ef0 <cJSON_AddItemToObject>

        height = cJSON_CreateNumber(Positions[2]);
 800322a:	4b1a      	ldr	r3, [pc, #104]	@ (8003294 <Serilize+0x180>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fd f978 	bl	8000524 <__aeabi_ui2d>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	ec43 2b10 	vmov	d0, r2, r3
 800323c:	f7ff fe94 	bl	8002f68 <cJSON_CreateNumber>
 8003240:	6138      	str	r0, [r7, #16]
        if (height == NULL)
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d104      	bne.n	8003252 <Serilize+0x13e>
        {
            cJSON_Delete(monitor);
 8003248:	68b8      	ldr	r0, [r7, #8]
 800324a:	f7fd ff43 	bl	80010d4 <cJSON_Delete>
         return NULL_ERROR;
 800324e:	2300      	movs	r3, #0
 8003250:	e014      	b.n	800327c <Serilize+0x168>
        }
        cJSON_AddItemToObject(resolution, "Z-Position", height);
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4912      	ldr	r1, [pc, #72]	@ (80032a0 <Serilize+0x18c>)
 8003256:	69b8      	ldr	r0, [r7, #24]
 8003258:	f7ff fe4a 	bl	8002ef0 <cJSON_AddItemToObject>




    string = cJSON_Print(monitor);
 800325c:	68b8      	ldr	r0, [r7, #8]
 800325e:	f7fe ffe7 	bl	8002230 <cJSON_Print>
 8003262:	6278      	str	r0, [r7, #36]	@ 0x24
    if (string == NULL)
 8003264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003266:	2b00      	cmp	r3, #0
 8003268:	d107      	bne.n	800327a <Serilize+0x166>
    {
        fprintf(stderr, "Failed to print monitor.\n");
 800326a:	4b0e      	ldr	r3, [pc, #56]	@ (80032a4 <Serilize+0x190>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2219      	movs	r2, #25
 8003272:	2101      	movs	r1, #1
 8003274:	480c      	ldr	r0, [pc, #48]	@ (80032a8 <Serilize+0x194>)
 8003276:	f003 fe7f 	bl	8006f78 <fwrite>
    }

    return string;
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800327c:	4618      	mov	r0, r3
 800327e:	3728      	adds	r7, #40	@ 0x28
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	0800a39c 	.word	0x0800a39c
 8003288:	0800a3a4 	.word	0x0800a3a4
 800328c:	0800a3ac 	.word	0x0800a3ac
 8003290:	0800a3b8 	.word	0x0800a3b8
 8003294:	0800a580 	.word	0x0800a580
 8003298:	0800a3c8 	.word	0x0800a3c8
 800329c:	0800a3d4 	.word	0x0800a3d4
 80032a0:	0800a3e0 	.word	0x0800a3e0
 80032a4:	20000190 	.word	0x20000190
 80032a8:	0800a3ec 	.word	0x0800a3ec

080032ac <DeSerilize>:


static int DeSerilize(const char * const monitor)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08c      	sub	sp, #48	@ 0x30
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
    const cJSON *resolution = NULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const cJSON *resolutions = NULL;
 80032b8:	2300      	movs	r3, #0
 80032ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    int status = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	627b      	str	r3, [r7, #36]	@ 0x24
    cJSON *monitor_json = cJSON_Parse(monitor);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7fe ff1d 	bl	8002100 <cJSON_Parse>
 80032c6:	6238      	str	r0, [r7, #32]
    if (monitor_json == NULL)
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d111      	bne.n	80032f2 <DeSerilize+0x46>
    {
        const char *error_ptr = cJSON_GetErrorPtr();
 80032ce:	f7fd fe49 	bl	8000f64 <cJSON_GetErrorPtr>
 80032d2:	60b8      	str	r0, [r7, #8]
        if (error_ptr != NULL)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d007      	beq.n	80032ea <DeSerilize+0x3e>
        {
            fprintf(stderr, "Error before: %s\n", error_ptr);
 80032da:	4b41      	ldr	r3, [pc, #260]	@ (80033e0 <DeSerilize+0x134>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	4940      	ldr	r1, [pc, #256]	@ (80033e4 <DeSerilize+0x138>)
 80032e4:	4618      	mov	r0, r3
 80032e6:	f003 fdcb 	bl	8006e80 <fiprintf>
        }
        status = 0;
 80032ea:	2300      	movs	r3, #0
 80032ec:	627b      	str	r3, [r7, #36]	@ 0x24
         return 0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	e071      	b.n	80033d6 <DeSerilize+0x12a>
    }

    cJSON *gantry = cJSON_GetObjectItemCaseSensitive(monitor_json, "Gantry");
 80032f2:	493d      	ldr	r1, [pc, #244]	@ (80033e8 <DeSerilize+0x13c>)
 80032f4:	6a38      	ldr	r0, [r7, #32]
 80032f6:	f7ff fd37 	bl	8002d68 <cJSON_GetObjectItemCaseSensitive>
 80032fa:	61f8      	str	r0, [r7, #28]
    if (cJSON_IsString(gantry) && (gantry->valuestring != NULL))
 80032fc:	69f8      	ldr	r0, [r7, #28]
 80032fe:	f7ff fee0 	bl	80030c2 <cJSON_IsString>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <DeSerilize+0x72>
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d006      	beq.n	800331e <DeSerilize+0x72>
    {
        printf("Checking monitor \"%s\"\n", gantry->valuestring);
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	4619      	mov	r1, r3
 8003316:	4835      	ldr	r0, [pc, #212]	@ (80033ec <DeSerilize+0x140>)
 8003318:	f003 fe3c 	bl	8006f94 <iprintf>
 800331c:	e009      	b.n	8003332 <DeSerilize+0x86>
    }
    else
    {
        fprintf(stderr, "Error: Gantry name is not a valid string.\n");
 800331e:	4b30      	ldr	r3, [pc, #192]	@ (80033e0 <DeSerilize+0x134>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	222a      	movs	r2, #42	@ 0x2a
 8003326:	2101      	movs	r1, #1
 8003328:	4831      	ldr	r0, [pc, #196]	@ (80033f0 <DeSerilize+0x144>)
 800332a:	f003 fe25 	bl	8006f78 <fwrite>
        status = 0;
 800332e:	2300      	movs	r3, #0
 8003330:	627b      	str	r3, [r7, #36]	@ 0x24
        // return 0;
    }

    cJSON *temperature = cJSON_GetObjectItemCaseSensitive(monitor_json, "Temperature");
 8003332:	4930      	ldr	r1, [pc, #192]	@ (80033f4 <DeSerilize+0x148>)
 8003334:	6a38      	ldr	r0, [r7, #32]
 8003336:	f7ff fd17 	bl	8002d68 <cJSON_GetObjectItemCaseSensitive>
 800333a:	61b8      	str	r0, [r7, #24]
    if (cJSON_IsNumber(temperature))
 800333c:	69b8      	ldr	r0, [r7, #24]
 800333e:	f7ff fea9 	bl	8003094 <cJSON_IsNumber>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d006      	beq.n	8003356 <DeSerilize+0xaa>
    {
        printf("Temperature is %f\n", temperature->valuedouble);
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800334e:	482a      	ldr	r0, [pc, #168]	@ (80033f8 <DeSerilize+0x14c>)
 8003350:	f003 fe20 	bl	8006f94 <iprintf>
 8003354:	e009      	b.n	800336a <DeSerilize+0xbe>
    }
    else
    {
        fprintf(stderr, "Error: Temperature is not a valid number.\n");
 8003356:	4b22      	ldr	r3, [pc, #136]	@ (80033e0 <DeSerilize+0x134>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	222a      	movs	r2, #42	@ 0x2a
 800335e:	2101      	movs	r1, #1
 8003360:	4826      	ldr	r0, [pc, #152]	@ (80033fc <DeSerilize+0x150>)
 8003362:	f003 fe09 	bl	8006f78 <fwrite>
        status = 0;
 8003366:	2300      	movs	r3, #0
 8003368:	627b      	str	r3, [r7, #36]	@ 0x24
        // return 0;
    }


    resolutions = cJSON_GetObjectItemCaseSensitive(monitor_json, "GantryPositions");
 800336a:	4925      	ldr	r1, [pc, #148]	@ (8003400 <DeSerilize+0x154>)
 800336c:	6a38      	ldr	r0, [r7, #32]
 800336e:	f7ff fcfb 	bl	8002d68 <cJSON_GetObjectItemCaseSensitive>
 8003372:	62b8      	str	r0, [r7, #40]	@ 0x28
    cJSON_ArrayForEach(resolution, resolutions)
 8003374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <DeSerilize+0xd4>
 800337a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	e000      	b.n	8003382 <DeSerilize+0xd6>
 8003380:	2300      	movs	r3, #0
 8003382:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003384:	e023      	b.n	80033ce <DeSerilize+0x122>
    {
        cJSON *x = cJSON_GetObjectItemCaseSensitive(resolution, "Y-Position");
 8003386:	491f      	ldr	r1, [pc, #124]	@ (8003404 <DeSerilize+0x158>)
 8003388:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800338a:	f7ff fced 	bl	8002d68 <cJSON_GetObjectItemCaseSensitive>
 800338e:	6178      	str	r0, [r7, #20]
        cJSON *y = cJSON_GetObjectItemCaseSensitive(resolution, "X-Position");
 8003390:	491d      	ldr	r1, [pc, #116]	@ (8003408 <DeSerilize+0x15c>)
 8003392:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003394:	f7ff fce8 	bl	8002d68 <cJSON_GetObjectItemCaseSensitive>
 8003398:	6138      	str	r0, [r7, #16]
        cJSON *z = cJSON_GetObjectItemCaseSensitive(resolution, "Z-Position");
 800339a:	491c      	ldr	r1, [pc, #112]	@ (800340c <DeSerilize+0x160>)
 800339c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800339e:	f7ff fce3 	bl	8002d68 <cJSON_GetObjectItemCaseSensitive>
 80033a2:	60f8      	str	r0, [r7, #12]

            printf("The X - position of the Gantry is %f\n",x->valuedouble);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80033aa:	4819      	ldr	r0, [pc, #100]	@ (8003410 <DeSerilize+0x164>)
 80033ac:	f003 fdf2 	bl	8006f94 <iprintf>
            printf("The Y - position of the Gantry is %f\n",y->valuedouble);
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80033b6:	4817      	ldr	r0, [pc, #92]	@ (8003414 <DeSerilize+0x168>)
 80033b8:	f003 fdec 	bl	8006f94 <iprintf>
            printf("The Z - position of the Gantry is %f\n",z->valuedouble);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80033c2:	4815      	ldr	r0, [pc, #84]	@ (8003418 <DeSerilize+0x16c>)
 80033c4:	f003 fde6 	bl	8006f94 <iprintf>
    cJSON_ArrayForEach(resolution, resolutions)
 80033c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1d8      	bne.n	8003386 <DeSerilize+0xda>
    }
    return 1;
 80033d4:	2301      	movs	r3, #1

}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3730      	adds	r7, #48	@ 0x30
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20000190 	.word	0x20000190
 80033e4:	0800a408 	.word	0x0800a408
 80033e8:	0800a39c 	.word	0x0800a39c
 80033ec:	0800a41c 	.word	0x0800a41c
 80033f0:	0800a434 	.word	0x0800a434
 80033f4:	0800a3ac 	.word	0x0800a3ac
 80033f8:	0800a460 	.word	0x0800a460
 80033fc:	0800a474 	.word	0x0800a474
 8003400:	0800a3b8 	.word	0x0800a3b8
 8003404:	0800a3d4 	.word	0x0800a3d4
 8003408:	0800a3c8 	.word	0x0800a3c8
 800340c:	0800a3e0 	.word	0x0800a3e0
 8003410:	0800a4a0 	.word	0x0800a4a0
 8003414:	0800a4c8 	.word	0x0800a4c8
 8003418:	0800a4f0 	.word	0x0800a4f0

0800341c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003422:	f000 fb37 	bl	8003a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003426:	f000 f841 	bl	80034ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800342a:	f000 f8c7 	bl	80035bc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800342e:	f000 f89b 	bl	8003568 <MX_USART3_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  int gatPos[] = {31,23,24};
 8003432:	4a18      	ldr	r2, [pc, #96]	@ (8003494 <main+0x78>)
 8003434:	463b      	mov	r3, r7
 8003436:	ca07      	ldmia	r2, {r0, r1, r2}
 8003438:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	      char *monitor_json = Serilize(23, gatPos);
 800343c:	463b      	mov	r3, r7
 800343e:	4619      	mov	r1, r3
 8003440:	2017      	movs	r0, #23
 8003442:	f7ff fe67 	bl	8003114 <Serilize>
 8003446:	60f8      	str	r0, [r7, #12]
	      if (monitor_json == NULL)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d109      	bne.n	8003462 <main+0x46>
	      {
	          fprintf(stderr, "Failed to create monitor JSON.\n");
 800344e:	4b12      	ldr	r3, [pc, #72]	@ (8003498 <main+0x7c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	221f      	movs	r2, #31
 8003456:	2101      	movs	r1, #1
 8003458:	4810      	ldr	r0, [pc, #64]	@ (800349c <main+0x80>)
 800345a:	f003 fd8d 	bl	8006f78 <fwrite>
	          return EXIT_FAILURE;
 800345e:	2301      	movs	r3, #1
 8003460:	e014      	b.n	800348c <main+0x70>
	      }

	      printf("Created Monitor JSON:\n%s\n", monitor_json);
 8003462:	68f9      	ldr	r1, [r7, #12]
 8003464:	480e      	ldr	r0, [pc, #56]	@ (80034a0 <main+0x84>)
 8003466:	f003 fd95 	bl	8006f94 <iprintf>

	      if (DeSerilize(monitor_json))
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f7ff ff1e 	bl	80032ac <DeSerilize>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <main+0x62>
	      {
	          printf("Success\n");
 8003476:	480b      	ldr	r0, [pc, #44]	@ (80034a4 <main+0x88>)
 8003478:	f003 fdf4 	bl	8007064 <puts>
 800347c:	e002      	b.n	8003484 <main+0x68>
	      }
	      else
	      {
	          printf("Fail\n");
 800347e:	480a      	ldr	r0, [pc, #40]	@ (80034a8 <main+0x8c>)
 8003480:	f003 fdf0 	bl	8007064 <puts>
	      }

	      free(monitor_json);
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f002 f905 	bl	8005694 <free>
  {
 800348a:	e7d2      	b.n	8003432 <main+0x16>
  }
  /* USER CODE END 3 */
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	0800a564 	.word	0x0800a564
 8003498:	20000190 	.word	0x20000190
 800349c:	0800a518 	.word	0x0800a518
 80034a0:	0800a538 	.word	0x0800a538
 80034a4:	0800a554 	.word	0x0800a554
 80034a8:	0800a55c 	.word	0x0800a55c

080034ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b094      	sub	sp, #80	@ 0x50
 80034b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034b2:	f107 0320 	add.w	r3, r7, #32
 80034b6:	2230      	movs	r2, #48	@ 0x30
 80034b8:	2100      	movs	r1, #0
 80034ba:	4618      	mov	r0, r3
 80034bc:	f003 fefe 	bl	80072bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034c0:	f107 030c 	add.w	r3, r7, #12
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	60da      	str	r2, [r3, #12]
 80034ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80034d0:	2300      	movs	r3, #0
 80034d2:	60bb      	str	r3, [r7, #8]
 80034d4:	4b22      	ldr	r3, [pc, #136]	@ (8003560 <SystemClock_Config+0xb4>)
 80034d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d8:	4a21      	ldr	r2, [pc, #132]	@ (8003560 <SystemClock_Config+0xb4>)
 80034da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034de:	6413      	str	r3, [r2, #64]	@ 0x40
 80034e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003560 <SystemClock_Config+0xb4>)
 80034e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80034ec:	2300      	movs	r3, #0
 80034ee:	607b      	str	r3, [r7, #4]
 80034f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003564 <SystemClock_Config+0xb8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003564 <SystemClock_Config+0xb8>)
 80034f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034fa:	6013      	str	r3, [r2, #0]
 80034fc:	4b19      	ldr	r3, [pc, #100]	@ (8003564 <SystemClock_Config+0xb8>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003504:	607b      	str	r3, [r7, #4]
 8003506:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003508:	2302      	movs	r3, #2
 800350a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800350c:	2301      	movs	r3, #1
 800350e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003510:	2310      	movs	r3, #16
 8003512:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003514:	2300      	movs	r3, #0
 8003516:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003518:	f107 0320 	add.w	r3, r7, #32
 800351c:	4618      	mov	r0, r3
 800351e:	f000 fd79 	bl	8004014 <HAL_RCC_OscConfig>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8003528:	f000 f890 	bl	800364c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800352c:	230f      	movs	r3, #15
 800352e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003530:	2300      	movs	r3, #0
 8003532:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003538:	2300      	movs	r3, #0
 800353a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800353c:	2300      	movs	r3, #0
 800353e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003540:	f107 030c 	add.w	r3, r7, #12
 8003544:	2100      	movs	r1, #0
 8003546:	4618      	mov	r0, r3
 8003548:	f000 ffdc 	bl	8004504 <HAL_RCC_ClockConfig>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003552:	f000 f87b 	bl	800364c <Error_Handler>
  }
}
 8003556:	bf00      	nop
 8003558:	3750      	adds	r7, #80	@ 0x50
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800
 8003564:	40007000 	.word	0x40007000

08003568 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800356c:	4b11      	ldr	r3, [pc, #68]	@ (80035b4 <MX_USART3_UART_Init+0x4c>)
 800356e:	4a12      	ldr	r2, [pc, #72]	@ (80035b8 <MX_USART3_UART_Init+0x50>)
 8003570:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003572:	4b10      	ldr	r3, [pc, #64]	@ (80035b4 <MX_USART3_UART_Init+0x4c>)
 8003574:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003578:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800357a:	4b0e      	ldr	r3, [pc, #56]	@ (80035b4 <MX_USART3_UART_Init+0x4c>)
 800357c:	2200      	movs	r2, #0
 800357e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003580:	4b0c      	ldr	r3, [pc, #48]	@ (80035b4 <MX_USART3_UART_Init+0x4c>)
 8003582:	2200      	movs	r2, #0
 8003584:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003586:	4b0b      	ldr	r3, [pc, #44]	@ (80035b4 <MX_USART3_UART_Init+0x4c>)
 8003588:	2200      	movs	r2, #0
 800358a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800358c:	4b09      	ldr	r3, [pc, #36]	@ (80035b4 <MX_USART3_UART_Init+0x4c>)
 800358e:	220c      	movs	r2, #12
 8003590:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003592:	4b08      	ldr	r3, [pc, #32]	@ (80035b4 <MX_USART3_UART_Init+0x4c>)
 8003594:	2200      	movs	r2, #0
 8003596:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003598:	4b06      	ldr	r3, [pc, #24]	@ (80035b4 <MX_USART3_UART_Init+0x4c>)
 800359a:	2200      	movs	r2, #0
 800359c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800359e:	4805      	ldr	r0, [pc, #20]	@ (80035b4 <MX_USART3_UART_Init+0x4c>)
 80035a0:	f001 fc64 	bl	8004e6c <HAL_UART_Init>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80035aa:	f000 f84f 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80035ae:	bf00      	nop
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20000204 	.word	0x20000204
 80035b8:	40004800 	.word	0x40004800

080035bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	4b17      	ldr	r3, [pc, #92]	@ (8003624 <MX_GPIO_Init+0x68>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ca:	4a16      	ldr	r2, [pc, #88]	@ (8003624 <MX_GPIO_Init+0x68>)
 80035cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035d2:	4b14      	ldr	r3, [pc, #80]	@ (8003624 <MX_GPIO_Init+0x68>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	4b10      	ldr	r3, [pc, #64]	@ (8003624 <MX_GPIO_Init+0x68>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e6:	4a0f      	ldr	r2, [pc, #60]	@ (8003624 <MX_GPIO_Init+0x68>)
 80035e8:	f043 0302 	orr.w	r3, r3, #2
 80035ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003624 <MX_GPIO_Init+0x68>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035fa:	2300      	movs	r3, #0
 80035fc:	607b      	str	r3, [r7, #4]
 80035fe:	4b09      	ldr	r3, [pc, #36]	@ (8003624 <MX_GPIO_Init+0x68>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003602:	4a08      	ldr	r2, [pc, #32]	@ (8003624 <MX_GPIO_Init+0x68>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	6313      	str	r3, [r2, #48]	@ 0x30
 800360a:	4b06      	ldr	r3, [pc, #24]	@ (8003624 <MX_GPIO_Init+0x68>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	607b      	str	r3, [r7, #4]
 8003614:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003616:	bf00      	nop
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	40023800 	.word	0x40023800

08003628 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a04      	ldr	r2, [pc, #16]	@ (8003648 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d101      	bne.n	800363e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800363a:	f000 fa4d 	bl	8003ad8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40010000 	.word	0x40010000

0800364c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003650:	b672      	cpsid	i
}
 8003652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003654:	bf00      	nop
 8003656:	e7fd      	b.n	8003654 <Error_Handler+0x8>

08003658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	607b      	str	r3, [r7, #4]
 8003662:	4b10      	ldr	r3, [pc, #64]	@ (80036a4 <HAL_MspInit+0x4c>)
 8003664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003666:	4a0f      	ldr	r2, [pc, #60]	@ (80036a4 <HAL_MspInit+0x4c>)
 8003668:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800366c:	6453      	str	r3, [r2, #68]	@ 0x44
 800366e:	4b0d      	ldr	r3, [pc, #52]	@ (80036a4 <HAL_MspInit+0x4c>)
 8003670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003672:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003676:	607b      	str	r3, [r7, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	603b      	str	r3, [r7, #0]
 800367e:	4b09      	ldr	r3, [pc, #36]	@ (80036a4 <HAL_MspInit+0x4c>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003682:	4a08      	ldr	r2, [pc, #32]	@ (80036a4 <HAL_MspInit+0x4c>)
 8003684:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003688:	6413      	str	r3, [r2, #64]	@ 0x40
 800368a:	4b06      	ldr	r3, [pc, #24]	@ (80036a4 <HAL_MspInit+0x4c>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	40023800 	.word	0x40023800

080036a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08a      	sub	sp, #40	@ 0x28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b0:	f107 0314 	add.w	r3, r7, #20
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	605a      	str	r2, [r3, #4]
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	60da      	str	r2, [r3, #12]
 80036be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a19      	ldr	r2, [pc, #100]	@ (800372c <HAL_UART_MspInit+0x84>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d12c      	bne.n	8003724 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80036ca:	2300      	movs	r3, #0
 80036cc:	613b      	str	r3, [r7, #16]
 80036ce:	4b18      	ldr	r3, [pc, #96]	@ (8003730 <HAL_UART_MspInit+0x88>)
 80036d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d2:	4a17      	ldr	r2, [pc, #92]	@ (8003730 <HAL_UART_MspInit+0x88>)
 80036d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80036da:	4b15      	ldr	r3, [pc, #84]	@ (8003730 <HAL_UART_MspInit+0x88>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	4b11      	ldr	r3, [pc, #68]	@ (8003730 <HAL_UART_MspInit+0x88>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ee:	4a10      	ldr	r2, [pc, #64]	@ (8003730 <HAL_UART_MspInit+0x88>)
 80036f0:	f043 0302 	orr.w	r3, r3, #2
 80036f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80036f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003730 <HAL_UART_MspInit+0x88>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003702:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003708:	2302      	movs	r3, #2
 800370a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370c:	2300      	movs	r3, #0
 800370e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003710:	2303      	movs	r3, #3
 8003712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003714:	2307      	movs	r3, #7
 8003716:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003718:	f107 0314 	add.w	r3, r7, #20
 800371c:	4619      	mov	r1, r3
 800371e:	4805      	ldr	r0, [pc, #20]	@ (8003734 <HAL_UART_MspInit+0x8c>)
 8003720:	f000 fadc 	bl	8003cdc <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8003724:	bf00      	nop
 8003726:	3728      	adds	r7, #40	@ 0x28
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40004800 	.word	0x40004800
 8003730:	40023800 	.word	0x40023800
 8003734:	40020400 	.word	0x40020400

08003738 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08c      	sub	sp, #48	@ 0x30
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003748:	2300      	movs	r3, #0
 800374a:	60bb      	str	r3, [r7, #8]
 800374c:	4b2e      	ldr	r3, [pc, #184]	@ (8003808 <HAL_InitTick+0xd0>)
 800374e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003750:	4a2d      	ldr	r2, [pc, #180]	@ (8003808 <HAL_InitTick+0xd0>)
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	6453      	str	r3, [r2, #68]	@ 0x44
 8003758:	4b2b      	ldr	r3, [pc, #172]	@ (8003808 <HAL_InitTick+0xd0>)
 800375a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003764:	f107 020c 	add.w	r2, r7, #12
 8003768:	f107 0310 	add.w	r3, r7, #16
 800376c:	4611      	mov	r1, r2
 800376e:	4618      	mov	r0, r3
 8003770:	f001 f8a8 	bl	80048c4 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003774:	f001 f892 	bl	800489c <HAL_RCC_GetPCLK2Freq>
 8003778:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800377a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377c:	4a23      	ldr	r2, [pc, #140]	@ (800380c <HAL_InitTick+0xd4>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	0c9b      	lsrs	r3, r3, #18
 8003784:	3b01      	subs	r3, #1
 8003786:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003788:	4b21      	ldr	r3, [pc, #132]	@ (8003810 <HAL_InitTick+0xd8>)
 800378a:	4a22      	ldr	r2, [pc, #136]	@ (8003814 <HAL_InitTick+0xdc>)
 800378c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800378e:	4b20      	ldr	r3, [pc, #128]	@ (8003810 <HAL_InitTick+0xd8>)
 8003790:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003794:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003796:	4a1e      	ldr	r2, [pc, #120]	@ (8003810 <HAL_InitTick+0xd8>)
 8003798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800379c:	4b1c      	ldr	r3, [pc, #112]	@ (8003810 <HAL_InitTick+0xd8>)
 800379e:	2200      	movs	r2, #0
 80037a0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003810 <HAL_InitTick+0xd8>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037a8:	4b19      	ldr	r3, [pc, #100]	@ (8003810 <HAL_InitTick+0xd8>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80037ae:	4818      	ldr	r0, [pc, #96]	@ (8003810 <HAL_InitTick+0xd8>)
 80037b0:	f001 f8ba 	bl	8004928 <HAL_TIM_Base_Init>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80037ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d11b      	bne.n	80037fa <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80037c2:	4813      	ldr	r0, [pc, #76]	@ (8003810 <HAL_InitTick+0xd8>)
 80037c4:	f001 f90a 	bl	80049dc <HAL_TIM_Base_Start_IT>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80037ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d111      	bne.n	80037fa <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80037d6:	2019      	movs	r0, #25
 80037d8:	f000 fa72 	bl	8003cc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b0f      	cmp	r3, #15
 80037e0:	d808      	bhi.n	80037f4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80037e2:	2200      	movs	r2, #0
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	2019      	movs	r0, #25
 80037e8:	f000 fa4e 	bl	8003c88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003818 <HAL_InitTick+0xe0>)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	e002      	b.n	80037fa <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80037fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3730      	adds	r7, #48	@ 0x30
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40023800 	.word	0x40023800
 800380c:	431bde83 	.word	0x431bde83
 8003810:	2000024c 	.word	0x2000024c
 8003814:	40010000 	.word	0x40010000
 8003818:	20000010 	.word	0x20000010

0800381c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003820:	bf00      	nop
 8003822:	e7fd      	b.n	8003820 <NMI_Handler+0x4>

08003824 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003828:	bf00      	nop
 800382a:	e7fd      	b.n	8003828 <HardFault_Handler+0x4>

0800382c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003830:	bf00      	nop
 8003832:	e7fd      	b.n	8003830 <MemManage_Handler+0x4>

08003834 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003838:	bf00      	nop
 800383a:	e7fd      	b.n	8003838 <BusFault_Handler+0x4>

0800383c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003840:	bf00      	nop
 8003842:	e7fd      	b.n	8003840 <UsageFault_Handler+0x4>

08003844 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003848:	bf00      	nop
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003852:	b480      	push	{r7}
 8003854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003856:	bf00      	nop
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003864:	bf00      	nop
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800386e:	b480      	push	{r7}
 8003870:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003872:	bf00      	nop
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003880:	4802      	ldr	r0, [pc, #8]	@ (800388c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003882:	f001 f91b 	bl	8004abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	2000024c 	.word	0x2000024c

08003890 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  return 1;
 8003894:	2301      	movs	r3, #1
}
 8003896:	4618      	mov	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <_kill>:

int _kill(int pid, int sig)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80038aa:	f003 fd7b 	bl	80073a4 <__errno>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2216      	movs	r2, #22
 80038b2:	601a      	str	r2, [r3, #0]
  return -1;
 80038b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <_exit>:

void _exit (int status)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80038c8:	f04f 31ff 	mov.w	r1, #4294967295
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7ff ffe7 	bl	80038a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80038d2:	bf00      	nop
 80038d4:	e7fd      	b.n	80038d2 <_exit+0x12>

080038d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b086      	sub	sp, #24
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	e00a      	b.n	80038fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038e8:	f3af 8000 	nop.w
 80038ec:	4601      	mov	r1, r0
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	60ba      	str	r2, [r7, #8]
 80038f4:	b2ca      	uxtb	r2, r1
 80038f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	3301      	adds	r3, #1
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	429a      	cmp	r2, r3
 8003904:	dbf0      	blt.n	80038e8 <_read+0x12>
  }

  return len;
 8003906:	687b      	ldr	r3, [r7, #4]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	e009      	b.n	8003936 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	60ba      	str	r2, [r7, #8]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff fbe0 	bl	80030f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	3301      	adds	r3, #1
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	429a      	cmp	r2, r3
 800393c:	dbf1      	blt.n	8003922 <_write+0x12>
  }
  return len;
 800393e:	687b      	ldr	r3, [r7, #4]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <_close>:

int _close(int file)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003954:	4618      	mov	r0, r3
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003970:	605a      	str	r2, [r3, #4]
  return 0;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <_isatty>:

int _isatty(int file)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003988:	2301      	movs	r3, #1
}
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003996:	b480      	push	{r7}
 8003998:	b085      	sub	sp, #20
 800399a:	af00      	add	r7, sp, #0
 800399c:	60f8      	str	r0, [r7, #12]
 800399e:	60b9      	str	r1, [r7, #8]
 80039a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039b8:	4a14      	ldr	r2, [pc, #80]	@ (8003a0c <_sbrk+0x5c>)
 80039ba:	4b15      	ldr	r3, [pc, #84]	@ (8003a10 <_sbrk+0x60>)
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039c4:	4b13      	ldr	r3, [pc, #76]	@ (8003a14 <_sbrk+0x64>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d102      	bne.n	80039d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039cc:	4b11      	ldr	r3, [pc, #68]	@ (8003a14 <_sbrk+0x64>)
 80039ce:	4a12      	ldr	r2, [pc, #72]	@ (8003a18 <_sbrk+0x68>)
 80039d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039d2:	4b10      	ldr	r3, [pc, #64]	@ (8003a14 <_sbrk+0x64>)
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4413      	add	r3, r2
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d207      	bcs.n	80039f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039e0:	f003 fce0 	bl	80073a4 <__errno>
 80039e4:	4603      	mov	r3, r0
 80039e6:	220c      	movs	r2, #12
 80039e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039ea:	f04f 33ff 	mov.w	r3, #4294967295
 80039ee:	e009      	b.n	8003a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039f0:	4b08      	ldr	r3, [pc, #32]	@ (8003a14 <_sbrk+0x64>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039f6:	4b07      	ldr	r3, [pc, #28]	@ (8003a14 <_sbrk+0x64>)
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4413      	add	r3, r2
 80039fe:	4a05      	ldr	r2, [pc, #20]	@ (8003a14 <_sbrk+0x64>)
 8003a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a02:	68fb      	ldr	r3, [r7, #12]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	20020000 	.word	0x20020000
 8003a10:	00000400 	.word	0x00000400
 8003a14:	20000294 	.word	0x20000294
 8003a18:	200003e8 	.word	0x200003e8

08003a1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a20:	4b06      	ldr	r3, [pc, #24]	@ (8003a3c <SystemInit+0x20>)
 8003a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a26:	4a05      	ldr	r2, [pc, #20]	@ (8003a3c <SystemInit+0x20>)
 8003a28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a30:	bf00      	nop
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	e000ed00 	.word	0xe000ed00

08003a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003a40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003a44:	f7ff ffea 	bl	8003a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a48:	480c      	ldr	r0, [pc, #48]	@ (8003a7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a4a:	490d      	ldr	r1, [pc, #52]	@ (8003a80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a50:	e002      	b.n	8003a58 <LoopCopyDataInit>

08003a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a56:	3304      	adds	r3, #4

08003a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a5c:	d3f9      	bcc.n	8003a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a60:	4c0a      	ldr	r4, [pc, #40]	@ (8003a8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a64:	e001      	b.n	8003a6a <LoopFillZerobss>

08003a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a68:	3204      	adds	r2, #4

08003a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a6c:	d3fb      	bcc.n	8003a66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a6e:	f003 fc9f 	bl	80073b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a72:	f7ff fcd3 	bl	800341c <main>
  bx  lr    
 8003a76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003a78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a80:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003a84:	0800a9f0 	.word	0x0800a9f0
  ldr r2, =_sbss
 8003a88:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003a8c:	200003e8 	.word	0x200003e8

08003a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a90:	e7fe      	b.n	8003a90 <ADC_IRQHandler>
	...

08003a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a98:	4b0e      	ldr	r3, [pc, #56]	@ (8003ad4 <HAL_Init+0x40>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ad4 <HAL_Init+0x40>)
 8003a9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003aa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad4 <HAL_Init+0x40>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad4 <HAL_Init+0x40>)
 8003aaa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003aae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ab0:	4b08      	ldr	r3, [pc, #32]	@ (8003ad4 <HAL_Init+0x40>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a07      	ldr	r2, [pc, #28]	@ (8003ad4 <HAL_Init+0x40>)
 8003ab6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003abc:	2003      	movs	r0, #3
 8003abe:	f000 f8d8 	bl	8003c72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ac2:	200f      	movs	r0, #15
 8003ac4:	f7ff fe38 	bl	8003738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ac8:	f7ff fdc6 	bl	8003658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40023c00 	.word	0x40023c00

08003ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003adc:	4b06      	ldr	r3, [pc, #24]	@ (8003af8 <HAL_IncTick+0x20>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4b06      	ldr	r3, [pc, #24]	@ (8003afc <HAL_IncTick+0x24>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	4a04      	ldr	r2, [pc, #16]	@ (8003afc <HAL_IncTick+0x24>)
 8003aea:	6013      	str	r3, [r2, #0]
}
 8003aec:	bf00      	nop
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	20000014 	.word	0x20000014
 8003afc:	20000298 	.word	0x20000298

08003b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  return uwTick;
 8003b04:	4b03      	ldr	r3, [pc, #12]	@ (8003b14 <HAL_GetTick+0x14>)
 8003b06:	681b      	ldr	r3, [r3, #0]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	20000298 	.word	0x20000298

08003b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b28:	4b0c      	ldr	r3, [pc, #48]	@ (8003b5c <__NVIC_SetPriorityGrouping+0x44>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b34:	4013      	ands	r3, r2
 8003b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b4a:	4a04      	ldr	r2, [pc, #16]	@ (8003b5c <__NVIC_SetPriorityGrouping+0x44>)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	60d3      	str	r3, [r2, #12]
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	e000ed00 	.word	0xe000ed00

08003b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b64:	4b04      	ldr	r3, [pc, #16]	@ (8003b78 <__NVIC_GetPriorityGrouping+0x18>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	0a1b      	lsrs	r3, r3, #8
 8003b6a:	f003 0307 	and.w	r3, r3, #7
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	e000ed00 	.word	0xe000ed00

08003b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	db0b      	blt.n	8003ba6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	f003 021f 	and.w	r2, r3, #31
 8003b94:	4907      	ldr	r1, [pc, #28]	@ (8003bb4 <__NVIC_EnableIRQ+0x38>)
 8003b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	2001      	movs	r0, #1
 8003b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	e000e100 	.word	0xe000e100

08003bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	6039      	str	r1, [r7, #0]
 8003bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	db0a      	blt.n	8003be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	490c      	ldr	r1, [pc, #48]	@ (8003c04 <__NVIC_SetPriority+0x4c>)
 8003bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd6:	0112      	lsls	r2, r2, #4
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	440b      	add	r3, r1
 8003bdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003be0:	e00a      	b.n	8003bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	4908      	ldr	r1, [pc, #32]	@ (8003c08 <__NVIC_SetPriority+0x50>)
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	3b04      	subs	r3, #4
 8003bf0:	0112      	lsls	r2, r2, #4
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	761a      	strb	r2, [r3, #24]
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	e000e100 	.word	0xe000e100
 8003c08:	e000ed00 	.word	0xe000ed00

08003c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b089      	sub	sp, #36	@ 0x24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f1c3 0307 	rsb	r3, r3, #7
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	bf28      	it	cs
 8003c2a:	2304      	movcs	r3, #4
 8003c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	3304      	adds	r3, #4
 8003c32:	2b06      	cmp	r3, #6
 8003c34:	d902      	bls.n	8003c3c <NVIC_EncodePriority+0x30>
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	3b03      	subs	r3, #3
 8003c3a:	e000      	b.n	8003c3e <NVIC_EncodePriority+0x32>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c40:	f04f 32ff 	mov.w	r2, #4294967295
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	43da      	mvns	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	401a      	ands	r2, r3
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c54:	f04f 31ff 	mov.w	r1, #4294967295
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5e:	43d9      	mvns	r1, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c64:	4313      	orrs	r3, r2
         );
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3724      	adds	r7, #36	@ 0x24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff ff4c 	bl	8003b18 <__NVIC_SetPriorityGrouping>
}
 8003c80:	bf00      	nop
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c9a:	f7ff ff61 	bl	8003b60 <__NVIC_GetPriorityGrouping>
 8003c9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	6978      	ldr	r0, [r7, #20]
 8003ca6:	f7ff ffb1 	bl	8003c0c <NVIC_EncodePriority>
 8003caa:	4602      	mov	r2, r0
 8003cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff ff80 	bl	8003bb8 <__NVIC_SetPriority>
}
 8003cb8:	bf00      	nop
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff ff54 	bl	8003b7c <__NVIC_EnableIRQ>
}
 8003cd4:	bf00      	nop
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b089      	sub	sp, #36	@ 0x24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
 8003cf6:	e16b      	b.n	8003fd0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	f040 815a 	bne.w	8003fca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d005      	beq.n	8003d2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d130      	bne.n	8003d90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	2203      	movs	r2, #3
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4013      	ands	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d64:	2201      	movs	r2, #1
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4013      	ands	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	091b      	lsrs	r3, r3, #4
 8003d7a:	f003 0201 	and.w	r2, r3, #1
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	2b03      	cmp	r3, #3
 8003d9a:	d017      	beq.n	8003dcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	2203      	movs	r2, #3
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	43db      	mvns	r3, r3
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	4013      	ands	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d123      	bne.n	8003e20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	08da      	lsrs	r2, r3, #3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3208      	adds	r2, #8
 8003de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	220f      	movs	r2, #15
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	08da      	lsrs	r2, r3, #3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3208      	adds	r2, #8
 8003e1a:	69b9      	ldr	r1, [r7, #24]
 8003e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	2203      	movs	r2, #3
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	43db      	mvns	r3, r3
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	4013      	ands	r3, r2
 8003e36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f003 0203 	and.w	r2, r3, #3
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 80b4 	beq.w	8003fca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e62:	2300      	movs	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	4b60      	ldr	r3, [pc, #384]	@ (8003fe8 <HAL_GPIO_Init+0x30c>)
 8003e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6a:	4a5f      	ldr	r2, [pc, #380]	@ (8003fe8 <HAL_GPIO_Init+0x30c>)
 8003e6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e70:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e72:	4b5d      	ldr	r3, [pc, #372]	@ (8003fe8 <HAL_GPIO_Init+0x30c>)
 8003e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e7e:	4a5b      	ldr	r2, [pc, #364]	@ (8003fec <HAL_GPIO_Init+0x310>)
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	089b      	lsrs	r3, r3, #2
 8003e84:	3302      	adds	r3, #2
 8003e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	220f      	movs	r2, #15
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a52      	ldr	r2, [pc, #328]	@ (8003ff0 <HAL_GPIO_Init+0x314>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d02b      	beq.n	8003f02 <HAL_GPIO_Init+0x226>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a51      	ldr	r2, [pc, #324]	@ (8003ff4 <HAL_GPIO_Init+0x318>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d025      	beq.n	8003efe <HAL_GPIO_Init+0x222>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a50      	ldr	r2, [pc, #320]	@ (8003ff8 <HAL_GPIO_Init+0x31c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d01f      	beq.n	8003efa <HAL_GPIO_Init+0x21e>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a4f      	ldr	r2, [pc, #316]	@ (8003ffc <HAL_GPIO_Init+0x320>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d019      	beq.n	8003ef6 <HAL_GPIO_Init+0x21a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a4e      	ldr	r2, [pc, #312]	@ (8004000 <HAL_GPIO_Init+0x324>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d013      	beq.n	8003ef2 <HAL_GPIO_Init+0x216>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a4d      	ldr	r2, [pc, #308]	@ (8004004 <HAL_GPIO_Init+0x328>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00d      	beq.n	8003eee <HAL_GPIO_Init+0x212>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a4c      	ldr	r2, [pc, #304]	@ (8004008 <HAL_GPIO_Init+0x32c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d007      	beq.n	8003eea <HAL_GPIO_Init+0x20e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a4b      	ldr	r2, [pc, #300]	@ (800400c <HAL_GPIO_Init+0x330>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d101      	bne.n	8003ee6 <HAL_GPIO_Init+0x20a>
 8003ee2:	2307      	movs	r3, #7
 8003ee4:	e00e      	b.n	8003f04 <HAL_GPIO_Init+0x228>
 8003ee6:	2308      	movs	r3, #8
 8003ee8:	e00c      	b.n	8003f04 <HAL_GPIO_Init+0x228>
 8003eea:	2306      	movs	r3, #6
 8003eec:	e00a      	b.n	8003f04 <HAL_GPIO_Init+0x228>
 8003eee:	2305      	movs	r3, #5
 8003ef0:	e008      	b.n	8003f04 <HAL_GPIO_Init+0x228>
 8003ef2:	2304      	movs	r3, #4
 8003ef4:	e006      	b.n	8003f04 <HAL_GPIO_Init+0x228>
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e004      	b.n	8003f04 <HAL_GPIO_Init+0x228>
 8003efa:	2302      	movs	r3, #2
 8003efc:	e002      	b.n	8003f04 <HAL_GPIO_Init+0x228>
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <HAL_GPIO_Init+0x228>
 8003f02:	2300      	movs	r3, #0
 8003f04:	69fa      	ldr	r2, [r7, #28]
 8003f06:	f002 0203 	and.w	r2, r2, #3
 8003f0a:	0092      	lsls	r2, r2, #2
 8003f0c:	4093      	lsls	r3, r2
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f14:	4935      	ldr	r1, [pc, #212]	@ (8003fec <HAL_GPIO_Init+0x310>)
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	089b      	lsrs	r3, r3, #2
 8003f1a:	3302      	adds	r3, #2
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f22:	4b3b      	ldr	r3, [pc, #236]	@ (8004010 <HAL_GPIO_Init+0x334>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f46:	4a32      	ldr	r2, [pc, #200]	@ (8004010 <HAL_GPIO_Init+0x334>)
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f4c:	4b30      	ldr	r3, [pc, #192]	@ (8004010 <HAL_GPIO_Init+0x334>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	43db      	mvns	r3, r3
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f70:	4a27      	ldr	r2, [pc, #156]	@ (8004010 <HAL_GPIO_Init+0x334>)
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f76:	4b26      	ldr	r3, [pc, #152]	@ (8004010 <HAL_GPIO_Init+0x334>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	4013      	ands	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f9a:	4a1d      	ldr	r2, [pc, #116]	@ (8004010 <HAL_GPIO_Init+0x334>)
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8004010 <HAL_GPIO_Init+0x334>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	4013      	ands	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fc4:	4a12      	ldr	r2, [pc, #72]	@ (8004010 <HAL_GPIO_Init+0x334>)
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	61fb      	str	r3, [r7, #28]
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	2b0f      	cmp	r3, #15
 8003fd4:	f67f ae90 	bls.w	8003cf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fd8:	bf00      	nop
 8003fda:	bf00      	nop
 8003fdc:	3724      	adds	r7, #36	@ 0x24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	40013800 	.word	0x40013800
 8003ff0:	40020000 	.word	0x40020000
 8003ff4:	40020400 	.word	0x40020400
 8003ff8:	40020800 	.word	0x40020800
 8003ffc:	40020c00 	.word	0x40020c00
 8004000:	40021000 	.word	0x40021000
 8004004:	40021400 	.word	0x40021400
 8004008:	40021800 	.word	0x40021800
 800400c:	40021c00 	.word	0x40021c00
 8004010:	40013c00 	.word	0x40013c00

08004014 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e267      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d075      	beq.n	800411e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004032:	4b88      	ldr	r3, [pc, #544]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 030c 	and.w	r3, r3, #12
 800403a:	2b04      	cmp	r3, #4
 800403c:	d00c      	beq.n	8004058 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800403e:	4b85      	ldr	r3, [pc, #532]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004046:	2b08      	cmp	r3, #8
 8004048:	d112      	bne.n	8004070 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800404a:	4b82      	ldr	r3, [pc, #520]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004052:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004056:	d10b      	bne.n	8004070 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004058:	4b7e      	ldr	r3, [pc, #504]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d05b      	beq.n	800411c <HAL_RCC_OscConfig+0x108>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d157      	bne.n	800411c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e242      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004078:	d106      	bne.n	8004088 <HAL_RCC_OscConfig+0x74>
 800407a:	4b76      	ldr	r3, [pc, #472]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a75      	ldr	r2, [pc, #468]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 8004080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	e01d      	b.n	80040c4 <HAL_RCC_OscConfig+0xb0>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004090:	d10c      	bne.n	80040ac <HAL_RCC_OscConfig+0x98>
 8004092:	4b70      	ldr	r3, [pc, #448]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a6f      	ldr	r2, [pc, #444]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 8004098:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	4b6d      	ldr	r3, [pc, #436]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a6c      	ldr	r2, [pc, #432]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 80040a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	e00b      	b.n	80040c4 <HAL_RCC_OscConfig+0xb0>
 80040ac:	4b69      	ldr	r3, [pc, #420]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a68      	ldr	r2, [pc, #416]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 80040b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040b6:	6013      	str	r3, [r2, #0]
 80040b8:	4b66      	ldr	r3, [pc, #408]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a65      	ldr	r2, [pc, #404]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 80040be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d013      	beq.n	80040f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040cc:	f7ff fd18 	bl	8003b00 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040d4:	f7ff fd14 	bl	8003b00 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b64      	cmp	r3, #100	@ 0x64
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e207      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e6:	4b5b      	ldr	r3, [pc, #364]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f0      	beq.n	80040d4 <HAL_RCC_OscConfig+0xc0>
 80040f2:	e014      	b.n	800411e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f4:	f7ff fd04 	bl	8003b00 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040fc:	f7ff fd00 	bl	8003b00 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b64      	cmp	r3, #100	@ 0x64
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e1f3      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800410e:	4b51      	ldr	r3, [pc, #324]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0xe8>
 800411a:	e000      	b.n	800411e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800411c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d063      	beq.n	80041f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800412a:	4b4a      	ldr	r3, [pc, #296]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 030c 	and.w	r3, r3, #12
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00b      	beq.n	800414e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004136:	4b47      	ldr	r3, [pc, #284]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800413e:	2b08      	cmp	r3, #8
 8004140:	d11c      	bne.n	800417c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004142:	4b44      	ldr	r3, [pc, #272]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d116      	bne.n	800417c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800414e:	4b41      	ldr	r3, [pc, #260]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d005      	beq.n	8004166 <HAL_RCC_OscConfig+0x152>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d001      	beq.n	8004166 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e1c7      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004166:	4b3b      	ldr	r3, [pc, #236]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	4937      	ldr	r1, [pc, #220]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 8004176:	4313      	orrs	r3, r2
 8004178:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800417a:	e03a      	b.n	80041f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d020      	beq.n	80041c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004184:	4b34      	ldr	r3, [pc, #208]	@ (8004258 <HAL_RCC_OscConfig+0x244>)
 8004186:	2201      	movs	r2, #1
 8004188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418a:	f7ff fcb9 	bl	8003b00 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004192:	f7ff fcb5 	bl	8003b00 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e1a8      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b0:	4b28      	ldr	r3, [pc, #160]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4925      	ldr	r1, [pc, #148]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	600b      	str	r3, [r1, #0]
 80041c4:	e015      	b.n	80041f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c6:	4b24      	ldr	r3, [pc, #144]	@ (8004258 <HAL_RCC_OscConfig+0x244>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041cc:	f7ff fc98 	bl	8003b00 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041d4:	f7ff fc94 	bl	8003b00 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e187      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d036      	beq.n	800426c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d016      	beq.n	8004234 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004206:	4b15      	ldr	r3, [pc, #84]	@ (800425c <HAL_RCC_OscConfig+0x248>)
 8004208:	2201      	movs	r2, #1
 800420a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420c:	f7ff fc78 	bl	8003b00 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004214:	f7ff fc74 	bl	8003b00 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e167      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004226:	4b0b      	ldr	r3, [pc, #44]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 8004228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f0      	beq.n	8004214 <HAL_RCC_OscConfig+0x200>
 8004232:	e01b      	b.n	800426c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004234:	4b09      	ldr	r3, [pc, #36]	@ (800425c <HAL_RCC_OscConfig+0x248>)
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800423a:	f7ff fc61 	bl	8003b00 <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004240:	e00e      	b.n	8004260 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004242:	f7ff fc5d 	bl	8003b00 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d907      	bls.n	8004260 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e150      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
 8004254:	40023800 	.word	0x40023800
 8004258:	42470000 	.word	0x42470000
 800425c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004260:	4b88      	ldr	r3, [pc, #544]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 8004262:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1ea      	bne.n	8004242 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8097 	beq.w	80043a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800427a:	2300      	movs	r3, #0
 800427c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800427e:	4b81      	ldr	r3, [pc, #516]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10f      	bne.n	80042aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800428a:	2300      	movs	r3, #0
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	4b7d      	ldr	r3, [pc, #500]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004292:	4a7c      	ldr	r2, [pc, #496]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 8004294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004298:	6413      	str	r3, [r2, #64]	@ 0x40
 800429a:	4b7a      	ldr	r3, [pc, #488]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a2:	60bb      	str	r3, [r7, #8]
 80042a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042a6:	2301      	movs	r3, #1
 80042a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042aa:	4b77      	ldr	r3, [pc, #476]	@ (8004488 <HAL_RCC_OscConfig+0x474>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d118      	bne.n	80042e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042b6:	4b74      	ldr	r3, [pc, #464]	@ (8004488 <HAL_RCC_OscConfig+0x474>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a73      	ldr	r2, [pc, #460]	@ (8004488 <HAL_RCC_OscConfig+0x474>)
 80042bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042c2:	f7ff fc1d 	bl	8003b00 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ca:	f7ff fc19 	bl	8003b00 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e10c      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042dc:	4b6a      	ldr	r3, [pc, #424]	@ (8004488 <HAL_RCC_OscConfig+0x474>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0f0      	beq.n	80042ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d106      	bne.n	80042fe <HAL_RCC_OscConfig+0x2ea>
 80042f0:	4b64      	ldr	r3, [pc, #400]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 80042f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f4:	4a63      	ldr	r2, [pc, #396]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 80042f6:	f043 0301 	orr.w	r3, r3, #1
 80042fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80042fc:	e01c      	b.n	8004338 <HAL_RCC_OscConfig+0x324>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b05      	cmp	r3, #5
 8004304:	d10c      	bne.n	8004320 <HAL_RCC_OscConfig+0x30c>
 8004306:	4b5f      	ldr	r3, [pc, #380]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430a:	4a5e      	ldr	r2, [pc, #376]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 800430c:	f043 0304 	orr.w	r3, r3, #4
 8004310:	6713      	str	r3, [r2, #112]	@ 0x70
 8004312:	4b5c      	ldr	r3, [pc, #368]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 8004314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004316:	4a5b      	ldr	r2, [pc, #364]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	6713      	str	r3, [r2, #112]	@ 0x70
 800431e:	e00b      	b.n	8004338 <HAL_RCC_OscConfig+0x324>
 8004320:	4b58      	ldr	r3, [pc, #352]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004324:	4a57      	ldr	r2, [pc, #348]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 8004326:	f023 0301 	bic.w	r3, r3, #1
 800432a:	6713      	str	r3, [r2, #112]	@ 0x70
 800432c:	4b55      	ldr	r3, [pc, #340]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 800432e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004330:	4a54      	ldr	r2, [pc, #336]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 8004332:	f023 0304 	bic.w	r3, r3, #4
 8004336:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d015      	beq.n	800436c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004340:	f7ff fbde 	bl	8003b00 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004346:	e00a      	b.n	800435e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004348:	f7ff fbda 	bl	8003b00 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e0cb      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800435e:	4b49      	ldr	r3, [pc, #292]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0ee      	beq.n	8004348 <HAL_RCC_OscConfig+0x334>
 800436a:	e014      	b.n	8004396 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800436c:	f7ff fbc8 	bl	8003b00 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004372:	e00a      	b.n	800438a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004374:	f7ff fbc4 	bl	8003b00 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004382:	4293      	cmp	r3, r2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e0b5      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800438a:	4b3e      	ldr	r3, [pc, #248]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1ee      	bne.n	8004374 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004396:	7dfb      	ldrb	r3, [r7, #23]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d105      	bne.n	80043a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800439c:	4b39      	ldr	r3, [pc, #228]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 800439e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a0:	4a38      	ldr	r2, [pc, #224]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 80043a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 80a1 	beq.w	80044f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043b2:	4b34      	ldr	r3, [pc, #208]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 030c 	and.w	r3, r3, #12
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d05c      	beq.n	8004478 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d141      	bne.n	800444a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c6:	4b31      	ldr	r3, [pc, #196]	@ (800448c <HAL_RCC_OscConfig+0x478>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043cc:	f7ff fb98 	bl	8003b00 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d4:	f7ff fb94 	bl	8003b00 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e087      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e6:	4b27      	ldr	r3, [pc, #156]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69da      	ldr	r2, [r3, #28]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004400:	019b      	lsls	r3, r3, #6
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004408:	085b      	lsrs	r3, r3, #1
 800440a:	3b01      	subs	r3, #1
 800440c:	041b      	lsls	r3, r3, #16
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004414:	061b      	lsls	r3, r3, #24
 8004416:	491b      	ldr	r1, [pc, #108]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 8004418:	4313      	orrs	r3, r2
 800441a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800441c:	4b1b      	ldr	r3, [pc, #108]	@ (800448c <HAL_RCC_OscConfig+0x478>)
 800441e:	2201      	movs	r2, #1
 8004420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004422:	f7ff fb6d 	bl	8003b00 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800442a:	f7ff fb69 	bl	8003b00 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e05c      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800443c:	4b11      	ldr	r3, [pc, #68]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0f0      	beq.n	800442a <HAL_RCC_OscConfig+0x416>
 8004448:	e054      	b.n	80044f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444a:	4b10      	ldr	r3, [pc, #64]	@ (800448c <HAL_RCC_OscConfig+0x478>)
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004450:	f7ff fb56 	bl	8003b00 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004458:	f7ff fb52 	bl	8003b00 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e045      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446a:	4b06      	ldr	r3, [pc, #24]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0x444>
 8004476:	e03d      	b.n	80044f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d107      	bne.n	8004490 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e038      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
 8004484:	40023800 	.word	0x40023800
 8004488:	40007000 	.word	0x40007000
 800448c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004490:	4b1b      	ldr	r3, [pc, #108]	@ (8004500 <HAL_RCC_OscConfig+0x4ec>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d028      	beq.n	80044f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d121      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d11a      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044c0:	4013      	ands	r3, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d111      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d6:	085b      	lsrs	r3, r3, #1
 80044d8:	3b01      	subs	r3, #1
 80044da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044dc:	429a      	cmp	r2, r3
 80044de:	d107      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d001      	beq.n	80044f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e000      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	40023800 	.word	0x40023800

08004504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e0cc      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004518:	4b68      	ldr	r3, [pc, #416]	@ (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d90c      	bls.n	8004540 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004526:	4b65      	ldr	r3, [pc, #404]	@ (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452e:	4b63      	ldr	r3, [pc, #396]	@ (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d001      	beq.n	8004540 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e0b8      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d020      	beq.n	800458e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004558:	4b59      	ldr	r3, [pc, #356]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	4a58      	ldr	r2, [pc, #352]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004562:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004570:	4b53      	ldr	r3, [pc, #332]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	4a52      	ldr	r2, [pc, #328]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800457a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800457c:	4b50      	ldr	r3, [pc, #320]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	494d      	ldr	r1, [pc, #308]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	4313      	orrs	r3, r2
 800458c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d044      	beq.n	8004624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d107      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a2:	4b47      	ldr	r3, [pc, #284]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d119      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e07f      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d003      	beq.n	80045c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045be:	2b03      	cmp	r3, #3
 80045c0:	d107      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c2:	4b3f      	ldr	r3, [pc, #252]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d109      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e06f      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d2:	4b3b      	ldr	r3, [pc, #236]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e067      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045e2:	4b37      	ldr	r3, [pc, #220]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f023 0203 	bic.w	r2, r3, #3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	4934      	ldr	r1, [pc, #208]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045f4:	f7ff fa84 	bl	8003b00 <HAL_GetTick>
 80045f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fa:	e00a      	b.n	8004612 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045fc:	f7ff fa80 	bl	8003b00 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800460a:	4293      	cmp	r3, r2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e04f      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004612:	4b2b      	ldr	r3, [pc, #172]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 020c 	and.w	r2, r3, #12
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	429a      	cmp	r2, r3
 8004622:	d1eb      	bne.n	80045fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004624:	4b25      	ldr	r3, [pc, #148]	@ (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d20c      	bcs.n	800464c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004632:	4b22      	ldr	r3, [pc, #136]	@ (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800463a:	4b20      	ldr	r3, [pc, #128]	@ (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d001      	beq.n	800464c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e032      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	d008      	beq.n	800466a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004658:	4b19      	ldr	r3, [pc, #100]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	4916      	ldr	r1, [pc, #88]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	4313      	orrs	r3, r2
 8004668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d009      	beq.n	800468a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004676:	4b12      	ldr	r3, [pc, #72]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	490e      	ldr	r1, [pc, #56]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	4313      	orrs	r3, r2
 8004688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800468a:	f000 f821 	bl	80046d0 <HAL_RCC_GetSysClockFreq>
 800468e:	4602      	mov	r2, r0
 8004690:	4b0b      	ldr	r3, [pc, #44]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	091b      	lsrs	r3, r3, #4
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	490a      	ldr	r1, [pc, #40]	@ (80046c4 <HAL_RCC_ClockConfig+0x1c0>)
 800469c:	5ccb      	ldrb	r3, [r1, r3]
 800469e:	fa22 f303 	lsr.w	r3, r2, r3
 80046a2:	4a09      	ldr	r2, [pc, #36]	@ (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 80046a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046a6:	4b09      	ldr	r3, [pc, #36]	@ (80046cc <HAL_RCC_ClockConfig+0x1c8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff f844 	bl	8003738 <HAL_InitTick>

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	40023c00 	.word	0x40023c00
 80046c0:	40023800 	.word	0x40023800
 80046c4:	0800a58c 	.word	0x0800a58c
 80046c8:	2000000c 	.word	0x2000000c
 80046cc:	20000010 	.word	0x20000010

080046d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d4:	b090      	sub	sp, #64	@ 0x40
 80046d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	637b      	str	r3, [r7, #52]	@ 0x34
 80046dc:	2300      	movs	r3, #0
 80046de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046e0:	2300      	movs	r3, #0
 80046e2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046e8:	4b59      	ldr	r3, [pc, #356]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x180>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 030c 	and.w	r3, r3, #12
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d00d      	beq.n	8004710 <HAL_RCC_GetSysClockFreq+0x40>
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	f200 80a1 	bhi.w	800483c <HAL_RCC_GetSysClockFreq+0x16c>
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <HAL_RCC_GetSysClockFreq+0x34>
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d003      	beq.n	800470a <HAL_RCC_GetSysClockFreq+0x3a>
 8004702:	e09b      	b.n	800483c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004704:	4b53      	ldr	r3, [pc, #332]	@ (8004854 <HAL_RCC_GetSysClockFreq+0x184>)
 8004706:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004708:	e09b      	b.n	8004842 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800470a:	4b53      	ldr	r3, [pc, #332]	@ (8004858 <HAL_RCC_GetSysClockFreq+0x188>)
 800470c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800470e:	e098      	b.n	8004842 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004710:	4b4f      	ldr	r3, [pc, #316]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x180>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004718:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800471a:	4b4d      	ldr	r3, [pc, #308]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x180>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d028      	beq.n	8004778 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004726:	4b4a      	ldr	r3, [pc, #296]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x180>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	099b      	lsrs	r3, r3, #6
 800472c:	2200      	movs	r2, #0
 800472e:	623b      	str	r3, [r7, #32]
 8004730:	627a      	str	r2, [r7, #36]	@ 0x24
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004738:	2100      	movs	r1, #0
 800473a:	4b47      	ldr	r3, [pc, #284]	@ (8004858 <HAL_RCC_GetSysClockFreq+0x188>)
 800473c:	fb03 f201 	mul.w	r2, r3, r1
 8004740:	2300      	movs	r3, #0
 8004742:	fb00 f303 	mul.w	r3, r0, r3
 8004746:	4413      	add	r3, r2
 8004748:	4a43      	ldr	r2, [pc, #268]	@ (8004858 <HAL_RCC_GetSysClockFreq+0x188>)
 800474a:	fba0 1202 	umull	r1, r2, r0, r2
 800474e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004750:	460a      	mov	r2, r1
 8004752:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004754:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004756:	4413      	add	r3, r2
 8004758:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800475a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800475c:	2200      	movs	r2, #0
 800475e:	61bb      	str	r3, [r7, #24]
 8004760:	61fa      	str	r2, [r7, #28]
 8004762:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004766:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800476a:	f7fc fa4d 	bl	8000c08 <__aeabi_uldivmod>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	4613      	mov	r3, r2
 8004774:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004776:	e053      	b.n	8004820 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004778:	4b35      	ldr	r3, [pc, #212]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x180>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	099b      	lsrs	r3, r3, #6
 800477e:	2200      	movs	r2, #0
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	617a      	str	r2, [r7, #20]
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800478a:	f04f 0b00 	mov.w	fp, #0
 800478e:	4652      	mov	r2, sl
 8004790:	465b      	mov	r3, fp
 8004792:	f04f 0000 	mov.w	r0, #0
 8004796:	f04f 0100 	mov.w	r1, #0
 800479a:	0159      	lsls	r1, r3, #5
 800479c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047a0:	0150      	lsls	r0, r2, #5
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	ebb2 080a 	subs.w	r8, r2, sl
 80047aa:	eb63 090b 	sbc.w	r9, r3, fp
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	f04f 0300 	mov.w	r3, #0
 80047b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80047ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80047be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80047c2:	ebb2 0408 	subs.w	r4, r2, r8
 80047c6:	eb63 0509 	sbc.w	r5, r3, r9
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	00eb      	lsls	r3, r5, #3
 80047d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047d8:	00e2      	lsls	r2, r4, #3
 80047da:	4614      	mov	r4, r2
 80047dc:	461d      	mov	r5, r3
 80047de:	eb14 030a 	adds.w	r3, r4, sl
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	eb45 030b 	adc.w	r3, r5, fp
 80047e8:	607b      	str	r3, [r7, #4]
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047f6:	4629      	mov	r1, r5
 80047f8:	028b      	lsls	r3, r1, #10
 80047fa:	4621      	mov	r1, r4
 80047fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004800:	4621      	mov	r1, r4
 8004802:	028a      	lsls	r2, r1, #10
 8004804:	4610      	mov	r0, r2
 8004806:	4619      	mov	r1, r3
 8004808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800480a:	2200      	movs	r2, #0
 800480c:	60bb      	str	r3, [r7, #8]
 800480e:	60fa      	str	r2, [r7, #12]
 8004810:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004814:	f7fc f9f8 	bl	8000c08 <__aeabi_uldivmod>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4613      	mov	r3, r2
 800481e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004820:	4b0b      	ldr	r3, [pc, #44]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x180>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	0c1b      	lsrs	r3, r3, #16
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	3301      	adds	r3, #1
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004830:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004834:	fbb2 f3f3 	udiv	r3, r2, r3
 8004838:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800483a:	e002      	b.n	8004842 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800483c:	4b05      	ldr	r3, [pc, #20]	@ (8004854 <HAL_RCC_GetSysClockFreq+0x184>)
 800483e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004840:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004844:	4618      	mov	r0, r3
 8004846:	3740      	adds	r7, #64	@ 0x40
 8004848:	46bd      	mov	sp, r7
 800484a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800484e:	bf00      	nop
 8004850:	40023800 	.word	0x40023800
 8004854:	00f42400 	.word	0x00f42400
 8004858:	017d7840 	.word	0x017d7840

0800485c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004860:	4b03      	ldr	r3, [pc, #12]	@ (8004870 <HAL_RCC_GetHCLKFreq+0x14>)
 8004862:	681b      	ldr	r3, [r3, #0]
}
 8004864:	4618      	mov	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	2000000c 	.word	0x2000000c

08004874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004878:	f7ff fff0 	bl	800485c <HAL_RCC_GetHCLKFreq>
 800487c:	4602      	mov	r2, r0
 800487e:	4b05      	ldr	r3, [pc, #20]	@ (8004894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	0a9b      	lsrs	r3, r3, #10
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	4903      	ldr	r1, [pc, #12]	@ (8004898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800488a:	5ccb      	ldrb	r3, [r1, r3]
 800488c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004890:	4618      	mov	r0, r3
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40023800 	.word	0x40023800
 8004898:	0800a59c 	.word	0x0800a59c

0800489c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048a0:	f7ff ffdc 	bl	800485c <HAL_RCC_GetHCLKFreq>
 80048a4:	4602      	mov	r2, r0
 80048a6:	4b05      	ldr	r3, [pc, #20]	@ (80048bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	0b5b      	lsrs	r3, r3, #13
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	4903      	ldr	r1, [pc, #12]	@ (80048c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048b2:	5ccb      	ldrb	r3, [r1, r3]
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40023800 	.word	0x40023800
 80048c0:	0800a59c 	.word	0x0800a59c

080048c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	220f      	movs	r2, #15
 80048d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048d4:	4b12      	ldr	r3, [pc, #72]	@ (8004920 <HAL_RCC_GetClockConfig+0x5c>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 0203 	and.w	r2, r3, #3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80048e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004920 <HAL_RCC_GetClockConfig+0x5c>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80048ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004920 <HAL_RCC_GetClockConfig+0x5c>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80048f8:	4b09      	ldr	r3, [pc, #36]	@ (8004920 <HAL_RCC_GetClockConfig+0x5c>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	08db      	lsrs	r3, r3, #3
 80048fe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004906:	4b07      	ldr	r3, [pc, #28]	@ (8004924 <HAL_RCC_GetClockConfig+0x60>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0207 	and.w	r2, r3, #7
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	601a      	str	r2, [r3, #0]
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40023800 	.word	0x40023800
 8004924:	40023c00 	.word	0x40023c00

08004928 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e041      	b.n	80049be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d106      	bne.n	8004954 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f839 	bl	80049c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3304      	adds	r3, #4
 8004964:	4619      	mov	r1, r3
 8004966:	4610      	mov	r0, r2
 8004968:	f000 f9c0 	bl	8004cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
	...

080049dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d001      	beq.n	80049f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e04e      	b.n	8004a92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68da      	ldr	r2, [r3, #12]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0201 	orr.w	r2, r2, #1
 8004a0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a23      	ldr	r2, [pc, #140]	@ (8004aa0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d022      	beq.n	8004a5c <HAL_TIM_Base_Start_IT+0x80>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a1e:	d01d      	beq.n	8004a5c <HAL_TIM_Base_Start_IT+0x80>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a1f      	ldr	r2, [pc, #124]	@ (8004aa4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d018      	beq.n	8004a5c <HAL_TIM_Base_Start_IT+0x80>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8004aa8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d013      	beq.n	8004a5c <HAL_TIM_Base_Start_IT+0x80>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a1c      	ldr	r2, [pc, #112]	@ (8004aac <HAL_TIM_Base_Start_IT+0xd0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d00e      	beq.n	8004a5c <HAL_TIM_Base_Start_IT+0x80>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a1b      	ldr	r2, [pc, #108]	@ (8004ab0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d009      	beq.n	8004a5c <HAL_TIM_Base_Start_IT+0x80>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a19      	ldr	r2, [pc, #100]	@ (8004ab4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d004      	beq.n	8004a5c <HAL_TIM_Base_Start_IT+0x80>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a18      	ldr	r2, [pc, #96]	@ (8004ab8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d111      	bne.n	8004a80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b06      	cmp	r3, #6
 8004a6c:	d010      	beq.n	8004a90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f042 0201 	orr.w	r2, r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a7e:	e007      	b.n	8004a90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0201 	orr.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	40010000 	.word	0x40010000
 8004aa4:	40000400 	.word	0x40000400
 8004aa8:	40000800 	.word	0x40000800
 8004aac:	40000c00 	.word	0x40000c00
 8004ab0:	40010400 	.word	0x40010400
 8004ab4:	40014000 	.word	0x40014000
 8004ab8:	40001800 	.word	0x40001800

08004abc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d020      	beq.n	8004b20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d01b      	beq.n	8004b20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f06f 0202 	mvn.w	r2, #2
 8004af0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f8d2 	bl	8004cb0 <HAL_TIM_IC_CaptureCallback>
 8004b0c:	e005      	b.n	8004b1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f8c4 	bl	8004c9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f8d5 	bl	8004cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f003 0304 	and.w	r3, r3, #4
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d020      	beq.n	8004b6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d01b      	beq.n	8004b6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f06f 0204 	mvn.w	r2, #4
 8004b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2202      	movs	r2, #2
 8004b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f8ac 	bl	8004cb0 <HAL_TIM_IC_CaptureCallback>
 8004b58:	e005      	b.n	8004b66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f89e 	bl	8004c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f8af 	bl	8004cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d020      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f003 0308 	and.w	r3, r3, #8
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d01b      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f06f 0208 	mvn.w	r2, #8
 8004b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2204      	movs	r2, #4
 8004b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f886 	bl	8004cb0 <HAL_TIM_IC_CaptureCallback>
 8004ba4:	e005      	b.n	8004bb2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f878 	bl	8004c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f889 	bl	8004cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f003 0310 	and.w	r3, r3, #16
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d020      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f003 0310 	and.w	r3, r3, #16
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d01b      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0210 	mvn.w	r2, #16
 8004bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2208      	movs	r2, #8
 8004bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f860 	bl	8004cb0 <HAL_TIM_IC_CaptureCallback>
 8004bf0:	e005      	b.n	8004bfe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f852 	bl	8004c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 f863 	bl	8004cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00c      	beq.n	8004c28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d007      	beq.n	8004c28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0201 	mvn.w	r2, #1
 8004c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7fe fd00 	bl	8003628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00c      	beq.n	8004c4c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d007      	beq.n	8004c4c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f906 	bl	8004e58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00c      	beq.n	8004c70 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d007      	beq.n	8004c70 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f834 	bl	8004cd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f003 0320 	and.w	r3, r3, #32
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00c      	beq.n	8004c94 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f003 0320 	and.w	r3, r3, #32
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d007      	beq.n	8004c94 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f06f 0220 	mvn.w	r2, #32
 8004c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f8d8 	bl	8004e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c94:	bf00      	nop
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a46      	ldr	r2, [pc, #280]	@ (8004e18 <TIM_Base_SetConfig+0x12c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d013      	beq.n	8004d2c <TIM_Base_SetConfig+0x40>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d0a:	d00f      	beq.n	8004d2c <TIM_Base_SetConfig+0x40>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a43      	ldr	r2, [pc, #268]	@ (8004e1c <TIM_Base_SetConfig+0x130>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00b      	beq.n	8004d2c <TIM_Base_SetConfig+0x40>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a42      	ldr	r2, [pc, #264]	@ (8004e20 <TIM_Base_SetConfig+0x134>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d007      	beq.n	8004d2c <TIM_Base_SetConfig+0x40>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a41      	ldr	r2, [pc, #260]	@ (8004e24 <TIM_Base_SetConfig+0x138>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d003      	beq.n	8004d2c <TIM_Base_SetConfig+0x40>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a40      	ldr	r2, [pc, #256]	@ (8004e28 <TIM_Base_SetConfig+0x13c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d108      	bne.n	8004d3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a35      	ldr	r2, [pc, #212]	@ (8004e18 <TIM_Base_SetConfig+0x12c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d02b      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d4c:	d027      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a32      	ldr	r2, [pc, #200]	@ (8004e1c <TIM_Base_SetConfig+0x130>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d023      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a31      	ldr	r2, [pc, #196]	@ (8004e20 <TIM_Base_SetConfig+0x134>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d01f      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a30      	ldr	r2, [pc, #192]	@ (8004e24 <TIM_Base_SetConfig+0x138>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d01b      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a2f      	ldr	r2, [pc, #188]	@ (8004e28 <TIM_Base_SetConfig+0x13c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d017      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a2e      	ldr	r2, [pc, #184]	@ (8004e2c <TIM_Base_SetConfig+0x140>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d013      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a2d      	ldr	r2, [pc, #180]	@ (8004e30 <TIM_Base_SetConfig+0x144>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d00f      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a2c      	ldr	r2, [pc, #176]	@ (8004e34 <TIM_Base_SetConfig+0x148>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00b      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a2b      	ldr	r2, [pc, #172]	@ (8004e38 <TIM_Base_SetConfig+0x14c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d007      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a2a      	ldr	r2, [pc, #168]	@ (8004e3c <TIM_Base_SetConfig+0x150>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d003      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a29      	ldr	r2, [pc, #164]	@ (8004e40 <TIM_Base_SetConfig+0x154>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d108      	bne.n	8004db0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a10      	ldr	r2, [pc, #64]	@ (8004e18 <TIM_Base_SetConfig+0x12c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d003      	beq.n	8004de4 <TIM_Base_SetConfig+0xf8>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a12      	ldr	r2, [pc, #72]	@ (8004e28 <TIM_Base_SetConfig+0x13c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d103      	bne.n	8004dec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d105      	bne.n	8004e0a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	f023 0201 	bic.w	r2, r3, #1
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	611a      	str	r2, [r3, #16]
  }
}
 8004e0a:	bf00      	nop
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	40010000 	.word	0x40010000
 8004e1c:	40000400 	.word	0x40000400
 8004e20:	40000800 	.word	0x40000800
 8004e24:	40000c00 	.word	0x40000c00
 8004e28:	40010400 	.word	0x40010400
 8004e2c:	40014000 	.word	0x40014000
 8004e30:	40014400 	.word	0x40014400
 8004e34:	40014800 	.word	0x40014800
 8004e38:	40001800 	.word	0x40001800
 8004e3c:	40001c00 	.word	0x40001c00
 8004e40:	40002000 	.word	0x40002000

08004e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e042      	b.n	8004f04 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fe fc08 	bl	80036a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2224      	movs	r2, #36	@ 0x24
 8004e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004eae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f973 	bl	800519c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	691a      	ldr	r2, [r3, #16]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ec4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	695a      	ldr	r2, [r3, #20]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ed4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68da      	ldr	r2, [r3, #12]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ee4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b08a      	sub	sp, #40	@ 0x28
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d175      	bne.n	8005018 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <HAL_UART_Transmit+0x2c>
 8004f32:	88fb      	ldrh	r3, [r7, #6]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e06e      	b.n	800501a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2221      	movs	r2, #33	@ 0x21
 8004f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f4a:	f7fe fdd9 	bl	8003b00 <HAL_GetTick>
 8004f4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	88fa      	ldrh	r2, [r7, #6]
 8004f54:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	88fa      	ldrh	r2, [r7, #6]
 8004f5a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f64:	d108      	bne.n	8004f78 <HAL_UART_Transmit+0x6c>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d104      	bne.n	8004f78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	61bb      	str	r3, [r7, #24]
 8004f76:	e003      	b.n	8004f80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f80:	e02e      	b.n	8004fe0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	2180      	movs	r1, #128	@ 0x80
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 f848 	bl	8005022 <UART_WaitOnFlagUntilTimeout>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d005      	beq.n	8004fa4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e03a      	b.n	800501a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10b      	bne.n	8004fc2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fb8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	3302      	adds	r3, #2
 8004fbe:	61bb      	str	r3, [r7, #24]
 8004fc0:	e007      	b.n	8004fd2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	781a      	ldrb	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1cb      	bne.n	8004f82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2140      	movs	r1, #64	@ 0x40
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f814 	bl	8005022 <UART_WaitOnFlagUntilTimeout>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d005      	beq.n	800500c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e006      	b.n	800501a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2220      	movs	r2, #32
 8005010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005014:	2300      	movs	r3, #0
 8005016:	e000      	b.n	800501a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005018:	2302      	movs	r3, #2
  }
}
 800501a:	4618      	mov	r0, r3
 800501c:	3720      	adds	r7, #32
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b086      	sub	sp, #24
 8005026:	af00      	add	r7, sp, #0
 8005028:	60f8      	str	r0, [r7, #12]
 800502a:	60b9      	str	r1, [r7, #8]
 800502c:	603b      	str	r3, [r7, #0]
 800502e:	4613      	mov	r3, r2
 8005030:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005032:	e03b      	b.n	80050ac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503a:	d037      	beq.n	80050ac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503c:	f7fe fd60 	bl	8003b00 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	6a3a      	ldr	r2, [r7, #32]
 8005048:	429a      	cmp	r2, r3
 800504a:	d302      	bcc.n	8005052 <UART_WaitOnFlagUntilTimeout+0x30>
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e03a      	b.n	80050cc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b00      	cmp	r3, #0
 8005062:	d023      	beq.n	80050ac <UART_WaitOnFlagUntilTimeout+0x8a>
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2b80      	cmp	r3, #128	@ 0x80
 8005068:	d020      	beq.n	80050ac <UART_WaitOnFlagUntilTimeout+0x8a>
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b40      	cmp	r3, #64	@ 0x40
 800506e:	d01d      	beq.n	80050ac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0308 	and.w	r3, r3, #8
 800507a:	2b08      	cmp	r3, #8
 800507c:	d116      	bne.n	80050ac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800507e:	2300      	movs	r3, #0
 8005080:	617b      	str	r3, [r7, #20]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	617b      	str	r3, [r7, #20]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	617b      	str	r3, [r7, #20]
 8005092:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 f81d 	bl	80050d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2208      	movs	r2, #8
 800509e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e00f      	b.n	80050cc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	4013      	ands	r3, r2
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	bf0c      	ite	eq
 80050bc:	2301      	moveq	r3, #1
 80050be:	2300      	movne	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	461a      	mov	r2, r3
 80050c4:	79fb      	ldrb	r3, [r7, #7]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d0b4      	beq.n	8005034 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3718      	adds	r7, #24
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b095      	sub	sp, #84	@ 0x54
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	330c      	adds	r3, #12
 80050e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e6:	e853 3f00 	ldrex	r3, [r3]
 80050ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	330c      	adds	r3, #12
 80050fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050fc:	643a      	str	r2, [r7, #64]	@ 0x40
 80050fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005100:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005102:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005104:	e841 2300 	strex	r3, r2, [r1]
 8005108:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800510a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e5      	bne.n	80050dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3314      	adds	r3, #20
 8005116:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	e853 3f00 	ldrex	r3, [r3]
 800511e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	f023 0301 	bic.w	r3, r3, #1
 8005126:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3314      	adds	r3, #20
 800512e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005130:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005132:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005134:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005136:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005138:	e841 2300 	strex	r3, r2, [r1]
 800513c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800513e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1e5      	bne.n	8005110 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005148:	2b01      	cmp	r3, #1
 800514a:	d119      	bne.n	8005180 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	330c      	adds	r3, #12
 8005152:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	e853 3f00 	ldrex	r3, [r3]
 800515a:	60bb      	str	r3, [r7, #8]
   return(result);
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f023 0310 	bic.w	r3, r3, #16
 8005162:	647b      	str	r3, [r7, #68]	@ 0x44
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	330c      	adds	r3, #12
 800516a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800516c:	61ba      	str	r2, [r7, #24]
 800516e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005170:	6979      	ldr	r1, [r7, #20]
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	e841 2300 	strex	r3, r2, [r1]
 8005178:	613b      	str	r3, [r7, #16]
   return(result);
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1e5      	bne.n	800514c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2220      	movs	r2, #32
 8005184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800518e:	bf00      	nop
 8005190:	3754      	adds	r7, #84	@ 0x54
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
	...

0800519c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800519c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051a0:	b0c0      	sub	sp, #256	@ 0x100
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80051b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b8:	68d9      	ldr	r1, [r3, #12]
 80051ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	ea40 0301 	orr.w	r3, r0, r1
 80051c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	431a      	orrs	r2, r3
 80051d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	431a      	orrs	r2, r3
 80051dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80051f4:	f021 010c 	bic.w	r1, r1, #12
 80051f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005202:	430b      	orrs	r3, r1
 8005204:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005216:	6999      	ldr	r1, [r3, #24]
 8005218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	ea40 0301 	orr.w	r3, r0, r1
 8005222:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	4b8f      	ldr	r3, [pc, #572]	@ (8005468 <UART_SetConfig+0x2cc>)
 800522c:	429a      	cmp	r2, r3
 800522e:	d005      	beq.n	800523c <UART_SetConfig+0xa0>
 8005230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	4b8d      	ldr	r3, [pc, #564]	@ (800546c <UART_SetConfig+0x2d0>)
 8005238:	429a      	cmp	r2, r3
 800523a:	d104      	bne.n	8005246 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800523c:	f7ff fb2e 	bl	800489c <HAL_RCC_GetPCLK2Freq>
 8005240:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005244:	e003      	b.n	800524e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005246:	f7ff fb15 	bl	8004874 <HAL_RCC_GetPCLK1Freq>
 800524a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800524e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005258:	f040 810c 	bne.w	8005474 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800525c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005260:	2200      	movs	r2, #0
 8005262:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005266:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800526a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800526e:	4622      	mov	r2, r4
 8005270:	462b      	mov	r3, r5
 8005272:	1891      	adds	r1, r2, r2
 8005274:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005276:	415b      	adcs	r3, r3
 8005278:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800527a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800527e:	4621      	mov	r1, r4
 8005280:	eb12 0801 	adds.w	r8, r2, r1
 8005284:	4629      	mov	r1, r5
 8005286:	eb43 0901 	adc.w	r9, r3, r1
 800528a:	f04f 0200 	mov.w	r2, #0
 800528e:	f04f 0300 	mov.w	r3, #0
 8005292:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005296:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800529a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800529e:	4690      	mov	r8, r2
 80052a0:	4699      	mov	r9, r3
 80052a2:	4623      	mov	r3, r4
 80052a4:	eb18 0303 	adds.w	r3, r8, r3
 80052a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80052ac:	462b      	mov	r3, r5
 80052ae:	eb49 0303 	adc.w	r3, r9, r3
 80052b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80052b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80052c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80052c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80052ca:	460b      	mov	r3, r1
 80052cc:	18db      	adds	r3, r3, r3
 80052ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80052d0:	4613      	mov	r3, r2
 80052d2:	eb42 0303 	adc.w	r3, r2, r3
 80052d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80052d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80052dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80052e0:	f7fb fc92 	bl	8000c08 <__aeabi_uldivmod>
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	4b61      	ldr	r3, [pc, #388]	@ (8005470 <UART_SetConfig+0x2d4>)
 80052ea:	fba3 2302 	umull	r2, r3, r3, r2
 80052ee:	095b      	lsrs	r3, r3, #5
 80052f0:	011c      	lsls	r4, r3, #4
 80052f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052f6:	2200      	movs	r2, #0
 80052f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005300:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005304:	4642      	mov	r2, r8
 8005306:	464b      	mov	r3, r9
 8005308:	1891      	adds	r1, r2, r2
 800530a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800530c:	415b      	adcs	r3, r3
 800530e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005310:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005314:	4641      	mov	r1, r8
 8005316:	eb12 0a01 	adds.w	sl, r2, r1
 800531a:	4649      	mov	r1, r9
 800531c:	eb43 0b01 	adc.w	fp, r3, r1
 8005320:	f04f 0200 	mov.w	r2, #0
 8005324:	f04f 0300 	mov.w	r3, #0
 8005328:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800532c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005330:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005334:	4692      	mov	sl, r2
 8005336:	469b      	mov	fp, r3
 8005338:	4643      	mov	r3, r8
 800533a:	eb1a 0303 	adds.w	r3, sl, r3
 800533e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005342:	464b      	mov	r3, r9
 8005344:	eb4b 0303 	adc.w	r3, fp, r3
 8005348:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800534c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005358:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800535c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005360:	460b      	mov	r3, r1
 8005362:	18db      	adds	r3, r3, r3
 8005364:	643b      	str	r3, [r7, #64]	@ 0x40
 8005366:	4613      	mov	r3, r2
 8005368:	eb42 0303 	adc.w	r3, r2, r3
 800536c:	647b      	str	r3, [r7, #68]	@ 0x44
 800536e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005372:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005376:	f7fb fc47 	bl	8000c08 <__aeabi_uldivmod>
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	4611      	mov	r1, r2
 8005380:	4b3b      	ldr	r3, [pc, #236]	@ (8005470 <UART_SetConfig+0x2d4>)
 8005382:	fba3 2301 	umull	r2, r3, r3, r1
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	2264      	movs	r2, #100	@ 0x64
 800538a:	fb02 f303 	mul.w	r3, r2, r3
 800538e:	1acb      	subs	r3, r1, r3
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005396:	4b36      	ldr	r3, [pc, #216]	@ (8005470 <UART_SetConfig+0x2d4>)
 8005398:	fba3 2302 	umull	r2, r3, r3, r2
 800539c:	095b      	lsrs	r3, r3, #5
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80053a4:	441c      	add	r4, r3
 80053a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053aa:	2200      	movs	r2, #0
 80053ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80053b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80053b8:	4642      	mov	r2, r8
 80053ba:	464b      	mov	r3, r9
 80053bc:	1891      	adds	r1, r2, r2
 80053be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80053c0:	415b      	adcs	r3, r3
 80053c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80053c8:	4641      	mov	r1, r8
 80053ca:	1851      	adds	r1, r2, r1
 80053cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80053ce:	4649      	mov	r1, r9
 80053d0:	414b      	adcs	r3, r1
 80053d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80053e0:	4659      	mov	r1, fp
 80053e2:	00cb      	lsls	r3, r1, #3
 80053e4:	4651      	mov	r1, sl
 80053e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053ea:	4651      	mov	r1, sl
 80053ec:	00ca      	lsls	r2, r1, #3
 80053ee:	4610      	mov	r0, r2
 80053f0:	4619      	mov	r1, r3
 80053f2:	4603      	mov	r3, r0
 80053f4:	4642      	mov	r2, r8
 80053f6:	189b      	adds	r3, r3, r2
 80053f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053fc:	464b      	mov	r3, r9
 80053fe:	460a      	mov	r2, r1
 8005400:	eb42 0303 	adc.w	r3, r2, r3
 8005404:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005414:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005418:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800541c:	460b      	mov	r3, r1
 800541e:	18db      	adds	r3, r3, r3
 8005420:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005422:	4613      	mov	r3, r2
 8005424:	eb42 0303 	adc.w	r3, r2, r3
 8005428:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800542a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800542e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005432:	f7fb fbe9 	bl	8000c08 <__aeabi_uldivmod>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	4b0d      	ldr	r3, [pc, #52]	@ (8005470 <UART_SetConfig+0x2d4>)
 800543c:	fba3 1302 	umull	r1, r3, r3, r2
 8005440:	095b      	lsrs	r3, r3, #5
 8005442:	2164      	movs	r1, #100	@ 0x64
 8005444:	fb01 f303 	mul.w	r3, r1, r3
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	3332      	adds	r3, #50	@ 0x32
 800544e:	4a08      	ldr	r2, [pc, #32]	@ (8005470 <UART_SetConfig+0x2d4>)
 8005450:	fba2 2303 	umull	r2, r3, r2, r3
 8005454:	095b      	lsrs	r3, r3, #5
 8005456:	f003 0207 	and.w	r2, r3, #7
 800545a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4422      	add	r2, r4
 8005462:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005464:	e106      	b.n	8005674 <UART_SetConfig+0x4d8>
 8005466:	bf00      	nop
 8005468:	40011000 	.word	0x40011000
 800546c:	40011400 	.word	0x40011400
 8005470:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005474:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005478:	2200      	movs	r2, #0
 800547a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800547e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005482:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005486:	4642      	mov	r2, r8
 8005488:	464b      	mov	r3, r9
 800548a:	1891      	adds	r1, r2, r2
 800548c:	6239      	str	r1, [r7, #32]
 800548e:	415b      	adcs	r3, r3
 8005490:	627b      	str	r3, [r7, #36]	@ 0x24
 8005492:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005496:	4641      	mov	r1, r8
 8005498:	1854      	adds	r4, r2, r1
 800549a:	4649      	mov	r1, r9
 800549c:	eb43 0501 	adc.w	r5, r3, r1
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	f04f 0300 	mov.w	r3, #0
 80054a8:	00eb      	lsls	r3, r5, #3
 80054aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054ae:	00e2      	lsls	r2, r4, #3
 80054b0:	4614      	mov	r4, r2
 80054b2:	461d      	mov	r5, r3
 80054b4:	4643      	mov	r3, r8
 80054b6:	18e3      	adds	r3, r4, r3
 80054b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054bc:	464b      	mov	r3, r9
 80054be:	eb45 0303 	adc.w	r3, r5, r3
 80054c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80054c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80054d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80054d6:	f04f 0200 	mov.w	r2, #0
 80054da:	f04f 0300 	mov.w	r3, #0
 80054de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80054e2:	4629      	mov	r1, r5
 80054e4:	008b      	lsls	r3, r1, #2
 80054e6:	4621      	mov	r1, r4
 80054e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054ec:	4621      	mov	r1, r4
 80054ee:	008a      	lsls	r2, r1, #2
 80054f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80054f4:	f7fb fb88 	bl	8000c08 <__aeabi_uldivmod>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	4b60      	ldr	r3, [pc, #384]	@ (8005680 <UART_SetConfig+0x4e4>)
 80054fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005502:	095b      	lsrs	r3, r3, #5
 8005504:	011c      	lsls	r4, r3, #4
 8005506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800550a:	2200      	movs	r2, #0
 800550c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005510:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005514:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005518:	4642      	mov	r2, r8
 800551a:	464b      	mov	r3, r9
 800551c:	1891      	adds	r1, r2, r2
 800551e:	61b9      	str	r1, [r7, #24]
 8005520:	415b      	adcs	r3, r3
 8005522:	61fb      	str	r3, [r7, #28]
 8005524:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005528:	4641      	mov	r1, r8
 800552a:	1851      	adds	r1, r2, r1
 800552c:	6139      	str	r1, [r7, #16]
 800552e:	4649      	mov	r1, r9
 8005530:	414b      	adcs	r3, r1
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	f04f 0200 	mov.w	r2, #0
 8005538:	f04f 0300 	mov.w	r3, #0
 800553c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005540:	4659      	mov	r1, fp
 8005542:	00cb      	lsls	r3, r1, #3
 8005544:	4651      	mov	r1, sl
 8005546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800554a:	4651      	mov	r1, sl
 800554c:	00ca      	lsls	r2, r1, #3
 800554e:	4610      	mov	r0, r2
 8005550:	4619      	mov	r1, r3
 8005552:	4603      	mov	r3, r0
 8005554:	4642      	mov	r2, r8
 8005556:	189b      	adds	r3, r3, r2
 8005558:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800555c:	464b      	mov	r3, r9
 800555e:	460a      	mov	r2, r1
 8005560:	eb42 0303 	adc.w	r3, r2, r3
 8005564:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005572:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005580:	4649      	mov	r1, r9
 8005582:	008b      	lsls	r3, r1, #2
 8005584:	4641      	mov	r1, r8
 8005586:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800558a:	4641      	mov	r1, r8
 800558c:	008a      	lsls	r2, r1, #2
 800558e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005592:	f7fb fb39 	bl	8000c08 <__aeabi_uldivmod>
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	4611      	mov	r1, r2
 800559c:	4b38      	ldr	r3, [pc, #224]	@ (8005680 <UART_SetConfig+0x4e4>)
 800559e:	fba3 2301 	umull	r2, r3, r3, r1
 80055a2:	095b      	lsrs	r3, r3, #5
 80055a4:	2264      	movs	r2, #100	@ 0x64
 80055a6:	fb02 f303 	mul.w	r3, r2, r3
 80055aa:	1acb      	subs	r3, r1, r3
 80055ac:	011b      	lsls	r3, r3, #4
 80055ae:	3332      	adds	r3, #50	@ 0x32
 80055b0:	4a33      	ldr	r2, [pc, #204]	@ (8005680 <UART_SetConfig+0x4e4>)
 80055b2:	fba2 2303 	umull	r2, r3, r2, r3
 80055b6:	095b      	lsrs	r3, r3, #5
 80055b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055bc:	441c      	add	r4, r3
 80055be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055c2:	2200      	movs	r2, #0
 80055c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80055c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80055c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80055cc:	4642      	mov	r2, r8
 80055ce:	464b      	mov	r3, r9
 80055d0:	1891      	adds	r1, r2, r2
 80055d2:	60b9      	str	r1, [r7, #8]
 80055d4:	415b      	adcs	r3, r3
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055dc:	4641      	mov	r1, r8
 80055de:	1851      	adds	r1, r2, r1
 80055e0:	6039      	str	r1, [r7, #0]
 80055e2:	4649      	mov	r1, r9
 80055e4:	414b      	adcs	r3, r1
 80055e6:	607b      	str	r3, [r7, #4]
 80055e8:	f04f 0200 	mov.w	r2, #0
 80055ec:	f04f 0300 	mov.w	r3, #0
 80055f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055f4:	4659      	mov	r1, fp
 80055f6:	00cb      	lsls	r3, r1, #3
 80055f8:	4651      	mov	r1, sl
 80055fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055fe:	4651      	mov	r1, sl
 8005600:	00ca      	lsls	r2, r1, #3
 8005602:	4610      	mov	r0, r2
 8005604:	4619      	mov	r1, r3
 8005606:	4603      	mov	r3, r0
 8005608:	4642      	mov	r2, r8
 800560a:	189b      	adds	r3, r3, r2
 800560c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800560e:	464b      	mov	r3, r9
 8005610:	460a      	mov	r2, r1
 8005612:	eb42 0303 	adc.w	r3, r2, r3
 8005616:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	663b      	str	r3, [r7, #96]	@ 0x60
 8005622:	667a      	str	r2, [r7, #100]	@ 0x64
 8005624:	f04f 0200 	mov.w	r2, #0
 8005628:	f04f 0300 	mov.w	r3, #0
 800562c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005630:	4649      	mov	r1, r9
 8005632:	008b      	lsls	r3, r1, #2
 8005634:	4641      	mov	r1, r8
 8005636:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800563a:	4641      	mov	r1, r8
 800563c:	008a      	lsls	r2, r1, #2
 800563e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005642:	f7fb fae1 	bl	8000c08 <__aeabi_uldivmod>
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
 800564a:	4b0d      	ldr	r3, [pc, #52]	@ (8005680 <UART_SetConfig+0x4e4>)
 800564c:	fba3 1302 	umull	r1, r3, r3, r2
 8005650:	095b      	lsrs	r3, r3, #5
 8005652:	2164      	movs	r1, #100	@ 0x64
 8005654:	fb01 f303 	mul.w	r3, r1, r3
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	3332      	adds	r3, #50	@ 0x32
 800565e:	4a08      	ldr	r2, [pc, #32]	@ (8005680 <UART_SetConfig+0x4e4>)
 8005660:	fba2 2303 	umull	r2, r3, r2, r3
 8005664:	095b      	lsrs	r3, r3, #5
 8005666:	f003 020f 	and.w	r2, r3, #15
 800566a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4422      	add	r2, r4
 8005672:	609a      	str	r2, [r3, #8]
}
 8005674:	bf00      	nop
 8005676:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800567a:	46bd      	mov	sp, r7
 800567c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005680:	51eb851f 	.word	0x51eb851f

08005684 <malloc>:
 8005684:	4b02      	ldr	r3, [pc, #8]	@ (8005690 <malloc+0xc>)
 8005686:	4601      	mov	r1, r0
 8005688:	6818      	ldr	r0, [r3, #0]
 800568a:	f000 b82d 	b.w	80056e8 <_malloc_r>
 800568e:	bf00      	nop
 8005690:	20000190 	.word	0x20000190

08005694 <free>:
 8005694:	4b02      	ldr	r3, [pc, #8]	@ (80056a0 <free+0xc>)
 8005696:	4601      	mov	r1, r0
 8005698:	6818      	ldr	r0, [r3, #0]
 800569a:	f002 bd15 	b.w	80080c8 <_free_r>
 800569e:	bf00      	nop
 80056a0:	20000190 	.word	0x20000190

080056a4 <sbrk_aligned>:
 80056a4:	b570      	push	{r4, r5, r6, lr}
 80056a6:	4e0f      	ldr	r6, [pc, #60]	@ (80056e4 <sbrk_aligned+0x40>)
 80056a8:	460c      	mov	r4, r1
 80056aa:	6831      	ldr	r1, [r6, #0]
 80056ac:	4605      	mov	r5, r0
 80056ae:	b911      	cbnz	r1, 80056b6 <sbrk_aligned+0x12>
 80056b0:	f001 fe56 	bl	8007360 <_sbrk_r>
 80056b4:	6030      	str	r0, [r6, #0]
 80056b6:	4621      	mov	r1, r4
 80056b8:	4628      	mov	r0, r5
 80056ba:	f001 fe51 	bl	8007360 <_sbrk_r>
 80056be:	1c43      	adds	r3, r0, #1
 80056c0:	d103      	bne.n	80056ca <sbrk_aligned+0x26>
 80056c2:	f04f 34ff 	mov.w	r4, #4294967295
 80056c6:	4620      	mov	r0, r4
 80056c8:	bd70      	pop	{r4, r5, r6, pc}
 80056ca:	1cc4      	adds	r4, r0, #3
 80056cc:	f024 0403 	bic.w	r4, r4, #3
 80056d0:	42a0      	cmp	r0, r4
 80056d2:	d0f8      	beq.n	80056c6 <sbrk_aligned+0x22>
 80056d4:	1a21      	subs	r1, r4, r0
 80056d6:	4628      	mov	r0, r5
 80056d8:	f001 fe42 	bl	8007360 <_sbrk_r>
 80056dc:	3001      	adds	r0, #1
 80056de:	d1f2      	bne.n	80056c6 <sbrk_aligned+0x22>
 80056e0:	e7ef      	b.n	80056c2 <sbrk_aligned+0x1e>
 80056e2:	bf00      	nop
 80056e4:	2000029c 	.word	0x2000029c

080056e8 <_malloc_r>:
 80056e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056ec:	1ccd      	adds	r5, r1, #3
 80056ee:	f025 0503 	bic.w	r5, r5, #3
 80056f2:	3508      	adds	r5, #8
 80056f4:	2d0c      	cmp	r5, #12
 80056f6:	bf38      	it	cc
 80056f8:	250c      	movcc	r5, #12
 80056fa:	2d00      	cmp	r5, #0
 80056fc:	4606      	mov	r6, r0
 80056fe:	db01      	blt.n	8005704 <_malloc_r+0x1c>
 8005700:	42a9      	cmp	r1, r5
 8005702:	d904      	bls.n	800570e <_malloc_r+0x26>
 8005704:	230c      	movs	r3, #12
 8005706:	6033      	str	r3, [r6, #0]
 8005708:	2000      	movs	r0, #0
 800570a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800570e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057e4 <_malloc_r+0xfc>
 8005712:	f000 f869 	bl	80057e8 <__malloc_lock>
 8005716:	f8d8 3000 	ldr.w	r3, [r8]
 800571a:	461c      	mov	r4, r3
 800571c:	bb44      	cbnz	r4, 8005770 <_malloc_r+0x88>
 800571e:	4629      	mov	r1, r5
 8005720:	4630      	mov	r0, r6
 8005722:	f7ff ffbf 	bl	80056a4 <sbrk_aligned>
 8005726:	1c43      	adds	r3, r0, #1
 8005728:	4604      	mov	r4, r0
 800572a:	d158      	bne.n	80057de <_malloc_r+0xf6>
 800572c:	f8d8 4000 	ldr.w	r4, [r8]
 8005730:	4627      	mov	r7, r4
 8005732:	2f00      	cmp	r7, #0
 8005734:	d143      	bne.n	80057be <_malloc_r+0xd6>
 8005736:	2c00      	cmp	r4, #0
 8005738:	d04b      	beq.n	80057d2 <_malloc_r+0xea>
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	4639      	mov	r1, r7
 800573e:	4630      	mov	r0, r6
 8005740:	eb04 0903 	add.w	r9, r4, r3
 8005744:	f001 fe0c 	bl	8007360 <_sbrk_r>
 8005748:	4581      	cmp	r9, r0
 800574a:	d142      	bne.n	80057d2 <_malloc_r+0xea>
 800574c:	6821      	ldr	r1, [r4, #0]
 800574e:	1a6d      	subs	r5, r5, r1
 8005750:	4629      	mov	r1, r5
 8005752:	4630      	mov	r0, r6
 8005754:	f7ff ffa6 	bl	80056a4 <sbrk_aligned>
 8005758:	3001      	adds	r0, #1
 800575a:	d03a      	beq.n	80057d2 <_malloc_r+0xea>
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	442b      	add	r3, r5
 8005760:	6023      	str	r3, [r4, #0]
 8005762:	f8d8 3000 	ldr.w	r3, [r8]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	bb62      	cbnz	r2, 80057c4 <_malloc_r+0xdc>
 800576a:	f8c8 7000 	str.w	r7, [r8]
 800576e:	e00f      	b.n	8005790 <_malloc_r+0xa8>
 8005770:	6822      	ldr	r2, [r4, #0]
 8005772:	1b52      	subs	r2, r2, r5
 8005774:	d420      	bmi.n	80057b8 <_malloc_r+0xd0>
 8005776:	2a0b      	cmp	r2, #11
 8005778:	d917      	bls.n	80057aa <_malloc_r+0xc2>
 800577a:	1961      	adds	r1, r4, r5
 800577c:	42a3      	cmp	r3, r4
 800577e:	6025      	str	r5, [r4, #0]
 8005780:	bf18      	it	ne
 8005782:	6059      	strne	r1, [r3, #4]
 8005784:	6863      	ldr	r3, [r4, #4]
 8005786:	bf08      	it	eq
 8005788:	f8c8 1000 	streq.w	r1, [r8]
 800578c:	5162      	str	r2, [r4, r5]
 800578e:	604b      	str	r3, [r1, #4]
 8005790:	4630      	mov	r0, r6
 8005792:	f000 f82f 	bl	80057f4 <__malloc_unlock>
 8005796:	f104 000b 	add.w	r0, r4, #11
 800579a:	1d23      	adds	r3, r4, #4
 800579c:	f020 0007 	bic.w	r0, r0, #7
 80057a0:	1ac2      	subs	r2, r0, r3
 80057a2:	bf1c      	itt	ne
 80057a4:	1a1b      	subne	r3, r3, r0
 80057a6:	50a3      	strne	r3, [r4, r2]
 80057a8:	e7af      	b.n	800570a <_malloc_r+0x22>
 80057aa:	6862      	ldr	r2, [r4, #4]
 80057ac:	42a3      	cmp	r3, r4
 80057ae:	bf0c      	ite	eq
 80057b0:	f8c8 2000 	streq.w	r2, [r8]
 80057b4:	605a      	strne	r2, [r3, #4]
 80057b6:	e7eb      	b.n	8005790 <_malloc_r+0xa8>
 80057b8:	4623      	mov	r3, r4
 80057ba:	6864      	ldr	r4, [r4, #4]
 80057bc:	e7ae      	b.n	800571c <_malloc_r+0x34>
 80057be:	463c      	mov	r4, r7
 80057c0:	687f      	ldr	r7, [r7, #4]
 80057c2:	e7b6      	b.n	8005732 <_malloc_r+0x4a>
 80057c4:	461a      	mov	r2, r3
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	42a3      	cmp	r3, r4
 80057ca:	d1fb      	bne.n	80057c4 <_malloc_r+0xdc>
 80057cc:	2300      	movs	r3, #0
 80057ce:	6053      	str	r3, [r2, #4]
 80057d0:	e7de      	b.n	8005790 <_malloc_r+0xa8>
 80057d2:	230c      	movs	r3, #12
 80057d4:	6033      	str	r3, [r6, #0]
 80057d6:	4630      	mov	r0, r6
 80057d8:	f000 f80c 	bl	80057f4 <__malloc_unlock>
 80057dc:	e794      	b.n	8005708 <_malloc_r+0x20>
 80057de:	6005      	str	r5, [r0, #0]
 80057e0:	e7d6      	b.n	8005790 <_malloc_r+0xa8>
 80057e2:	bf00      	nop
 80057e4:	200002a0 	.word	0x200002a0

080057e8 <__malloc_lock>:
 80057e8:	4801      	ldr	r0, [pc, #4]	@ (80057f0 <__malloc_lock+0x8>)
 80057ea:	f001 be06 	b.w	80073fa <__retarget_lock_acquire_recursive>
 80057ee:	bf00      	nop
 80057f0:	200003e4 	.word	0x200003e4

080057f4 <__malloc_unlock>:
 80057f4:	4801      	ldr	r0, [pc, #4]	@ (80057fc <__malloc_unlock+0x8>)
 80057f6:	f001 be01 	b.w	80073fc <__retarget_lock_release_recursive>
 80057fa:	bf00      	nop
 80057fc:	200003e4 	.word	0x200003e4

08005800 <realloc>:
 8005800:	4b02      	ldr	r3, [pc, #8]	@ (800580c <realloc+0xc>)
 8005802:	460a      	mov	r2, r1
 8005804:	4601      	mov	r1, r0
 8005806:	6818      	ldr	r0, [r3, #0]
 8005808:	f000 b802 	b.w	8005810 <_realloc_r>
 800580c:	20000190 	.word	0x20000190

08005810 <_realloc_r>:
 8005810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005814:	4680      	mov	r8, r0
 8005816:	4615      	mov	r5, r2
 8005818:	460c      	mov	r4, r1
 800581a:	b921      	cbnz	r1, 8005826 <_realloc_r+0x16>
 800581c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005820:	4611      	mov	r1, r2
 8005822:	f7ff bf61 	b.w	80056e8 <_malloc_r>
 8005826:	b92a      	cbnz	r2, 8005834 <_realloc_r+0x24>
 8005828:	f002 fc4e 	bl	80080c8 <_free_r>
 800582c:	2400      	movs	r4, #0
 800582e:	4620      	mov	r0, r4
 8005830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005834:	f003 fc90 	bl	8009158 <_malloc_usable_size_r>
 8005838:	4285      	cmp	r5, r0
 800583a:	4606      	mov	r6, r0
 800583c:	d802      	bhi.n	8005844 <_realloc_r+0x34>
 800583e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005842:	d8f4      	bhi.n	800582e <_realloc_r+0x1e>
 8005844:	4629      	mov	r1, r5
 8005846:	4640      	mov	r0, r8
 8005848:	f7ff ff4e 	bl	80056e8 <_malloc_r>
 800584c:	4607      	mov	r7, r0
 800584e:	2800      	cmp	r0, #0
 8005850:	d0ec      	beq.n	800582c <_realloc_r+0x1c>
 8005852:	42b5      	cmp	r5, r6
 8005854:	462a      	mov	r2, r5
 8005856:	4621      	mov	r1, r4
 8005858:	bf28      	it	cs
 800585a:	4632      	movcs	r2, r6
 800585c:	f001 fdcf 	bl	80073fe <memcpy>
 8005860:	4621      	mov	r1, r4
 8005862:	4640      	mov	r0, r8
 8005864:	f002 fc30 	bl	80080c8 <_free_r>
 8005868:	463c      	mov	r4, r7
 800586a:	e7e0      	b.n	800582e <_realloc_r+0x1e>

0800586c <sulp>:
 800586c:	b570      	push	{r4, r5, r6, lr}
 800586e:	4604      	mov	r4, r0
 8005870:	460d      	mov	r5, r1
 8005872:	ec45 4b10 	vmov	d0, r4, r5
 8005876:	4616      	mov	r6, r2
 8005878:	f003 fb30 	bl	8008edc <__ulp>
 800587c:	ec51 0b10 	vmov	r0, r1, d0
 8005880:	b17e      	cbz	r6, 80058a2 <sulp+0x36>
 8005882:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005886:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800588a:	2b00      	cmp	r3, #0
 800588c:	dd09      	ble.n	80058a2 <sulp+0x36>
 800588e:	051b      	lsls	r3, r3, #20
 8005890:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005894:	2400      	movs	r4, #0
 8005896:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800589a:	4622      	mov	r2, r4
 800589c:	462b      	mov	r3, r5
 800589e:	f7fa febb 	bl	8000618 <__aeabi_dmul>
 80058a2:	ec41 0b10 	vmov	d0, r0, r1
 80058a6:	bd70      	pop	{r4, r5, r6, pc}

080058a8 <_strtod_l>:
 80058a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ac:	b09f      	sub	sp, #124	@ 0x7c
 80058ae:	460c      	mov	r4, r1
 80058b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80058b2:	2200      	movs	r2, #0
 80058b4:	921a      	str	r2, [sp, #104]	@ 0x68
 80058b6:	9005      	str	r0, [sp, #20]
 80058b8:	f04f 0a00 	mov.w	sl, #0
 80058bc:	f04f 0b00 	mov.w	fp, #0
 80058c0:	460a      	mov	r2, r1
 80058c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80058c4:	7811      	ldrb	r1, [r2, #0]
 80058c6:	292b      	cmp	r1, #43	@ 0x2b
 80058c8:	d04a      	beq.n	8005960 <_strtod_l+0xb8>
 80058ca:	d838      	bhi.n	800593e <_strtod_l+0x96>
 80058cc:	290d      	cmp	r1, #13
 80058ce:	d832      	bhi.n	8005936 <_strtod_l+0x8e>
 80058d0:	2908      	cmp	r1, #8
 80058d2:	d832      	bhi.n	800593a <_strtod_l+0x92>
 80058d4:	2900      	cmp	r1, #0
 80058d6:	d03b      	beq.n	8005950 <_strtod_l+0xa8>
 80058d8:	2200      	movs	r2, #0
 80058da:	920b      	str	r2, [sp, #44]	@ 0x2c
 80058dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80058de:	782a      	ldrb	r2, [r5, #0]
 80058e0:	2a30      	cmp	r2, #48	@ 0x30
 80058e2:	f040 80b3 	bne.w	8005a4c <_strtod_l+0x1a4>
 80058e6:	786a      	ldrb	r2, [r5, #1]
 80058e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80058ec:	2a58      	cmp	r2, #88	@ 0x58
 80058ee:	d16e      	bne.n	80059ce <_strtod_l+0x126>
 80058f0:	9302      	str	r3, [sp, #8]
 80058f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058f4:	9301      	str	r3, [sp, #4]
 80058f6:	ab1a      	add	r3, sp, #104	@ 0x68
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	4a8e      	ldr	r2, [pc, #568]	@ (8005b34 <_strtod_l+0x28c>)
 80058fc:	9805      	ldr	r0, [sp, #20]
 80058fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005900:	a919      	add	r1, sp, #100	@ 0x64
 8005902:	f002 fc93 	bl	800822c <__gethex>
 8005906:	f010 060f 	ands.w	r6, r0, #15
 800590a:	4604      	mov	r4, r0
 800590c:	d005      	beq.n	800591a <_strtod_l+0x72>
 800590e:	2e06      	cmp	r6, #6
 8005910:	d128      	bne.n	8005964 <_strtod_l+0xbc>
 8005912:	3501      	adds	r5, #1
 8005914:	2300      	movs	r3, #0
 8005916:	9519      	str	r5, [sp, #100]	@ 0x64
 8005918:	930b      	str	r3, [sp, #44]	@ 0x2c
 800591a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800591c:	2b00      	cmp	r3, #0
 800591e:	f040 858e 	bne.w	800643e <_strtod_l+0xb96>
 8005922:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005924:	b1cb      	cbz	r3, 800595a <_strtod_l+0xb2>
 8005926:	4652      	mov	r2, sl
 8005928:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800592c:	ec43 2b10 	vmov	d0, r2, r3
 8005930:	b01f      	add	sp, #124	@ 0x7c
 8005932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005936:	2920      	cmp	r1, #32
 8005938:	d1ce      	bne.n	80058d8 <_strtod_l+0x30>
 800593a:	3201      	adds	r2, #1
 800593c:	e7c1      	b.n	80058c2 <_strtod_l+0x1a>
 800593e:	292d      	cmp	r1, #45	@ 0x2d
 8005940:	d1ca      	bne.n	80058d8 <_strtod_l+0x30>
 8005942:	2101      	movs	r1, #1
 8005944:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005946:	1c51      	adds	r1, r2, #1
 8005948:	9119      	str	r1, [sp, #100]	@ 0x64
 800594a:	7852      	ldrb	r2, [r2, #1]
 800594c:	2a00      	cmp	r2, #0
 800594e:	d1c5      	bne.n	80058dc <_strtod_l+0x34>
 8005950:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005952:	9419      	str	r4, [sp, #100]	@ 0x64
 8005954:	2b00      	cmp	r3, #0
 8005956:	f040 8570 	bne.w	800643a <_strtod_l+0xb92>
 800595a:	4652      	mov	r2, sl
 800595c:	465b      	mov	r3, fp
 800595e:	e7e5      	b.n	800592c <_strtod_l+0x84>
 8005960:	2100      	movs	r1, #0
 8005962:	e7ef      	b.n	8005944 <_strtod_l+0x9c>
 8005964:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005966:	b13a      	cbz	r2, 8005978 <_strtod_l+0xd0>
 8005968:	2135      	movs	r1, #53	@ 0x35
 800596a:	a81c      	add	r0, sp, #112	@ 0x70
 800596c:	f003 fbb0 	bl	80090d0 <__copybits>
 8005970:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005972:	9805      	ldr	r0, [sp, #20]
 8005974:	f002 ff7e 	bl	8008874 <_Bfree>
 8005978:	3e01      	subs	r6, #1
 800597a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800597c:	2e04      	cmp	r6, #4
 800597e:	d806      	bhi.n	800598e <_strtod_l+0xe6>
 8005980:	e8df f006 	tbb	[pc, r6]
 8005984:	201d0314 	.word	0x201d0314
 8005988:	14          	.byte	0x14
 8005989:	00          	.byte	0x00
 800598a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800598e:	05e1      	lsls	r1, r4, #23
 8005990:	bf48      	it	mi
 8005992:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005996:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800599a:	0d1b      	lsrs	r3, r3, #20
 800599c:	051b      	lsls	r3, r3, #20
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1bb      	bne.n	800591a <_strtod_l+0x72>
 80059a2:	f001 fcff 	bl	80073a4 <__errno>
 80059a6:	2322      	movs	r3, #34	@ 0x22
 80059a8:	6003      	str	r3, [r0, #0]
 80059aa:	e7b6      	b.n	800591a <_strtod_l+0x72>
 80059ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80059b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80059b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80059b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80059bc:	e7e7      	b.n	800598e <_strtod_l+0xe6>
 80059be:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8005b3c <_strtod_l+0x294>
 80059c2:	e7e4      	b.n	800598e <_strtod_l+0xe6>
 80059c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80059c8:	f04f 3aff 	mov.w	sl, #4294967295
 80059cc:	e7df      	b.n	800598e <_strtod_l+0xe6>
 80059ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80059d0:	1c5a      	adds	r2, r3, #1
 80059d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80059d4:	785b      	ldrb	r3, [r3, #1]
 80059d6:	2b30      	cmp	r3, #48	@ 0x30
 80059d8:	d0f9      	beq.n	80059ce <_strtod_l+0x126>
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d09d      	beq.n	800591a <_strtod_l+0x72>
 80059de:	2301      	movs	r3, #1
 80059e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80059e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80059e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80059e6:	2300      	movs	r3, #0
 80059e8:	9308      	str	r3, [sp, #32]
 80059ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80059ec:	461f      	mov	r7, r3
 80059ee:	220a      	movs	r2, #10
 80059f0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80059f2:	7805      	ldrb	r5, [r0, #0]
 80059f4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80059f8:	b2d9      	uxtb	r1, r3
 80059fa:	2909      	cmp	r1, #9
 80059fc:	d928      	bls.n	8005a50 <_strtod_l+0x1a8>
 80059fe:	494e      	ldr	r1, [pc, #312]	@ (8005b38 <_strtod_l+0x290>)
 8005a00:	2201      	movs	r2, #1
 8005a02:	f001 fc63 	bl	80072cc <strncmp>
 8005a06:	2800      	cmp	r0, #0
 8005a08:	d032      	beq.n	8005a70 <_strtod_l+0x1c8>
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	462a      	mov	r2, r5
 8005a0e:	4681      	mov	r9, r0
 8005a10:	463d      	mov	r5, r7
 8005a12:	4603      	mov	r3, r0
 8005a14:	2a65      	cmp	r2, #101	@ 0x65
 8005a16:	d001      	beq.n	8005a1c <_strtod_l+0x174>
 8005a18:	2a45      	cmp	r2, #69	@ 0x45
 8005a1a:	d114      	bne.n	8005a46 <_strtod_l+0x19e>
 8005a1c:	b91d      	cbnz	r5, 8005a26 <_strtod_l+0x17e>
 8005a1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a20:	4302      	orrs	r2, r0
 8005a22:	d095      	beq.n	8005950 <_strtod_l+0xa8>
 8005a24:	2500      	movs	r5, #0
 8005a26:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005a28:	1c62      	adds	r2, r4, #1
 8005a2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8005a2c:	7862      	ldrb	r2, [r4, #1]
 8005a2e:	2a2b      	cmp	r2, #43	@ 0x2b
 8005a30:	d077      	beq.n	8005b22 <_strtod_l+0x27a>
 8005a32:	2a2d      	cmp	r2, #45	@ 0x2d
 8005a34:	d07b      	beq.n	8005b2e <_strtod_l+0x286>
 8005a36:	f04f 0c00 	mov.w	ip, #0
 8005a3a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005a3e:	2909      	cmp	r1, #9
 8005a40:	f240 8082 	bls.w	8005b48 <_strtod_l+0x2a0>
 8005a44:	9419      	str	r4, [sp, #100]	@ 0x64
 8005a46:	f04f 0800 	mov.w	r8, #0
 8005a4a:	e0a2      	b.n	8005b92 <_strtod_l+0x2ea>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	e7c7      	b.n	80059e0 <_strtod_l+0x138>
 8005a50:	2f08      	cmp	r7, #8
 8005a52:	bfd5      	itete	le
 8005a54:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005a56:	9908      	ldrgt	r1, [sp, #32]
 8005a58:	fb02 3301 	mlale	r3, r2, r1, r3
 8005a5c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005a60:	f100 0001 	add.w	r0, r0, #1
 8005a64:	bfd4      	ite	le
 8005a66:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005a68:	9308      	strgt	r3, [sp, #32]
 8005a6a:	3701      	adds	r7, #1
 8005a6c:	9019      	str	r0, [sp, #100]	@ 0x64
 8005a6e:	e7bf      	b.n	80059f0 <_strtod_l+0x148>
 8005a70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	9219      	str	r2, [sp, #100]	@ 0x64
 8005a76:	785a      	ldrb	r2, [r3, #1]
 8005a78:	b37f      	cbz	r7, 8005ada <_strtod_l+0x232>
 8005a7a:	4681      	mov	r9, r0
 8005a7c:	463d      	mov	r5, r7
 8005a7e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005a82:	2b09      	cmp	r3, #9
 8005a84:	d912      	bls.n	8005aac <_strtod_l+0x204>
 8005a86:	2301      	movs	r3, #1
 8005a88:	e7c4      	b.n	8005a14 <_strtod_l+0x16c>
 8005a8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005a90:	785a      	ldrb	r2, [r3, #1]
 8005a92:	3001      	adds	r0, #1
 8005a94:	2a30      	cmp	r2, #48	@ 0x30
 8005a96:	d0f8      	beq.n	8005a8a <_strtod_l+0x1e2>
 8005a98:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	f200 84d3 	bhi.w	8006448 <_strtod_l+0xba0>
 8005aa2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005aa4:	930c      	str	r3, [sp, #48]	@ 0x30
 8005aa6:	4681      	mov	r9, r0
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	4605      	mov	r5, r0
 8005aac:	3a30      	subs	r2, #48	@ 0x30
 8005aae:	f100 0301 	add.w	r3, r0, #1
 8005ab2:	d02a      	beq.n	8005b0a <_strtod_l+0x262>
 8005ab4:	4499      	add	r9, r3
 8005ab6:	eb00 0c05 	add.w	ip, r0, r5
 8005aba:	462b      	mov	r3, r5
 8005abc:	210a      	movs	r1, #10
 8005abe:	4563      	cmp	r3, ip
 8005ac0:	d10d      	bne.n	8005ade <_strtod_l+0x236>
 8005ac2:	1c69      	adds	r1, r5, #1
 8005ac4:	4401      	add	r1, r0
 8005ac6:	4428      	add	r0, r5
 8005ac8:	2808      	cmp	r0, #8
 8005aca:	dc16      	bgt.n	8005afa <_strtod_l+0x252>
 8005acc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005ace:	230a      	movs	r3, #10
 8005ad0:	fb03 2300 	mla	r3, r3, r0, r2
 8005ad4:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	e018      	b.n	8005b0c <_strtod_l+0x264>
 8005ada:	4638      	mov	r0, r7
 8005adc:	e7da      	b.n	8005a94 <_strtod_l+0x1ec>
 8005ade:	2b08      	cmp	r3, #8
 8005ae0:	f103 0301 	add.w	r3, r3, #1
 8005ae4:	dc03      	bgt.n	8005aee <_strtod_l+0x246>
 8005ae6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005ae8:	434e      	muls	r6, r1
 8005aea:	960a      	str	r6, [sp, #40]	@ 0x28
 8005aec:	e7e7      	b.n	8005abe <_strtod_l+0x216>
 8005aee:	2b10      	cmp	r3, #16
 8005af0:	bfde      	ittt	le
 8005af2:	9e08      	ldrle	r6, [sp, #32]
 8005af4:	434e      	mulle	r6, r1
 8005af6:	9608      	strle	r6, [sp, #32]
 8005af8:	e7e1      	b.n	8005abe <_strtod_l+0x216>
 8005afa:	280f      	cmp	r0, #15
 8005afc:	dceb      	bgt.n	8005ad6 <_strtod_l+0x22e>
 8005afe:	9808      	ldr	r0, [sp, #32]
 8005b00:	230a      	movs	r3, #10
 8005b02:	fb03 2300 	mla	r3, r3, r0, r2
 8005b06:	9308      	str	r3, [sp, #32]
 8005b08:	e7e5      	b.n	8005ad6 <_strtod_l+0x22e>
 8005b0a:	4629      	mov	r1, r5
 8005b0c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005b0e:	1c50      	adds	r0, r2, #1
 8005b10:	9019      	str	r0, [sp, #100]	@ 0x64
 8005b12:	7852      	ldrb	r2, [r2, #1]
 8005b14:	4618      	mov	r0, r3
 8005b16:	460d      	mov	r5, r1
 8005b18:	e7b1      	b.n	8005a7e <_strtod_l+0x1d6>
 8005b1a:	f04f 0900 	mov.w	r9, #0
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e77d      	b.n	8005a1e <_strtod_l+0x176>
 8005b22:	f04f 0c00 	mov.w	ip, #0
 8005b26:	1ca2      	adds	r2, r4, #2
 8005b28:	9219      	str	r2, [sp, #100]	@ 0x64
 8005b2a:	78a2      	ldrb	r2, [r4, #2]
 8005b2c:	e785      	b.n	8005a3a <_strtod_l+0x192>
 8005b2e:	f04f 0c01 	mov.w	ip, #1
 8005b32:	e7f8      	b.n	8005b26 <_strtod_l+0x27e>
 8005b34:	0800a5bc 	.word	0x0800a5bc
 8005b38:	0800a5a4 	.word	0x0800a5a4
 8005b3c:	7ff00000 	.word	0x7ff00000
 8005b40:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005b42:	1c51      	adds	r1, r2, #1
 8005b44:	9119      	str	r1, [sp, #100]	@ 0x64
 8005b46:	7852      	ldrb	r2, [r2, #1]
 8005b48:	2a30      	cmp	r2, #48	@ 0x30
 8005b4a:	d0f9      	beq.n	8005b40 <_strtod_l+0x298>
 8005b4c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005b50:	2908      	cmp	r1, #8
 8005b52:	f63f af78 	bhi.w	8005a46 <_strtod_l+0x19e>
 8005b56:	3a30      	subs	r2, #48	@ 0x30
 8005b58:	920e      	str	r2, [sp, #56]	@ 0x38
 8005b5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005b5c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005b5e:	f04f 080a 	mov.w	r8, #10
 8005b62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005b64:	1c56      	adds	r6, r2, #1
 8005b66:	9619      	str	r6, [sp, #100]	@ 0x64
 8005b68:	7852      	ldrb	r2, [r2, #1]
 8005b6a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005b6e:	f1be 0f09 	cmp.w	lr, #9
 8005b72:	d939      	bls.n	8005be8 <_strtod_l+0x340>
 8005b74:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005b76:	1a76      	subs	r6, r6, r1
 8005b78:	2e08      	cmp	r6, #8
 8005b7a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005b7e:	dc03      	bgt.n	8005b88 <_strtod_l+0x2e0>
 8005b80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005b82:	4588      	cmp	r8, r1
 8005b84:	bfa8      	it	ge
 8005b86:	4688      	movge	r8, r1
 8005b88:	f1bc 0f00 	cmp.w	ip, #0
 8005b8c:	d001      	beq.n	8005b92 <_strtod_l+0x2ea>
 8005b8e:	f1c8 0800 	rsb	r8, r8, #0
 8005b92:	2d00      	cmp	r5, #0
 8005b94:	d14e      	bne.n	8005c34 <_strtod_l+0x38c>
 8005b96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005b98:	4308      	orrs	r0, r1
 8005b9a:	f47f aebe 	bne.w	800591a <_strtod_l+0x72>
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f47f aed6 	bne.w	8005950 <_strtod_l+0xa8>
 8005ba4:	2a69      	cmp	r2, #105	@ 0x69
 8005ba6:	d028      	beq.n	8005bfa <_strtod_l+0x352>
 8005ba8:	dc25      	bgt.n	8005bf6 <_strtod_l+0x34e>
 8005baa:	2a49      	cmp	r2, #73	@ 0x49
 8005bac:	d025      	beq.n	8005bfa <_strtod_l+0x352>
 8005bae:	2a4e      	cmp	r2, #78	@ 0x4e
 8005bb0:	f47f aece 	bne.w	8005950 <_strtod_l+0xa8>
 8005bb4:	499b      	ldr	r1, [pc, #620]	@ (8005e24 <_strtod_l+0x57c>)
 8005bb6:	a819      	add	r0, sp, #100	@ 0x64
 8005bb8:	f002 fd5a 	bl	8008670 <__match>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	f43f aec7 	beq.w	8005950 <_strtod_l+0xa8>
 8005bc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b28      	cmp	r3, #40	@ 0x28
 8005bc8:	d12e      	bne.n	8005c28 <_strtod_l+0x380>
 8005bca:	4997      	ldr	r1, [pc, #604]	@ (8005e28 <_strtod_l+0x580>)
 8005bcc:	aa1c      	add	r2, sp, #112	@ 0x70
 8005bce:	a819      	add	r0, sp, #100	@ 0x64
 8005bd0:	f002 fd62 	bl	8008698 <__hexnan>
 8005bd4:	2805      	cmp	r0, #5
 8005bd6:	d127      	bne.n	8005c28 <_strtod_l+0x380>
 8005bd8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005bda:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005bde:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005be2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005be6:	e698      	b.n	800591a <_strtod_l+0x72>
 8005be8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005bea:	fb08 2101 	mla	r1, r8, r1, r2
 8005bee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005bf2:	920e      	str	r2, [sp, #56]	@ 0x38
 8005bf4:	e7b5      	b.n	8005b62 <_strtod_l+0x2ba>
 8005bf6:	2a6e      	cmp	r2, #110	@ 0x6e
 8005bf8:	e7da      	b.n	8005bb0 <_strtod_l+0x308>
 8005bfa:	498c      	ldr	r1, [pc, #560]	@ (8005e2c <_strtod_l+0x584>)
 8005bfc:	a819      	add	r0, sp, #100	@ 0x64
 8005bfe:	f002 fd37 	bl	8008670 <__match>
 8005c02:	2800      	cmp	r0, #0
 8005c04:	f43f aea4 	beq.w	8005950 <_strtod_l+0xa8>
 8005c08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c0a:	4989      	ldr	r1, [pc, #548]	@ (8005e30 <_strtod_l+0x588>)
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	a819      	add	r0, sp, #100	@ 0x64
 8005c10:	9319      	str	r3, [sp, #100]	@ 0x64
 8005c12:	f002 fd2d 	bl	8008670 <__match>
 8005c16:	b910      	cbnz	r0, 8005c1e <_strtod_l+0x376>
 8005c18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	9319      	str	r3, [sp, #100]	@ 0x64
 8005c1e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8005e40 <_strtod_l+0x598>
 8005c22:	f04f 0a00 	mov.w	sl, #0
 8005c26:	e678      	b.n	800591a <_strtod_l+0x72>
 8005c28:	4882      	ldr	r0, [pc, #520]	@ (8005e34 <_strtod_l+0x58c>)
 8005c2a:	f001 fbf9 	bl	8007420 <nan>
 8005c2e:	ec5b ab10 	vmov	sl, fp, d0
 8005c32:	e672      	b.n	800591a <_strtod_l+0x72>
 8005c34:	eba8 0309 	sub.w	r3, r8, r9
 8005c38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005c3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c3c:	2f00      	cmp	r7, #0
 8005c3e:	bf08      	it	eq
 8005c40:	462f      	moveq	r7, r5
 8005c42:	2d10      	cmp	r5, #16
 8005c44:	462c      	mov	r4, r5
 8005c46:	bfa8      	it	ge
 8005c48:	2410      	movge	r4, #16
 8005c4a:	f7fa fc6b 	bl	8000524 <__aeabi_ui2d>
 8005c4e:	2d09      	cmp	r5, #9
 8005c50:	4682      	mov	sl, r0
 8005c52:	468b      	mov	fp, r1
 8005c54:	dc13      	bgt.n	8005c7e <_strtod_l+0x3d6>
 8005c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f43f ae5e 	beq.w	800591a <_strtod_l+0x72>
 8005c5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c60:	dd78      	ble.n	8005d54 <_strtod_l+0x4ac>
 8005c62:	2b16      	cmp	r3, #22
 8005c64:	dc5f      	bgt.n	8005d26 <_strtod_l+0x47e>
 8005c66:	4974      	ldr	r1, [pc, #464]	@ (8005e38 <_strtod_l+0x590>)
 8005c68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005c6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c70:	4652      	mov	r2, sl
 8005c72:	465b      	mov	r3, fp
 8005c74:	f7fa fcd0 	bl	8000618 <__aeabi_dmul>
 8005c78:	4682      	mov	sl, r0
 8005c7a:	468b      	mov	fp, r1
 8005c7c:	e64d      	b.n	800591a <_strtod_l+0x72>
 8005c7e:	4b6e      	ldr	r3, [pc, #440]	@ (8005e38 <_strtod_l+0x590>)
 8005c80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c84:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005c88:	f7fa fcc6 	bl	8000618 <__aeabi_dmul>
 8005c8c:	4682      	mov	sl, r0
 8005c8e:	9808      	ldr	r0, [sp, #32]
 8005c90:	468b      	mov	fp, r1
 8005c92:	f7fa fc47 	bl	8000524 <__aeabi_ui2d>
 8005c96:	4602      	mov	r2, r0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	4650      	mov	r0, sl
 8005c9c:	4659      	mov	r1, fp
 8005c9e:	f7fa fb05 	bl	80002ac <__adddf3>
 8005ca2:	2d0f      	cmp	r5, #15
 8005ca4:	4682      	mov	sl, r0
 8005ca6:	468b      	mov	fp, r1
 8005ca8:	ddd5      	ble.n	8005c56 <_strtod_l+0x3ae>
 8005caa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cac:	1b2c      	subs	r4, r5, r4
 8005cae:	441c      	add	r4, r3
 8005cb0:	2c00      	cmp	r4, #0
 8005cb2:	f340 8096 	ble.w	8005de2 <_strtod_l+0x53a>
 8005cb6:	f014 030f 	ands.w	r3, r4, #15
 8005cba:	d00a      	beq.n	8005cd2 <_strtod_l+0x42a>
 8005cbc:	495e      	ldr	r1, [pc, #376]	@ (8005e38 <_strtod_l+0x590>)
 8005cbe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005cc2:	4652      	mov	r2, sl
 8005cc4:	465b      	mov	r3, fp
 8005cc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cca:	f7fa fca5 	bl	8000618 <__aeabi_dmul>
 8005cce:	4682      	mov	sl, r0
 8005cd0:	468b      	mov	fp, r1
 8005cd2:	f034 040f 	bics.w	r4, r4, #15
 8005cd6:	d073      	beq.n	8005dc0 <_strtod_l+0x518>
 8005cd8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005cdc:	dd48      	ble.n	8005d70 <_strtod_l+0x4c8>
 8005cde:	2400      	movs	r4, #0
 8005ce0:	46a0      	mov	r8, r4
 8005ce2:	940a      	str	r4, [sp, #40]	@ 0x28
 8005ce4:	46a1      	mov	r9, r4
 8005ce6:	9a05      	ldr	r2, [sp, #20]
 8005ce8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8005e40 <_strtod_l+0x598>
 8005cec:	2322      	movs	r3, #34	@ 0x22
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	f04f 0a00 	mov.w	sl, #0
 8005cf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f43f ae0f 	beq.w	800591a <_strtod_l+0x72>
 8005cfc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005cfe:	9805      	ldr	r0, [sp, #20]
 8005d00:	f002 fdb8 	bl	8008874 <_Bfree>
 8005d04:	9805      	ldr	r0, [sp, #20]
 8005d06:	4649      	mov	r1, r9
 8005d08:	f002 fdb4 	bl	8008874 <_Bfree>
 8005d0c:	9805      	ldr	r0, [sp, #20]
 8005d0e:	4641      	mov	r1, r8
 8005d10:	f002 fdb0 	bl	8008874 <_Bfree>
 8005d14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005d16:	9805      	ldr	r0, [sp, #20]
 8005d18:	f002 fdac 	bl	8008874 <_Bfree>
 8005d1c:	9805      	ldr	r0, [sp, #20]
 8005d1e:	4621      	mov	r1, r4
 8005d20:	f002 fda8 	bl	8008874 <_Bfree>
 8005d24:	e5f9      	b.n	800591a <_strtod_l+0x72>
 8005d26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d28:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	dbbc      	blt.n	8005caa <_strtod_l+0x402>
 8005d30:	4c41      	ldr	r4, [pc, #260]	@ (8005e38 <_strtod_l+0x590>)
 8005d32:	f1c5 050f 	rsb	r5, r5, #15
 8005d36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005d3a:	4652      	mov	r2, sl
 8005d3c:	465b      	mov	r3, fp
 8005d3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d42:	f7fa fc69 	bl	8000618 <__aeabi_dmul>
 8005d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d48:	1b5d      	subs	r5, r3, r5
 8005d4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005d4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005d52:	e78f      	b.n	8005c74 <_strtod_l+0x3cc>
 8005d54:	3316      	adds	r3, #22
 8005d56:	dba8      	blt.n	8005caa <_strtod_l+0x402>
 8005d58:	4b37      	ldr	r3, [pc, #220]	@ (8005e38 <_strtod_l+0x590>)
 8005d5a:	eba9 0808 	sub.w	r8, r9, r8
 8005d5e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005d62:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005d66:	4650      	mov	r0, sl
 8005d68:	4659      	mov	r1, fp
 8005d6a:	f7fa fd7f 	bl	800086c <__aeabi_ddiv>
 8005d6e:	e783      	b.n	8005c78 <_strtod_l+0x3d0>
 8005d70:	4b32      	ldr	r3, [pc, #200]	@ (8005e3c <_strtod_l+0x594>)
 8005d72:	9308      	str	r3, [sp, #32]
 8005d74:	2300      	movs	r3, #0
 8005d76:	1124      	asrs	r4, r4, #4
 8005d78:	4650      	mov	r0, sl
 8005d7a:	4659      	mov	r1, fp
 8005d7c:	461e      	mov	r6, r3
 8005d7e:	2c01      	cmp	r4, #1
 8005d80:	dc21      	bgt.n	8005dc6 <_strtod_l+0x51e>
 8005d82:	b10b      	cbz	r3, 8005d88 <_strtod_l+0x4e0>
 8005d84:	4682      	mov	sl, r0
 8005d86:	468b      	mov	fp, r1
 8005d88:	492c      	ldr	r1, [pc, #176]	@ (8005e3c <_strtod_l+0x594>)
 8005d8a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005d8e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005d92:	4652      	mov	r2, sl
 8005d94:	465b      	mov	r3, fp
 8005d96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d9a:	f7fa fc3d 	bl	8000618 <__aeabi_dmul>
 8005d9e:	4b28      	ldr	r3, [pc, #160]	@ (8005e40 <_strtod_l+0x598>)
 8005da0:	460a      	mov	r2, r1
 8005da2:	400b      	ands	r3, r1
 8005da4:	4927      	ldr	r1, [pc, #156]	@ (8005e44 <_strtod_l+0x59c>)
 8005da6:	428b      	cmp	r3, r1
 8005da8:	4682      	mov	sl, r0
 8005daa:	d898      	bhi.n	8005cde <_strtod_l+0x436>
 8005dac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005db0:	428b      	cmp	r3, r1
 8005db2:	bf86      	itte	hi
 8005db4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8005e48 <_strtod_l+0x5a0>
 8005db8:	f04f 3aff 	movhi.w	sl, #4294967295
 8005dbc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	9308      	str	r3, [sp, #32]
 8005dc4:	e07a      	b.n	8005ebc <_strtod_l+0x614>
 8005dc6:	07e2      	lsls	r2, r4, #31
 8005dc8:	d505      	bpl.n	8005dd6 <_strtod_l+0x52e>
 8005dca:	9b08      	ldr	r3, [sp, #32]
 8005dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd0:	f7fa fc22 	bl	8000618 <__aeabi_dmul>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	9a08      	ldr	r2, [sp, #32]
 8005dd8:	3208      	adds	r2, #8
 8005dda:	3601      	adds	r6, #1
 8005ddc:	1064      	asrs	r4, r4, #1
 8005dde:	9208      	str	r2, [sp, #32]
 8005de0:	e7cd      	b.n	8005d7e <_strtod_l+0x4d6>
 8005de2:	d0ed      	beq.n	8005dc0 <_strtod_l+0x518>
 8005de4:	4264      	negs	r4, r4
 8005de6:	f014 020f 	ands.w	r2, r4, #15
 8005dea:	d00a      	beq.n	8005e02 <_strtod_l+0x55a>
 8005dec:	4b12      	ldr	r3, [pc, #72]	@ (8005e38 <_strtod_l+0x590>)
 8005dee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005df2:	4650      	mov	r0, sl
 8005df4:	4659      	mov	r1, fp
 8005df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfa:	f7fa fd37 	bl	800086c <__aeabi_ddiv>
 8005dfe:	4682      	mov	sl, r0
 8005e00:	468b      	mov	fp, r1
 8005e02:	1124      	asrs	r4, r4, #4
 8005e04:	d0dc      	beq.n	8005dc0 <_strtod_l+0x518>
 8005e06:	2c1f      	cmp	r4, #31
 8005e08:	dd20      	ble.n	8005e4c <_strtod_l+0x5a4>
 8005e0a:	2400      	movs	r4, #0
 8005e0c:	46a0      	mov	r8, r4
 8005e0e:	940a      	str	r4, [sp, #40]	@ 0x28
 8005e10:	46a1      	mov	r9, r4
 8005e12:	9a05      	ldr	r2, [sp, #20]
 8005e14:	2322      	movs	r3, #34	@ 0x22
 8005e16:	f04f 0a00 	mov.w	sl, #0
 8005e1a:	f04f 0b00 	mov.w	fp, #0
 8005e1e:	6013      	str	r3, [r2, #0]
 8005e20:	e768      	b.n	8005cf4 <_strtod_l+0x44c>
 8005e22:	bf00      	nop
 8005e24:	0800a706 	.word	0x0800a706
 8005e28:	0800a5a8 	.word	0x0800a5a8
 8005e2c:	0800a6fe 	.word	0x0800a6fe
 8005e30:	0800a736 	.word	0x0800a736
 8005e34:	0800a9df 	.word	0x0800a9df
 8005e38:	0800a8b0 	.word	0x0800a8b0
 8005e3c:	0800a888 	.word	0x0800a888
 8005e40:	7ff00000 	.word	0x7ff00000
 8005e44:	7ca00000 	.word	0x7ca00000
 8005e48:	7fefffff 	.word	0x7fefffff
 8005e4c:	f014 0310 	ands.w	r3, r4, #16
 8005e50:	bf18      	it	ne
 8005e52:	236a      	movne	r3, #106	@ 0x6a
 8005e54:	4ea9      	ldr	r6, [pc, #676]	@ (80060fc <_strtod_l+0x854>)
 8005e56:	9308      	str	r3, [sp, #32]
 8005e58:	4650      	mov	r0, sl
 8005e5a:	4659      	mov	r1, fp
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	07e2      	lsls	r2, r4, #31
 8005e60:	d504      	bpl.n	8005e6c <_strtod_l+0x5c4>
 8005e62:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e66:	f7fa fbd7 	bl	8000618 <__aeabi_dmul>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	1064      	asrs	r4, r4, #1
 8005e6e:	f106 0608 	add.w	r6, r6, #8
 8005e72:	d1f4      	bne.n	8005e5e <_strtod_l+0x5b6>
 8005e74:	b10b      	cbz	r3, 8005e7a <_strtod_l+0x5d2>
 8005e76:	4682      	mov	sl, r0
 8005e78:	468b      	mov	fp, r1
 8005e7a:	9b08      	ldr	r3, [sp, #32]
 8005e7c:	b1b3      	cbz	r3, 8005eac <_strtod_l+0x604>
 8005e7e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005e82:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	4659      	mov	r1, fp
 8005e8a:	dd0f      	ble.n	8005eac <_strtod_l+0x604>
 8005e8c:	2b1f      	cmp	r3, #31
 8005e8e:	dd55      	ble.n	8005f3c <_strtod_l+0x694>
 8005e90:	2b34      	cmp	r3, #52	@ 0x34
 8005e92:	bfde      	ittt	le
 8005e94:	f04f 33ff 	movle.w	r3, #4294967295
 8005e98:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005e9c:	4093      	lslle	r3, r2
 8005e9e:	f04f 0a00 	mov.w	sl, #0
 8005ea2:	bfcc      	ite	gt
 8005ea4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005ea8:	ea03 0b01 	andle.w	fp, r3, r1
 8005eac:	2200      	movs	r2, #0
 8005eae:	2300      	movs	r3, #0
 8005eb0:	4650      	mov	r0, sl
 8005eb2:	4659      	mov	r1, fp
 8005eb4:	f7fa fe18 	bl	8000ae8 <__aeabi_dcmpeq>
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	d1a6      	bne.n	8005e0a <_strtod_l+0x562>
 8005ebc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005ec2:	9805      	ldr	r0, [sp, #20]
 8005ec4:	462b      	mov	r3, r5
 8005ec6:	463a      	mov	r2, r7
 8005ec8:	f002 fd3c 	bl	8008944 <__s2b>
 8005ecc:	900a      	str	r0, [sp, #40]	@ 0x28
 8005ece:	2800      	cmp	r0, #0
 8005ed0:	f43f af05 	beq.w	8005cde <_strtod_l+0x436>
 8005ed4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ed6:	2a00      	cmp	r2, #0
 8005ed8:	eba9 0308 	sub.w	r3, r9, r8
 8005edc:	bfa8      	it	ge
 8005ede:	2300      	movge	r3, #0
 8005ee0:	9312      	str	r3, [sp, #72]	@ 0x48
 8005ee2:	2400      	movs	r4, #0
 8005ee4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005ee8:	9316      	str	r3, [sp, #88]	@ 0x58
 8005eea:	46a0      	mov	r8, r4
 8005eec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005eee:	9805      	ldr	r0, [sp, #20]
 8005ef0:	6859      	ldr	r1, [r3, #4]
 8005ef2:	f002 fc7f 	bl	80087f4 <_Balloc>
 8005ef6:	4681      	mov	r9, r0
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	f43f aef4 	beq.w	8005ce6 <_strtod_l+0x43e>
 8005efe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f00:	691a      	ldr	r2, [r3, #16]
 8005f02:	3202      	adds	r2, #2
 8005f04:	f103 010c 	add.w	r1, r3, #12
 8005f08:	0092      	lsls	r2, r2, #2
 8005f0a:	300c      	adds	r0, #12
 8005f0c:	f001 fa77 	bl	80073fe <memcpy>
 8005f10:	ec4b ab10 	vmov	d0, sl, fp
 8005f14:	9805      	ldr	r0, [sp, #20]
 8005f16:	aa1c      	add	r2, sp, #112	@ 0x70
 8005f18:	a91b      	add	r1, sp, #108	@ 0x6c
 8005f1a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005f1e:	f003 f84d 	bl	8008fbc <__d2b>
 8005f22:	901a      	str	r0, [sp, #104]	@ 0x68
 8005f24:	2800      	cmp	r0, #0
 8005f26:	f43f aede 	beq.w	8005ce6 <_strtod_l+0x43e>
 8005f2a:	9805      	ldr	r0, [sp, #20]
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	f002 fd9f 	bl	8008a70 <__i2b>
 8005f32:	4680      	mov	r8, r0
 8005f34:	b948      	cbnz	r0, 8005f4a <_strtod_l+0x6a2>
 8005f36:	f04f 0800 	mov.w	r8, #0
 8005f3a:	e6d4      	b.n	8005ce6 <_strtod_l+0x43e>
 8005f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f40:	fa02 f303 	lsl.w	r3, r2, r3
 8005f44:	ea03 0a0a 	and.w	sl, r3, sl
 8005f48:	e7b0      	b.n	8005eac <_strtod_l+0x604>
 8005f4a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005f4c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005f4e:	2d00      	cmp	r5, #0
 8005f50:	bfab      	itete	ge
 8005f52:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005f54:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005f56:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005f58:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005f5a:	bfac      	ite	ge
 8005f5c:	18ef      	addge	r7, r5, r3
 8005f5e:	1b5e      	sublt	r6, r3, r5
 8005f60:	9b08      	ldr	r3, [sp, #32]
 8005f62:	1aed      	subs	r5, r5, r3
 8005f64:	4415      	add	r5, r2
 8005f66:	4b66      	ldr	r3, [pc, #408]	@ (8006100 <_strtod_l+0x858>)
 8005f68:	3d01      	subs	r5, #1
 8005f6a:	429d      	cmp	r5, r3
 8005f6c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005f70:	da50      	bge.n	8006014 <_strtod_l+0x76c>
 8005f72:	1b5b      	subs	r3, r3, r5
 8005f74:	2b1f      	cmp	r3, #31
 8005f76:	eba2 0203 	sub.w	r2, r2, r3
 8005f7a:	f04f 0101 	mov.w	r1, #1
 8005f7e:	dc3d      	bgt.n	8005ffc <_strtod_l+0x754>
 8005f80:	fa01 f303 	lsl.w	r3, r1, r3
 8005f84:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005f86:	2300      	movs	r3, #0
 8005f88:	9310      	str	r3, [sp, #64]	@ 0x40
 8005f8a:	18bd      	adds	r5, r7, r2
 8005f8c:	9b08      	ldr	r3, [sp, #32]
 8005f8e:	42af      	cmp	r7, r5
 8005f90:	4416      	add	r6, r2
 8005f92:	441e      	add	r6, r3
 8005f94:	463b      	mov	r3, r7
 8005f96:	bfa8      	it	ge
 8005f98:	462b      	movge	r3, r5
 8005f9a:	42b3      	cmp	r3, r6
 8005f9c:	bfa8      	it	ge
 8005f9e:	4633      	movge	r3, r6
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	bfc2      	ittt	gt
 8005fa4:	1aed      	subgt	r5, r5, r3
 8005fa6:	1af6      	subgt	r6, r6, r3
 8005fa8:	1aff      	subgt	r7, r7, r3
 8005faa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	dd16      	ble.n	8005fde <_strtod_l+0x736>
 8005fb0:	4641      	mov	r1, r8
 8005fb2:	9805      	ldr	r0, [sp, #20]
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	f002 fe1b 	bl	8008bf0 <__pow5mult>
 8005fba:	4680      	mov	r8, r0
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	d0ba      	beq.n	8005f36 <_strtod_l+0x68e>
 8005fc0:	4601      	mov	r1, r0
 8005fc2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005fc4:	9805      	ldr	r0, [sp, #20]
 8005fc6:	f002 fd69 	bl	8008a9c <__multiply>
 8005fca:	900e      	str	r0, [sp, #56]	@ 0x38
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	f43f ae8a 	beq.w	8005ce6 <_strtod_l+0x43e>
 8005fd2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005fd4:	9805      	ldr	r0, [sp, #20]
 8005fd6:	f002 fc4d 	bl	8008874 <_Bfree>
 8005fda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005fdc:	931a      	str	r3, [sp, #104]	@ 0x68
 8005fde:	2d00      	cmp	r5, #0
 8005fe0:	dc1d      	bgt.n	800601e <_strtod_l+0x776>
 8005fe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	dd23      	ble.n	8006030 <_strtod_l+0x788>
 8005fe8:	4649      	mov	r1, r9
 8005fea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005fec:	9805      	ldr	r0, [sp, #20]
 8005fee:	f002 fdff 	bl	8008bf0 <__pow5mult>
 8005ff2:	4681      	mov	r9, r0
 8005ff4:	b9e0      	cbnz	r0, 8006030 <_strtod_l+0x788>
 8005ff6:	f04f 0900 	mov.w	r9, #0
 8005ffa:	e674      	b.n	8005ce6 <_strtod_l+0x43e>
 8005ffc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006000:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006004:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006008:	35e2      	adds	r5, #226	@ 0xe2
 800600a:	fa01 f305 	lsl.w	r3, r1, r5
 800600e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006010:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006012:	e7ba      	b.n	8005f8a <_strtod_l+0x6e2>
 8006014:	2300      	movs	r3, #0
 8006016:	9310      	str	r3, [sp, #64]	@ 0x40
 8006018:	2301      	movs	r3, #1
 800601a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800601c:	e7b5      	b.n	8005f8a <_strtod_l+0x6e2>
 800601e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006020:	9805      	ldr	r0, [sp, #20]
 8006022:	462a      	mov	r2, r5
 8006024:	f002 fe3e 	bl	8008ca4 <__lshift>
 8006028:	901a      	str	r0, [sp, #104]	@ 0x68
 800602a:	2800      	cmp	r0, #0
 800602c:	d1d9      	bne.n	8005fe2 <_strtod_l+0x73a>
 800602e:	e65a      	b.n	8005ce6 <_strtod_l+0x43e>
 8006030:	2e00      	cmp	r6, #0
 8006032:	dd07      	ble.n	8006044 <_strtod_l+0x79c>
 8006034:	4649      	mov	r1, r9
 8006036:	9805      	ldr	r0, [sp, #20]
 8006038:	4632      	mov	r2, r6
 800603a:	f002 fe33 	bl	8008ca4 <__lshift>
 800603e:	4681      	mov	r9, r0
 8006040:	2800      	cmp	r0, #0
 8006042:	d0d8      	beq.n	8005ff6 <_strtod_l+0x74e>
 8006044:	2f00      	cmp	r7, #0
 8006046:	dd08      	ble.n	800605a <_strtod_l+0x7b2>
 8006048:	4641      	mov	r1, r8
 800604a:	9805      	ldr	r0, [sp, #20]
 800604c:	463a      	mov	r2, r7
 800604e:	f002 fe29 	bl	8008ca4 <__lshift>
 8006052:	4680      	mov	r8, r0
 8006054:	2800      	cmp	r0, #0
 8006056:	f43f ae46 	beq.w	8005ce6 <_strtod_l+0x43e>
 800605a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800605c:	9805      	ldr	r0, [sp, #20]
 800605e:	464a      	mov	r2, r9
 8006060:	f002 fea8 	bl	8008db4 <__mdiff>
 8006064:	4604      	mov	r4, r0
 8006066:	2800      	cmp	r0, #0
 8006068:	f43f ae3d 	beq.w	8005ce6 <_strtod_l+0x43e>
 800606c:	68c3      	ldr	r3, [r0, #12]
 800606e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006070:	2300      	movs	r3, #0
 8006072:	60c3      	str	r3, [r0, #12]
 8006074:	4641      	mov	r1, r8
 8006076:	f002 fe81 	bl	8008d7c <__mcmp>
 800607a:	2800      	cmp	r0, #0
 800607c:	da46      	bge.n	800610c <_strtod_l+0x864>
 800607e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006080:	ea53 030a 	orrs.w	r3, r3, sl
 8006084:	d16c      	bne.n	8006160 <_strtod_l+0x8b8>
 8006086:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800608a:	2b00      	cmp	r3, #0
 800608c:	d168      	bne.n	8006160 <_strtod_l+0x8b8>
 800608e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006092:	0d1b      	lsrs	r3, r3, #20
 8006094:	051b      	lsls	r3, r3, #20
 8006096:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800609a:	d961      	bls.n	8006160 <_strtod_l+0x8b8>
 800609c:	6963      	ldr	r3, [r4, #20]
 800609e:	b913      	cbnz	r3, 80060a6 <_strtod_l+0x7fe>
 80060a0:	6923      	ldr	r3, [r4, #16]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	dd5c      	ble.n	8006160 <_strtod_l+0x8b8>
 80060a6:	4621      	mov	r1, r4
 80060a8:	2201      	movs	r2, #1
 80060aa:	9805      	ldr	r0, [sp, #20]
 80060ac:	f002 fdfa 	bl	8008ca4 <__lshift>
 80060b0:	4641      	mov	r1, r8
 80060b2:	4604      	mov	r4, r0
 80060b4:	f002 fe62 	bl	8008d7c <__mcmp>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	dd51      	ble.n	8006160 <_strtod_l+0x8b8>
 80060bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80060c0:	9a08      	ldr	r2, [sp, #32]
 80060c2:	0d1b      	lsrs	r3, r3, #20
 80060c4:	051b      	lsls	r3, r3, #20
 80060c6:	2a00      	cmp	r2, #0
 80060c8:	d06b      	beq.n	80061a2 <_strtod_l+0x8fa>
 80060ca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80060ce:	d868      	bhi.n	80061a2 <_strtod_l+0x8fa>
 80060d0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80060d4:	f67f ae9d 	bls.w	8005e12 <_strtod_l+0x56a>
 80060d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006104 <_strtod_l+0x85c>)
 80060da:	4650      	mov	r0, sl
 80060dc:	4659      	mov	r1, fp
 80060de:	2200      	movs	r2, #0
 80060e0:	f7fa fa9a 	bl	8000618 <__aeabi_dmul>
 80060e4:	4b08      	ldr	r3, [pc, #32]	@ (8006108 <_strtod_l+0x860>)
 80060e6:	400b      	ands	r3, r1
 80060e8:	4682      	mov	sl, r0
 80060ea:	468b      	mov	fp, r1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f47f ae05 	bne.w	8005cfc <_strtod_l+0x454>
 80060f2:	9a05      	ldr	r2, [sp, #20]
 80060f4:	2322      	movs	r3, #34	@ 0x22
 80060f6:	6013      	str	r3, [r2, #0]
 80060f8:	e600      	b.n	8005cfc <_strtod_l+0x454>
 80060fa:	bf00      	nop
 80060fc:	0800a5d0 	.word	0x0800a5d0
 8006100:	fffffc02 	.word	0xfffffc02
 8006104:	39500000 	.word	0x39500000
 8006108:	7ff00000 	.word	0x7ff00000
 800610c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006110:	d165      	bne.n	80061de <_strtod_l+0x936>
 8006112:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006114:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006118:	b35a      	cbz	r2, 8006172 <_strtod_l+0x8ca>
 800611a:	4a9f      	ldr	r2, [pc, #636]	@ (8006398 <_strtod_l+0xaf0>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d12b      	bne.n	8006178 <_strtod_l+0x8d0>
 8006120:	9b08      	ldr	r3, [sp, #32]
 8006122:	4651      	mov	r1, sl
 8006124:	b303      	cbz	r3, 8006168 <_strtod_l+0x8c0>
 8006126:	4b9d      	ldr	r3, [pc, #628]	@ (800639c <_strtod_l+0xaf4>)
 8006128:	465a      	mov	r2, fp
 800612a:	4013      	ands	r3, r2
 800612c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006130:	f04f 32ff 	mov.w	r2, #4294967295
 8006134:	d81b      	bhi.n	800616e <_strtod_l+0x8c6>
 8006136:	0d1b      	lsrs	r3, r3, #20
 8006138:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800613c:	fa02 f303 	lsl.w	r3, r2, r3
 8006140:	4299      	cmp	r1, r3
 8006142:	d119      	bne.n	8006178 <_strtod_l+0x8d0>
 8006144:	4b96      	ldr	r3, [pc, #600]	@ (80063a0 <_strtod_l+0xaf8>)
 8006146:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006148:	429a      	cmp	r2, r3
 800614a:	d102      	bne.n	8006152 <_strtod_l+0x8aa>
 800614c:	3101      	adds	r1, #1
 800614e:	f43f adca 	beq.w	8005ce6 <_strtod_l+0x43e>
 8006152:	4b92      	ldr	r3, [pc, #584]	@ (800639c <_strtod_l+0xaf4>)
 8006154:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006156:	401a      	ands	r2, r3
 8006158:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800615c:	f04f 0a00 	mov.w	sl, #0
 8006160:	9b08      	ldr	r3, [sp, #32]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1b8      	bne.n	80060d8 <_strtod_l+0x830>
 8006166:	e5c9      	b.n	8005cfc <_strtod_l+0x454>
 8006168:	f04f 33ff 	mov.w	r3, #4294967295
 800616c:	e7e8      	b.n	8006140 <_strtod_l+0x898>
 800616e:	4613      	mov	r3, r2
 8006170:	e7e6      	b.n	8006140 <_strtod_l+0x898>
 8006172:	ea53 030a 	orrs.w	r3, r3, sl
 8006176:	d0a1      	beq.n	80060bc <_strtod_l+0x814>
 8006178:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800617a:	b1db      	cbz	r3, 80061b4 <_strtod_l+0x90c>
 800617c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800617e:	4213      	tst	r3, r2
 8006180:	d0ee      	beq.n	8006160 <_strtod_l+0x8b8>
 8006182:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006184:	9a08      	ldr	r2, [sp, #32]
 8006186:	4650      	mov	r0, sl
 8006188:	4659      	mov	r1, fp
 800618a:	b1bb      	cbz	r3, 80061bc <_strtod_l+0x914>
 800618c:	f7ff fb6e 	bl	800586c <sulp>
 8006190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006194:	ec53 2b10 	vmov	r2, r3, d0
 8006198:	f7fa f888 	bl	80002ac <__adddf3>
 800619c:	4682      	mov	sl, r0
 800619e:	468b      	mov	fp, r1
 80061a0:	e7de      	b.n	8006160 <_strtod_l+0x8b8>
 80061a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80061a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80061aa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80061ae:	f04f 3aff 	mov.w	sl, #4294967295
 80061b2:	e7d5      	b.n	8006160 <_strtod_l+0x8b8>
 80061b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80061b6:	ea13 0f0a 	tst.w	r3, sl
 80061ba:	e7e1      	b.n	8006180 <_strtod_l+0x8d8>
 80061bc:	f7ff fb56 	bl	800586c <sulp>
 80061c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061c4:	ec53 2b10 	vmov	r2, r3, d0
 80061c8:	f7fa f86e 	bl	80002a8 <__aeabi_dsub>
 80061cc:	2200      	movs	r2, #0
 80061ce:	2300      	movs	r3, #0
 80061d0:	4682      	mov	sl, r0
 80061d2:	468b      	mov	fp, r1
 80061d4:	f7fa fc88 	bl	8000ae8 <__aeabi_dcmpeq>
 80061d8:	2800      	cmp	r0, #0
 80061da:	d0c1      	beq.n	8006160 <_strtod_l+0x8b8>
 80061dc:	e619      	b.n	8005e12 <_strtod_l+0x56a>
 80061de:	4641      	mov	r1, r8
 80061e0:	4620      	mov	r0, r4
 80061e2:	f002 ff43 	bl	800906c <__ratio>
 80061e6:	ec57 6b10 	vmov	r6, r7, d0
 80061ea:	2200      	movs	r2, #0
 80061ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80061f0:	4630      	mov	r0, r6
 80061f2:	4639      	mov	r1, r7
 80061f4:	f7fa fc8c 	bl	8000b10 <__aeabi_dcmple>
 80061f8:	2800      	cmp	r0, #0
 80061fa:	d06f      	beq.n	80062dc <_strtod_l+0xa34>
 80061fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d17a      	bne.n	80062f8 <_strtod_l+0xa50>
 8006202:	f1ba 0f00 	cmp.w	sl, #0
 8006206:	d158      	bne.n	80062ba <_strtod_l+0xa12>
 8006208:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800620a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800620e:	2b00      	cmp	r3, #0
 8006210:	d15a      	bne.n	80062c8 <_strtod_l+0xa20>
 8006212:	4b64      	ldr	r3, [pc, #400]	@ (80063a4 <_strtod_l+0xafc>)
 8006214:	2200      	movs	r2, #0
 8006216:	4630      	mov	r0, r6
 8006218:	4639      	mov	r1, r7
 800621a:	f7fa fc6f 	bl	8000afc <__aeabi_dcmplt>
 800621e:	2800      	cmp	r0, #0
 8006220:	d159      	bne.n	80062d6 <_strtod_l+0xa2e>
 8006222:	4630      	mov	r0, r6
 8006224:	4639      	mov	r1, r7
 8006226:	4b60      	ldr	r3, [pc, #384]	@ (80063a8 <_strtod_l+0xb00>)
 8006228:	2200      	movs	r2, #0
 800622a:	f7fa f9f5 	bl	8000618 <__aeabi_dmul>
 800622e:	4606      	mov	r6, r0
 8006230:	460f      	mov	r7, r1
 8006232:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006236:	9606      	str	r6, [sp, #24]
 8006238:	9307      	str	r3, [sp, #28]
 800623a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800623e:	4d57      	ldr	r5, [pc, #348]	@ (800639c <_strtod_l+0xaf4>)
 8006240:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006244:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006246:	401d      	ands	r5, r3
 8006248:	4b58      	ldr	r3, [pc, #352]	@ (80063ac <_strtod_l+0xb04>)
 800624a:	429d      	cmp	r5, r3
 800624c:	f040 80b2 	bne.w	80063b4 <_strtod_l+0xb0c>
 8006250:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006252:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006256:	ec4b ab10 	vmov	d0, sl, fp
 800625a:	f002 fe3f 	bl	8008edc <__ulp>
 800625e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006262:	ec51 0b10 	vmov	r0, r1, d0
 8006266:	f7fa f9d7 	bl	8000618 <__aeabi_dmul>
 800626a:	4652      	mov	r2, sl
 800626c:	465b      	mov	r3, fp
 800626e:	f7fa f81d 	bl	80002ac <__adddf3>
 8006272:	460b      	mov	r3, r1
 8006274:	4949      	ldr	r1, [pc, #292]	@ (800639c <_strtod_l+0xaf4>)
 8006276:	4a4e      	ldr	r2, [pc, #312]	@ (80063b0 <_strtod_l+0xb08>)
 8006278:	4019      	ands	r1, r3
 800627a:	4291      	cmp	r1, r2
 800627c:	4682      	mov	sl, r0
 800627e:	d942      	bls.n	8006306 <_strtod_l+0xa5e>
 8006280:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006282:	4b47      	ldr	r3, [pc, #284]	@ (80063a0 <_strtod_l+0xaf8>)
 8006284:	429a      	cmp	r2, r3
 8006286:	d103      	bne.n	8006290 <_strtod_l+0x9e8>
 8006288:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800628a:	3301      	adds	r3, #1
 800628c:	f43f ad2b 	beq.w	8005ce6 <_strtod_l+0x43e>
 8006290:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80063a0 <_strtod_l+0xaf8>
 8006294:	f04f 3aff 	mov.w	sl, #4294967295
 8006298:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800629a:	9805      	ldr	r0, [sp, #20]
 800629c:	f002 faea 	bl	8008874 <_Bfree>
 80062a0:	9805      	ldr	r0, [sp, #20]
 80062a2:	4649      	mov	r1, r9
 80062a4:	f002 fae6 	bl	8008874 <_Bfree>
 80062a8:	9805      	ldr	r0, [sp, #20]
 80062aa:	4641      	mov	r1, r8
 80062ac:	f002 fae2 	bl	8008874 <_Bfree>
 80062b0:	9805      	ldr	r0, [sp, #20]
 80062b2:	4621      	mov	r1, r4
 80062b4:	f002 fade 	bl	8008874 <_Bfree>
 80062b8:	e618      	b.n	8005eec <_strtod_l+0x644>
 80062ba:	f1ba 0f01 	cmp.w	sl, #1
 80062be:	d103      	bne.n	80062c8 <_strtod_l+0xa20>
 80062c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f43f ada5 	beq.w	8005e12 <_strtod_l+0x56a>
 80062c8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006378 <_strtod_l+0xad0>
 80062cc:	4f35      	ldr	r7, [pc, #212]	@ (80063a4 <_strtod_l+0xafc>)
 80062ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80062d2:	2600      	movs	r6, #0
 80062d4:	e7b1      	b.n	800623a <_strtod_l+0x992>
 80062d6:	4f34      	ldr	r7, [pc, #208]	@ (80063a8 <_strtod_l+0xb00>)
 80062d8:	2600      	movs	r6, #0
 80062da:	e7aa      	b.n	8006232 <_strtod_l+0x98a>
 80062dc:	4b32      	ldr	r3, [pc, #200]	@ (80063a8 <_strtod_l+0xb00>)
 80062de:	4630      	mov	r0, r6
 80062e0:	4639      	mov	r1, r7
 80062e2:	2200      	movs	r2, #0
 80062e4:	f7fa f998 	bl	8000618 <__aeabi_dmul>
 80062e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062ea:	4606      	mov	r6, r0
 80062ec:	460f      	mov	r7, r1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d09f      	beq.n	8006232 <_strtod_l+0x98a>
 80062f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80062f6:	e7a0      	b.n	800623a <_strtod_l+0x992>
 80062f8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006380 <_strtod_l+0xad8>
 80062fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006300:	ec57 6b17 	vmov	r6, r7, d7
 8006304:	e799      	b.n	800623a <_strtod_l+0x992>
 8006306:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800630a:	9b08      	ldr	r3, [sp, #32]
 800630c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1c1      	bne.n	8006298 <_strtod_l+0x9f0>
 8006314:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006318:	0d1b      	lsrs	r3, r3, #20
 800631a:	051b      	lsls	r3, r3, #20
 800631c:	429d      	cmp	r5, r3
 800631e:	d1bb      	bne.n	8006298 <_strtod_l+0x9f0>
 8006320:	4630      	mov	r0, r6
 8006322:	4639      	mov	r1, r7
 8006324:	f7fa fc88 	bl	8000c38 <__aeabi_d2lz>
 8006328:	f7fa f948 	bl	80005bc <__aeabi_l2d>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	4630      	mov	r0, r6
 8006332:	4639      	mov	r1, r7
 8006334:	f7f9 ffb8 	bl	80002a8 <__aeabi_dsub>
 8006338:	460b      	mov	r3, r1
 800633a:	4602      	mov	r2, r0
 800633c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006340:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006344:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006346:	ea46 060a 	orr.w	r6, r6, sl
 800634a:	431e      	orrs	r6, r3
 800634c:	d06f      	beq.n	800642e <_strtod_l+0xb86>
 800634e:	a30e      	add	r3, pc, #56	@ (adr r3, 8006388 <_strtod_l+0xae0>)
 8006350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006354:	f7fa fbd2 	bl	8000afc <__aeabi_dcmplt>
 8006358:	2800      	cmp	r0, #0
 800635a:	f47f accf 	bne.w	8005cfc <_strtod_l+0x454>
 800635e:	a30c      	add	r3, pc, #48	@ (adr r3, 8006390 <_strtod_l+0xae8>)
 8006360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006364:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006368:	f7fa fbe6 	bl	8000b38 <__aeabi_dcmpgt>
 800636c:	2800      	cmp	r0, #0
 800636e:	d093      	beq.n	8006298 <_strtod_l+0x9f0>
 8006370:	e4c4      	b.n	8005cfc <_strtod_l+0x454>
 8006372:	bf00      	nop
 8006374:	f3af 8000 	nop.w
 8006378:	00000000 	.word	0x00000000
 800637c:	bff00000 	.word	0xbff00000
 8006380:	00000000 	.word	0x00000000
 8006384:	3ff00000 	.word	0x3ff00000
 8006388:	94a03595 	.word	0x94a03595
 800638c:	3fdfffff 	.word	0x3fdfffff
 8006390:	35afe535 	.word	0x35afe535
 8006394:	3fe00000 	.word	0x3fe00000
 8006398:	000fffff 	.word	0x000fffff
 800639c:	7ff00000 	.word	0x7ff00000
 80063a0:	7fefffff 	.word	0x7fefffff
 80063a4:	3ff00000 	.word	0x3ff00000
 80063a8:	3fe00000 	.word	0x3fe00000
 80063ac:	7fe00000 	.word	0x7fe00000
 80063b0:	7c9fffff 	.word	0x7c9fffff
 80063b4:	9b08      	ldr	r3, [sp, #32]
 80063b6:	b323      	cbz	r3, 8006402 <_strtod_l+0xb5a>
 80063b8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80063bc:	d821      	bhi.n	8006402 <_strtod_l+0xb5a>
 80063be:	a328      	add	r3, pc, #160	@ (adr r3, 8006460 <_strtod_l+0xbb8>)
 80063c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c4:	4630      	mov	r0, r6
 80063c6:	4639      	mov	r1, r7
 80063c8:	f7fa fba2 	bl	8000b10 <__aeabi_dcmple>
 80063cc:	b1a0      	cbz	r0, 80063f8 <_strtod_l+0xb50>
 80063ce:	4639      	mov	r1, r7
 80063d0:	4630      	mov	r0, r6
 80063d2:	f7fa fbf9 	bl	8000bc8 <__aeabi_d2uiz>
 80063d6:	2801      	cmp	r0, #1
 80063d8:	bf38      	it	cc
 80063da:	2001      	movcc	r0, #1
 80063dc:	f7fa f8a2 	bl	8000524 <__aeabi_ui2d>
 80063e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063e2:	4606      	mov	r6, r0
 80063e4:	460f      	mov	r7, r1
 80063e6:	b9fb      	cbnz	r3, 8006428 <_strtod_l+0xb80>
 80063e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80063ec:	9014      	str	r0, [sp, #80]	@ 0x50
 80063ee:	9315      	str	r3, [sp, #84]	@ 0x54
 80063f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80063f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80063f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80063fa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80063fe:	1b5b      	subs	r3, r3, r5
 8006400:	9311      	str	r3, [sp, #68]	@ 0x44
 8006402:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006406:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800640a:	f002 fd67 	bl	8008edc <__ulp>
 800640e:	4650      	mov	r0, sl
 8006410:	ec53 2b10 	vmov	r2, r3, d0
 8006414:	4659      	mov	r1, fp
 8006416:	f7fa f8ff 	bl	8000618 <__aeabi_dmul>
 800641a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800641e:	f7f9 ff45 	bl	80002ac <__adddf3>
 8006422:	4682      	mov	sl, r0
 8006424:	468b      	mov	fp, r1
 8006426:	e770      	b.n	800630a <_strtod_l+0xa62>
 8006428:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800642c:	e7e0      	b.n	80063f0 <_strtod_l+0xb48>
 800642e:	a30e      	add	r3, pc, #56	@ (adr r3, 8006468 <_strtod_l+0xbc0>)
 8006430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006434:	f7fa fb62 	bl	8000afc <__aeabi_dcmplt>
 8006438:	e798      	b.n	800636c <_strtod_l+0xac4>
 800643a:	2300      	movs	r3, #0
 800643c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800643e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006440:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006442:	6013      	str	r3, [r2, #0]
 8006444:	f7ff ba6d 	b.w	8005922 <_strtod_l+0x7a>
 8006448:	2a65      	cmp	r2, #101	@ 0x65
 800644a:	f43f ab66 	beq.w	8005b1a <_strtod_l+0x272>
 800644e:	2a45      	cmp	r2, #69	@ 0x45
 8006450:	f43f ab63 	beq.w	8005b1a <_strtod_l+0x272>
 8006454:	2301      	movs	r3, #1
 8006456:	f7ff bb9e 	b.w	8005b96 <_strtod_l+0x2ee>
 800645a:	bf00      	nop
 800645c:	f3af 8000 	nop.w
 8006460:	ffc00000 	.word	0xffc00000
 8006464:	41dfffff 	.word	0x41dfffff
 8006468:	94a03595 	.word	0x94a03595
 800646c:	3fcfffff 	.word	0x3fcfffff

08006470 <strtod>:
 8006470:	460a      	mov	r2, r1
 8006472:	4601      	mov	r1, r0
 8006474:	4802      	ldr	r0, [pc, #8]	@ (8006480 <strtod+0x10>)
 8006476:	4b03      	ldr	r3, [pc, #12]	@ (8006484 <strtod+0x14>)
 8006478:	6800      	ldr	r0, [r0, #0]
 800647a:	f7ff ba15 	b.w	80058a8 <_strtod_l>
 800647e:	bf00      	nop
 8006480:	20000190 	.word	0x20000190
 8006484:	20000024 	.word	0x20000024

08006488 <__cvt>:
 8006488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800648c:	ec57 6b10 	vmov	r6, r7, d0
 8006490:	2f00      	cmp	r7, #0
 8006492:	460c      	mov	r4, r1
 8006494:	4619      	mov	r1, r3
 8006496:	463b      	mov	r3, r7
 8006498:	bfbb      	ittet	lt
 800649a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800649e:	461f      	movlt	r7, r3
 80064a0:	2300      	movge	r3, #0
 80064a2:	232d      	movlt	r3, #45	@ 0x2d
 80064a4:	700b      	strb	r3, [r1, #0]
 80064a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80064ac:	4691      	mov	r9, r2
 80064ae:	f023 0820 	bic.w	r8, r3, #32
 80064b2:	bfbc      	itt	lt
 80064b4:	4632      	movlt	r2, r6
 80064b6:	4616      	movlt	r6, r2
 80064b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80064bc:	d005      	beq.n	80064ca <__cvt+0x42>
 80064be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80064c2:	d100      	bne.n	80064c6 <__cvt+0x3e>
 80064c4:	3401      	adds	r4, #1
 80064c6:	2102      	movs	r1, #2
 80064c8:	e000      	b.n	80064cc <__cvt+0x44>
 80064ca:	2103      	movs	r1, #3
 80064cc:	ab03      	add	r3, sp, #12
 80064ce:	9301      	str	r3, [sp, #4]
 80064d0:	ab02      	add	r3, sp, #8
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	ec47 6b10 	vmov	d0, r6, r7
 80064d8:	4653      	mov	r3, sl
 80064da:	4622      	mov	r2, r4
 80064dc:	f001 f830 	bl	8007540 <_dtoa_r>
 80064e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80064e4:	4605      	mov	r5, r0
 80064e6:	d119      	bne.n	800651c <__cvt+0x94>
 80064e8:	f019 0f01 	tst.w	r9, #1
 80064ec:	d00e      	beq.n	800650c <__cvt+0x84>
 80064ee:	eb00 0904 	add.w	r9, r0, r4
 80064f2:	2200      	movs	r2, #0
 80064f4:	2300      	movs	r3, #0
 80064f6:	4630      	mov	r0, r6
 80064f8:	4639      	mov	r1, r7
 80064fa:	f7fa faf5 	bl	8000ae8 <__aeabi_dcmpeq>
 80064fe:	b108      	cbz	r0, 8006504 <__cvt+0x7c>
 8006500:	f8cd 900c 	str.w	r9, [sp, #12]
 8006504:	2230      	movs	r2, #48	@ 0x30
 8006506:	9b03      	ldr	r3, [sp, #12]
 8006508:	454b      	cmp	r3, r9
 800650a:	d31e      	bcc.n	800654a <__cvt+0xc2>
 800650c:	9b03      	ldr	r3, [sp, #12]
 800650e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006510:	1b5b      	subs	r3, r3, r5
 8006512:	4628      	mov	r0, r5
 8006514:	6013      	str	r3, [r2, #0]
 8006516:	b004      	add	sp, #16
 8006518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800651c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006520:	eb00 0904 	add.w	r9, r0, r4
 8006524:	d1e5      	bne.n	80064f2 <__cvt+0x6a>
 8006526:	7803      	ldrb	r3, [r0, #0]
 8006528:	2b30      	cmp	r3, #48	@ 0x30
 800652a:	d10a      	bne.n	8006542 <__cvt+0xba>
 800652c:	2200      	movs	r2, #0
 800652e:	2300      	movs	r3, #0
 8006530:	4630      	mov	r0, r6
 8006532:	4639      	mov	r1, r7
 8006534:	f7fa fad8 	bl	8000ae8 <__aeabi_dcmpeq>
 8006538:	b918      	cbnz	r0, 8006542 <__cvt+0xba>
 800653a:	f1c4 0401 	rsb	r4, r4, #1
 800653e:	f8ca 4000 	str.w	r4, [sl]
 8006542:	f8da 3000 	ldr.w	r3, [sl]
 8006546:	4499      	add	r9, r3
 8006548:	e7d3      	b.n	80064f2 <__cvt+0x6a>
 800654a:	1c59      	adds	r1, r3, #1
 800654c:	9103      	str	r1, [sp, #12]
 800654e:	701a      	strb	r2, [r3, #0]
 8006550:	e7d9      	b.n	8006506 <__cvt+0x7e>

08006552 <__exponent>:
 8006552:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006554:	2900      	cmp	r1, #0
 8006556:	bfba      	itte	lt
 8006558:	4249      	neglt	r1, r1
 800655a:	232d      	movlt	r3, #45	@ 0x2d
 800655c:	232b      	movge	r3, #43	@ 0x2b
 800655e:	2909      	cmp	r1, #9
 8006560:	7002      	strb	r2, [r0, #0]
 8006562:	7043      	strb	r3, [r0, #1]
 8006564:	dd29      	ble.n	80065ba <__exponent+0x68>
 8006566:	f10d 0307 	add.w	r3, sp, #7
 800656a:	461d      	mov	r5, r3
 800656c:	270a      	movs	r7, #10
 800656e:	461a      	mov	r2, r3
 8006570:	fbb1 f6f7 	udiv	r6, r1, r7
 8006574:	fb07 1416 	mls	r4, r7, r6, r1
 8006578:	3430      	adds	r4, #48	@ 0x30
 800657a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800657e:	460c      	mov	r4, r1
 8006580:	2c63      	cmp	r4, #99	@ 0x63
 8006582:	f103 33ff 	add.w	r3, r3, #4294967295
 8006586:	4631      	mov	r1, r6
 8006588:	dcf1      	bgt.n	800656e <__exponent+0x1c>
 800658a:	3130      	adds	r1, #48	@ 0x30
 800658c:	1e94      	subs	r4, r2, #2
 800658e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006592:	1c41      	adds	r1, r0, #1
 8006594:	4623      	mov	r3, r4
 8006596:	42ab      	cmp	r3, r5
 8006598:	d30a      	bcc.n	80065b0 <__exponent+0x5e>
 800659a:	f10d 0309 	add.w	r3, sp, #9
 800659e:	1a9b      	subs	r3, r3, r2
 80065a0:	42ac      	cmp	r4, r5
 80065a2:	bf88      	it	hi
 80065a4:	2300      	movhi	r3, #0
 80065a6:	3302      	adds	r3, #2
 80065a8:	4403      	add	r3, r0
 80065aa:	1a18      	subs	r0, r3, r0
 80065ac:	b003      	add	sp, #12
 80065ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80065b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80065b8:	e7ed      	b.n	8006596 <__exponent+0x44>
 80065ba:	2330      	movs	r3, #48	@ 0x30
 80065bc:	3130      	adds	r1, #48	@ 0x30
 80065be:	7083      	strb	r3, [r0, #2]
 80065c0:	70c1      	strb	r1, [r0, #3]
 80065c2:	1d03      	adds	r3, r0, #4
 80065c4:	e7f1      	b.n	80065aa <__exponent+0x58>
	...

080065c8 <_printf_float>:
 80065c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065cc:	b08d      	sub	sp, #52	@ 0x34
 80065ce:	460c      	mov	r4, r1
 80065d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80065d4:	4616      	mov	r6, r2
 80065d6:	461f      	mov	r7, r3
 80065d8:	4605      	mov	r5, r0
 80065da:	f000 fe89 	bl	80072f0 <_localeconv_r>
 80065de:	6803      	ldr	r3, [r0, #0]
 80065e0:	9304      	str	r3, [sp, #16]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7f9 fe54 	bl	8000290 <strlen>
 80065e8:	2300      	movs	r3, #0
 80065ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80065ec:	f8d8 3000 	ldr.w	r3, [r8]
 80065f0:	9005      	str	r0, [sp, #20]
 80065f2:	3307      	adds	r3, #7
 80065f4:	f023 0307 	bic.w	r3, r3, #7
 80065f8:	f103 0208 	add.w	r2, r3, #8
 80065fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006600:	f8d4 b000 	ldr.w	fp, [r4]
 8006604:	f8c8 2000 	str.w	r2, [r8]
 8006608:	e9d3 8900 	ldrd	r8, r9, [r3]
 800660c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006610:	9307      	str	r3, [sp, #28]
 8006612:	f8cd 8018 	str.w	r8, [sp, #24]
 8006616:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800661a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800661e:	4b9c      	ldr	r3, [pc, #624]	@ (8006890 <_printf_float+0x2c8>)
 8006620:	f04f 32ff 	mov.w	r2, #4294967295
 8006624:	f7fa fa92 	bl	8000b4c <__aeabi_dcmpun>
 8006628:	bb70      	cbnz	r0, 8006688 <_printf_float+0xc0>
 800662a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800662e:	4b98      	ldr	r3, [pc, #608]	@ (8006890 <_printf_float+0x2c8>)
 8006630:	f04f 32ff 	mov.w	r2, #4294967295
 8006634:	f7fa fa6c 	bl	8000b10 <__aeabi_dcmple>
 8006638:	bb30      	cbnz	r0, 8006688 <_printf_float+0xc0>
 800663a:	2200      	movs	r2, #0
 800663c:	2300      	movs	r3, #0
 800663e:	4640      	mov	r0, r8
 8006640:	4649      	mov	r1, r9
 8006642:	f7fa fa5b 	bl	8000afc <__aeabi_dcmplt>
 8006646:	b110      	cbz	r0, 800664e <_printf_float+0x86>
 8006648:	232d      	movs	r3, #45	@ 0x2d
 800664a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800664e:	4a91      	ldr	r2, [pc, #580]	@ (8006894 <_printf_float+0x2cc>)
 8006650:	4b91      	ldr	r3, [pc, #580]	@ (8006898 <_printf_float+0x2d0>)
 8006652:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006656:	bf94      	ite	ls
 8006658:	4690      	movls	r8, r2
 800665a:	4698      	movhi	r8, r3
 800665c:	2303      	movs	r3, #3
 800665e:	6123      	str	r3, [r4, #16]
 8006660:	f02b 0304 	bic.w	r3, fp, #4
 8006664:	6023      	str	r3, [r4, #0]
 8006666:	f04f 0900 	mov.w	r9, #0
 800666a:	9700      	str	r7, [sp, #0]
 800666c:	4633      	mov	r3, r6
 800666e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006670:	4621      	mov	r1, r4
 8006672:	4628      	mov	r0, r5
 8006674:	f000 f9d2 	bl	8006a1c <_printf_common>
 8006678:	3001      	adds	r0, #1
 800667a:	f040 808d 	bne.w	8006798 <_printf_float+0x1d0>
 800667e:	f04f 30ff 	mov.w	r0, #4294967295
 8006682:	b00d      	add	sp, #52	@ 0x34
 8006684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006688:	4642      	mov	r2, r8
 800668a:	464b      	mov	r3, r9
 800668c:	4640      	mov	r0, r8
 800668e:	4649      	mov	r1, r9
 8006690:	f7fa fa5c 	bl	8000b4c <__aeabi_dcmpun>
 8006694:	b140      	cbz	r0, 80066a8 <_printf_float+0xe0>
 8006696:	464b      	mov	r3, r9
 8006698:	2b00      	cmp	r3, #0
 800669a:	bfbc      	itt	lt
 800669c:	232d      	movlt	r3, #45	@ 0x2d
 800669e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80066a2:	4a7e      	ldr	r2, [pc, #504]	@ (800689c <_printf_float+0x2d4>)
 80066a4:	4b7e      	ldr	r3, [pc, #504]	@ (80068a0 <_printf_float+0x2d8>)
 80066a6:	e7d4      	b.n	8006652 <_printf_float+0x8a>
 80066a8:	6863      	ldr	r3, [r4, #4]
 80066aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80066ae:	9206      	str	r2, [sp, #24]
 80066b0:	1c5a      	adds	r2, r3, #1
 80066b2:	d13b      	bne.n	800672c <_printf_float+0x164>
 80066b4:	2306      	movs	r3, #6
 80066b6:	6063      	str	r3, [r4, #4]
 80066b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80066bc:	2300      	movs	r3, #0
 80066be:	6022      	str	r2, [r4, #0]
 80066c0:	9303      	str	r3, [sp, #12]
 80066c2:	ab0a      	add	r3, sp, #40	@ 0x28
 80066c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80066c8:	ab09      	add	r3, sp, #36	@ 0x24
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	6861      	ldr	r1, [r4, #4]
 80066ce:	ec49 8b10 	vmov	d0, r8, r9
 80066d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80066d6:	4628      	mov	r0, r5
 80066d8:	f7ff fed6 	bl	8006488 <__cvt>
 80066dc:	9b06      	ldr	r3, [sp, #24]
 80066de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80066e0:	2b47      	cmp	r3, #71	@ 0x47
 80066e2:	4680      	mov	r8, r0
 80066e4:	d129      	bne.n	800673a <_printf_float+0x172>
 80066e6:	1cc8      	adds	r0, r1, #3
 80066e8:	db02      	blt.n	80066f0 <_printf_float+0x128>
 80066ea:	6863      	ldr	r3, [r4, #4]
 80066ec:	4299      	cmp	r1, r3
 80066ee:	dd41      	ble.n	8006774 <_printf_float+0x1ac>
 80066f0:	f1aa 0a02 	sub.w	sl, sl, #2
 80066f4:	fa5f fa8a 	uxtb.w	sl, sl
 80066f8:	3901      	subs	r1, #1
 80066fa:	4652      	mov	r2, sl
 80066fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006700:	9109      	str	r1, [sp, #36]	@ 0x24
 8006702:	f7ff ff26 	bl	8006552 <__exponent>
 8006706:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006708:	1813      	adds	r3, r2, r0
 800670a:	2a01      	cmp	r2, #1
 800670c:	4681      	mov	r9, r0
 800670e:	6123      	str	r3, [r4, #16]
 8006710:	dc02      	bgt.n	8006718 <_printf_float+0x150>
 8006712:	6822      	ldr	r2, [r4, #0]
 8006714:	07d2      	lsls	r2, r2, #31
 8006716:	d501      	bpl.n	800671c <_printf_float+0x154>
 8006718:	3301      	adds	r3, #1
 800671a:	6123      	str	r3, [r4, #16]
 800671c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006720:	2b00      	cmp	r3, #0
 8006722:	d0a2      	beq.n	800666a <_printf_float+0xa2>
 8006724:	232d      	movs	r3, #45	@ 0x2d
 8006726:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800672a:	e79e      	b.n	800666a <_printf_float+0xa2>
 800672c:	9a06      	ldr	r2, [sp, #24]
 800672e:	2a47      	cmp	r2, #71	@ 0x47
 8006730:	d1c2      	bne.n	80066b8 <_printf_float+0xf0>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1c0      	bne.n	80066b8 <_printf_float+0xf0>
 8006736:	2301      	movs	r3, #1
 8006738:	e7bd      	b.n	80066b6 <_printf_float+0xee>
 800673a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800673e:	d9db      	bls.n	80066f8 <_printf_float+0x130>
 8006740:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006744:	d118      	bne.n	8006778 <_printf_float+0x1b0>
 8006746:	2900      	cmp	r1, #0
 8006748:	6863      	ldr	r3, [r4, #4]
 800674a:	dd0b      	ble.n	8006764 <_printf_float+0x19c>
 800674c:	6121      	str	r1, [r4, #16]
 800674e:	b913      	cbnz	r3, 8006756 <_printf_float+0x18e>
 8006750:	6822      	ldr	r2, [r4, #0]
 8006752:	07d0      	lsls	r0, r2, #31
 8006754:	d502      	bpl.n	800675c <_printf_float+0x194>
 8006756:	3301      	adds	r3, #1
 8006758:	440b      	add	r3, r1
 800675a:	6123      	str	r3, [r4, #16]
 800675c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800675e:	f04f 0900 	mov.w	r9, #0
 8006762:	e7db      	b.n	800671c <_printf_float+0x154>
 8006764:	b913      	cbnz	r3, 800676c <_printf_float+0x1a4>
 8006766:	6822      	ldr	r2, [r4, #0]
 8006768:	07d2      	lsls	r2, r2, #31
 800676a:	d501      	bpl.n	8006770 <_printf_float+0x1a8>
 800676c:	3302      	adds	r3, #2
 800676e:	e7f4      	b.n	800675a <_printf_float+0x192>
 8006770:	2301      	movs	r3, #1
 8006772:	e7f2      	b.n	800675a <_printf_float+0x192>
 8006774:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006778:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800677a:	4299      	cmp	r1, r3
 800677c:	db05      	blt.n	800678a <_printf_float+0x1c2>
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	6121      	str	r1, [r4, #16]
 8006782:	07d8      	lsls	r0, r3, #31
 8006784:	d5ea      	bpl.n	800675c <_printf_float+0x194>
 8006786:	1c4b      	adds	r3, r1, #1
 8006788:	e7e7      	b.n	800675a <_printf_float+0x192>
 800678a:	2900      	cmp	r1, #0
 800678c:	bfd4      	ite	le
 800678e:	f1c1 0202 	rsble	r2, r1, #2
 8006792:	2201      	movgt	r2, #1
 8006794:	4413      	add	r3, r2
 8006796:	e7e0      	b.n	800675a <_printf_float+0x192>
 8006798:	6823      	ldr	r3, [r4, #0]
 800679a:	055a      	lsls	r2, r3, #21
 800679c:	d407      	bmi.n	80067ae <_printf_float+0x1e6>
 800679e:	6923      	ldr	r3, [r4, #16]
 80067a0:	4642      	mov	r2, r8
 80067a2:	4631      	mov	r1, r6
 80067a4:	4628      	mov	r0, r5
 80067a6:	47b8      	blx	r7
 80067a8:	3001      	adds	r0, #1
 80067aa:	d12b      	bne.n	8006804 <_printf_float+0x23c>
 80067ac:	e767      	b.n	800667e <_printf_float+0xb6>
 80067ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80067b2:	f240 80dd 	bls.w	8006970 <_printf_float+0x3a8>
 80067b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80067ba:	2200      	movs	r2, #0
 80067bc:	2300      	movs	r3, #0
 80067be:	f7fa f993 	bl	8000ae8 <__aeabi_dcmpeq>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	d033      	beq.n	800682e <_printf_float+0x266>
 80067c6:	4a37      	ldr	r2, [pc, #220]	@ (80068a4 <_printf_float+0x2dc>)
 80067c8:	2301      	movs	r3, #1
 80067ca:	4631      	mov	r1, r6
 80067cc:	4628      	mov	r0, r5
 80067ce:	47b8      	blx	r7
 80067d0:	3001      	adds	r0, #1
 80067d2:	f43f af54 	beq.w	800667e <_printf_float+0xb6>
 80067d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80067da:	4543      	cmp	r3, r8
 80067dc:	db02      	blt.n	80067e4 <_printf_float+0x21c>
 80067de:	6823      	ldr	r3, [r4, #0]
 80067e0:	07d8      	lsls	r0, r3, #31
 80067e2:	d50f      	bpl.n	8006804 <_printf_float+0x23c>
 80067e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067e8:	4631      	mov	r1, r6
 80067ea:	4628      	mov	r0, r5
 80067ec:	47b8      	blx	r7
 80067ee:	3001      	adds	r0, #1
 80067f0:	f43f af45 	beq.w	800667e <_printf_float+0xb6>
 80067f4:	f04f 0900 	mov.w	r9, #0
 80067f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80067fc:	f104 0a1a 	add.w	sl, r4, #26
 8006800:	45c8      	cmp	r8, r9
 8006802:	dc09      	bgt.n	8006818 <_printf_float+0x250>
 8006804:	6823      	ldr	r3, [r4, #0]
 8006806:	079b      	lsls	r3, r3, #30
 8006808:	f100 8103 	bmi.w	8006a12 <_printf_float+0x44a>
 800680c:	68e0      	ldr	r0, [r4, #12]
 800680e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006810:	4298      	cmp	r0, r3
 8006812:	bfb8      	it	lt
 8006814:	4618      	movlt	r0, r3
 8006816:	e734      	b.n	8006682 <_printf_float+0xba>
 8006818:	2301      	movs	r3, #1
 800681a:	4652      	mov	r2, sl
 800681c:	4631      	mov	r1, r6
 800681e:	4628      	mov	r0, r5
 8006820:	47b8      	blx	r7
 8006822:	3001      	adds	r0, #1
 8006824:	f43f af2b 	beq.w	800667e <_printf_float+0xb6>
 8006828:	f109 0901 	add.w	r9, r9, #1
 800682c:	e7e8      	b.n	8006800 <_printf_float+0x238>
 800682e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006830:	2b00      	cmp	r3, #0
 8006832:	dc39      	bgt.n	80068a8 <_printf_float+0x2e0>
 8006834:	4a1b      	ldr	r2, [pc, #108]	@ (80068a4 <_printf_float+0x2dc>)
 8006836:	2301      	movs	r3, #1
 8006838:	4631      	mov	r1, r6
 800683a:	4628      	mov	r0, r5
 800683c:	47b8      	blx	r7
 800683e:	3001      	adds	r0, #1
 8006840:	f43f af1d 	beq.w	800667e <_printf_float+0xb6>
 8006844:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006848:	ea59 0303 	orrs.w	r3, r9, r3
 800684c:	d102      	bne.n	8006854 <_printf_float+0x28c>
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	07d9      	lsls	r1, r3, #31
 8006852:	d5d7      	bpl.n	8006804 <_printf_float+0x23c>
 8006854:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006858:	4631      	mov	r1, r6
 800685a:	4628      	mov	r0, r5
 800685c:	47b8      	blx	r7
 800685e:	3001      	adds	r0, #1
 8006860:	f43f af0d 	beq.w	800667e <_printf_float+0xb6>
 8006864:	f04f 0a00 	mov.w	sl, #0
 8006868:	f104 0b1a 	add.w	fp, r4, #26
 800686c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800686e:	425b      	negs	r3, r3
 8006870:	4553      	cmp	r3, sl
 8006872:	dc01      	bgt.n	8006878 <_printf_float+0x2b0>
 8006874:	464b      	mov	r3, r9
 8006876:	e793      	b.n	80067a0 <_printf_float+0x1d8>
 8006878:	2301      	movs	r3, #1
 800687a:	465a      	mov	r2, fp
 800687c:	4631      	mov	r1, r6
 800687e:	4628      	mov	r0, r5
 8006880:	47b8      	blx	r7
 8006882:	3001      	adds	r0, #1
 8006884:	f43f aefb 	beq.w	800667e <_printf_float+0xb6>
 8006888:	f10a 0a01 	add.w	sl, sl, #1
 800688c:	e7ee      	b.n	800686c <_printf_float+0x2a4>
 800688e:	bf00      	nop
 8006890:	7fefffff 	.word	0x7fefffff
 8006894:	0800a6f9 	.word	0x0800a6f9
 8006898:	0800a6fd 	.word	0x0800a6fd
 800689c:	0800a701 	.word	0x0800a701
 80068a0:	0800a705 	.word	0x0800a705
 80068a4:	0800a99f 	.word	0x0800a99f
 80068a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80068aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80068ae:	4553      	cmp	r3, sl
 80068b0:	bfa8      	it	ge
 80068b2:	4653      	movge	r3, sl
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	4699      	mov	r9, r3
 80068b8:	dc36      	bgt.n	8006928 <_printf_float+0x360>
 80068ba:	f04f 0b00 	mov.w	fp, #0
 80068be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068c2:	f104 021a 	add.w	r2, r4, #26
 80068c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80068c8:	9306      	str	r3, [sp, #24]
 80068ca:	eba3 0309 	sub.w	r3, r3, r9
 80068ce:	455b      	cmp	r3, fp
 80068d0:	dc31      	bgt.n	8006936 <_printf_float+0x36e>
 80068d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068d4:	459a      	cmp	sl, r3
 80068d6:	dc3a      	bgt.n	800694e <_printf_float+0x386>
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	07da      	lsls	r2, r3, #31
 80068dc:	d437      	bmi.n	800694e <_printf_float+0x386>
 80068de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068e0:	ebaa 0903 	sub.w	r9, sl, r3
 80068e4:	9b06      	ldr	r3, [sp, #24]
 80068e6:	ebaa 0303 	sub.w	r3, sl, r3
 80068ea:	4599      	cmp	r9, r3
 80068ec:	bfa8      	it	ge
 80068ee:	4699      	movge	r9, r3
 80068f0:	f1b9 0f00 	cmp.w	r9, #0
 80068f4:	dc33      	bgt.n	800695e <_printf_float+0x396>
 80068f6:	f04f 0800 	mov.w	r8, #0
 80068fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068fe:	f104 0b1a 	add.w	fp, r4, #26
 8006902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006904:	ebaa 0303 	sub.w	r3, sl, r3
 8006908:	eba3 0309 	sub.w	r3, r3, r9
 800690c:	4543      	cmp	r3, r8
 800690e:	f77f af79 	ble.w	8006804 <_printf_float+0x23c>
 8006912:	2301      	movs	r3, #1
 8006914:	465a      	mov	r2, fp
 8006916:	4631      	mov	r1, r6
 8006918:	4628      	mov	r0, r5
 800691a:	47b8      	blx	r7
 800691c:	3001      	adds	r0, #1
 800691e:	f43f aeae 	beq.w	800667e <_printf_float+0xb6>
 8006922:	f108 0801 	add.w	r8, r8, #1
 8006926:	e7ec      	b.n	8006902 <_printf_float+0x33a>
 8006928:	4642      	mov	r2, r8
 800692a:	4631      	mov	r1, r6
 800692c:	4628      	mov	r0, r5
 800692e:	47b8      	blx	r7
 8006930:	3001      	adds	r0, #1
 8006932:	d1c2      	bne.n	80068ba <_printf_float+0x2f2>
 8006934:	e6a3      	b.n	800667e <_printf_float+0xb6>
 8006936:	2301      	movs	r3, #1
 8006938:	4631      	mov	r1, r6
 800693a:	4628      	mov	r0, r5
 800693c:	9206      	str	r2, [sp, #24]
 800693e:	47b8      	blx	r7
 8006940:	3001      	adds	r0, #1
 8006942:	f43f ae9c 	beq.w	800667e <_printf_float+0xb6>
 8006946:	9a06      	ldr	r2, [sp, #24]
 8006948:	f10b 0b01 	add.w	fp, fp, #1
 800694c:	e7bb      	b.n	80068c6 <_printf_float+0x2fe>
 800694e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006952:	4631      	mov	r1, r6
 8006954:	4628      	mov	r0, r5
 8006956:	47b8      	blx	r7
 8006958:	3001      	adds	r0, #1
 800695a:	d1c0      	bne.n	80068de <_printf_float+0x316>
 800695c:	e68f      	b.n	800667e <_printf_float+0xb6>
 800695e:	9a06      	ldr	r2, [sp, #24]
 8006960:	464b      	mov	r3, r9
 8006962:	4442      	add	r2, r8
 8006964:	4631      	mov	r1, r6
 8006966:	4628      	mov	r0, r5
 8006968:	47b8      	blx	r7
 800696a:	3001      	adds	r0, #1
 800696c:	d1c3      	bne.n	80068f6 <_printf_float+0x32e>
 800696e:	e686      	b.n	800667e <_printf_float+0xb6>
 8006970:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006974:	f1ba 0f01 	cmp.w	sl, #1
 8006978:	dc01      	bgt.n	800697e <_printf_float+0x3b6>
 800697a:	07db      	lsls	r3, r3, #31
 800697c:	d536      	bpl.n	80069ec <_printf_float+0x424>
 800697e:	2301      	movs	r3, #1
 8006980:	4642      	mov	r2, r8
 8006982:	4631      	mov	r1, r6
 8006984:	4628      	mov	r0, r5
 8006986:	47b8      	blx	r7
 8006988:	3001      	adds	r0, #1
 800698a:	f43f ae78 	beq.w	800667e <_printf_float+0xb6>
 800698e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006992:	4631      	mov	r1, r6
 8006994:	4628      	mov	r0, r5
 8006996:	47b8      	blx	r7
 8006998:	3001      	adds	r0, #1
 800699a:	f43f ae70 	beq.w	800667e <_printf_float+0xb6>
 800699e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80069a2:	2200      	movs	r2, #0
 80069a4:	2300      	movs	r3, #0
 80069a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069aa:	f7fa f89d 	bl	8000ae8 <__aeabi_dcmpeq>
 80069ae:	b9c0      	cbnz	r0, 80069e2 <_printf_float+0x41a>
 80069b0:	4653      	mov	r3, sl
 80069b2:	f108 0201 	add.w	r2, r8, #1
 80069b6:	4631      	mov	r1, r6
 80069b8:	4628      	mov	r0, r5
 80069ba:	47b8      	blx	r7
 80069bc:	3001      	adds	r0, #1
 80069be:	d10c      	bne.n	80069da <_printf_float+0x412>
 80069c0:	e65d      	b.n	800667e <_printf_float+0xb6>
 80069c2:	2301      	movs	r3, #1
 80069c4:	465a      	mov	r2, fp
 80069c6:	4631      	mov	r1, r6
 80069c8:	4628      	mov	r0, r5
 80069ca:	47b8      	blx	r7
 80069cc:	3001      	adds	r0, #1
 80069ce:	f43f ae56 	beq.w	800667e <_printf_float+0xb6>
 80069d2:	f108 0801 	add.w	r8, r8, #1
 80069d6:	45d0      	cmp	r8, sl
 80069d8:	dbf3      	blt.n	80069c2 <_printf_float+0x3fa>
 80069da:	464b      	mov	r3, r9
 80069dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80069e0:	e6df      	b.n	80067a2 <_printf_float+0x1da>
 80069e2:	f04f 0800 	mov.w	r8, #0
 80069e6:	f104 0b1a 	add.w	fp, r4, #26
 80069ea:	e7f4      	b.n	80069d6 <_printf_float+0x40e>
 80069ec:	2301      	movs	r3, #1
 80069ee:	4642      	mov	r2, r8
 80069f0:	e7e1      	b.n	80069b6 <_printf_float+0x3ee>
 80069f2:	2301      	movs	r3, #1
 80069f4:	464a      	mov	r2, r9
 80069f6:	4631      	mov	r1, r6
 80069f8:	4628      	mov	r0, r5
 80069fa:	47b8      	blx	r7
 80069fc:	3001      	adds	r0, #1
 80069fe:	f43f ae3e 	beq.w	800667e <_printf_float+0xb6>
 8006a02:	f108 0801 	add.w	r8, r8, #1
 8006a06:	68e3      	ldr	r3, [r4, #12]
 8006a08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a0a:	1a5b      	subs	r3, r3, r1
 8006a0c:	4543      	cmp	r3, r8
 8006a0e:	dcf0      	bgt.n	80069f2 <_printf_float+0x42a>
 8006a10:	e6fc      	b.n	800680c <_printf_float+0x244>
 8006a12:	f04f 0800 	mov.w	r8, #0
 8006a16:	f104 0919 	add.w	r9, r4, #25
 8006a1a:	e7f4      	b.n	8006a06 <_printf_float+0x43e>

08006a1c <_printf_common>:
 8006a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a20:	4616      	mov	r6, r2
 8006a22:	4698      	mov	r8, r3
 8006a24:	688a      	ldr	r2, [r1, #8]
 8006a26:	690b      	ldr	r3, [r1, #16]
 8006a28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	bfb8      	it	lt
 8006a30:	4613      	movlt	r3, r2
 8006a32:	6033      	str	r3, [r6, #0]
 8006a34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a38:	4607      	mov	r7, r0
 8006a3a:	460c      	mov	r4, r1
 8006a3c:	b10a      	cbz	r2, 8006a42 <_printf_common+0x26>
 8006a3e:	3301      	adds	r3, #1
 8006a40:	6033      	str	r3, [r6, #0]
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	0699      	lsls	r1, r3, #26
 8006a46:	bf42      	ittt	mi
 8006a48:	6833      	ldrmi	r3, [r6, #0]
 8006a4a:	3302      	addmi	r3, #2
 8006a4c:	6033      	strmi	r3, [r6, #0]
 8006a4e:	6825      	ldr	r5, [r4, #0]
 8006a50:	f015 0506 	ands.w	r5, r5, #6
 8006a54:	d106      	bne.n	8006a64 <_printf_common+0x48>
 8006a56:	f104 0a19 	add.w	sl, r4, #25
 8006a5a:	68e3      	ldr	r3, [r4, #12]
 8006a5c:	6832      	ldr	r2, [r6, #0]
 8006a5e:	1a9b      	subs	r3, r3, r2
 8006a60:	42ab      	cmp	r3, r5
 8006a62:	dc26      	bgt.n	8006ab2 <_printf_common+0x96>
 8006a64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a68:	6822      	ldr	r2, [r4, #0]
 8006a6a:	3b00      	subs	r3, #0
 8006a6c:	bf18      	it	ne
 8006a6e:	2301      	movne	r3, #1
 8006a70:	0692      	lsls	r2, r2, #26
 8006a72:	d42b      	bmi.n	8006acc <_printf_common+0xb0>
 8006a74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a78:	4641      	mov	r1, r8
 8006a7a:	4638      	mov	r0, r7
 8006a7c:	47c8      	blx	r9
 8006a7e:	3001      	adds	r0, #1
 8006a80:	d01e      	beq.n	8006ac0 <_printf_common+0xa4>
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	6922      	ldr	r2, [r4, #16]
 8006a86:	f003 0306 	and.w	r3, r3, #6
 8006a8a:	2b04      	cmp	r3, #4
 8006a8c:	bf02      	ittt	eq
 8006a8e:	68e5      	ldreq	r5, [r4, #12]
 8006a90:	6833      	ldreq	r3, [r6, #0]
 8006a92:	1aed      	subeq	r5, r5, r3
 8006a94:	68a3      	ldr	r3, [r4, #8]
 8006a96:	bf0c      	ite	eq
 8006a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a9c:	2500      	movne	r5, #0
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	bfc4      	itt	gt
 8006aa2:	1a9b      	subgt	r3, r3, r2
 8006aa4:	18ed      	addgt	r5, r5, r3
 8006aa6:	2600      	movs	r6, #0
 8006aa8:	341a      	adds	r4, #26
 8006aaa:	42b5      	cmp	r5, r6
 8006aac:	d11a      	bne.n	8006ae4 <_printf_common+0xc8>
 8006aae:	2000      	movs	r0, #0
 8006ab0:	e008      	b.n	8006ac4 <_printf_common+0xa8>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	4652      	mov	r2, sl
 8006ab6:	4641      	mov	r1, r8
 8006ab8:	4638      	mov	r0, r7
 8006aba:	47c8      	blx	r9
 8006abc:	3001      	adds	r0, #1
 8006abe:	d103      	bne.n	8006ac8 <_printf_common+0xac>
 8006ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac8:	3501      	adds	r5, #1
 8006aca:	e7c6      	b.n	8006a5a <_printf_common+0x3e>
 8006acc:	18e1      	adds	r1, r4, r3
 8006ace:	1c5a      	adds	r2, r3, #1
 8006ad0:	2030      	movs	r0, #48	@ 0x30
 8006ad2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ad6:	4422      	add	r2, r4
 8006ad8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006adc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ae0:	3302      	adds	r3, #2
 8006ae2:	e7c7      	b.n	8006a74 <_printf_common+0x58>
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	4622      	mov	r2, r4
 8006ae8:	4641      	mov	r1, r8
 8006aea:	4638      	mov	r0, r7
 8006aec:	47c8      	blx	r9
 8006aee:	3001      	adds	r0, #1
 8006af0:	d0e6      	beq.n	8006ac0 <_printf_common+0xa4>
 8006af2:	3601      	adds	r6, #1
 8006af4:	e7d9      	b.n	8006aaa <_printf_common+0x8e>
	...

08006af8 <_printf_i>:
 8006af8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006afc:	7e0f      	ldrb	r7, [r1, #24]
 8006afe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b00:	2f78      	cmp	r7, #120	@ 0x78
 8006b02:	4691      	mov	r9, r2
 8006b04:	4680      	mov	r8, r0
 8006b06:	460c      	mov	r4, r1
 8006b08:	469a      	mov	sl, r3
 8006b0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b0e:	d807      	bhi.n	8006b20 <_printf_i+0x28>
 8006b10:	2f62      	cmp	r7, #98	@ 0x62
 8006b12:	d80a      	bhi.n	8006b2a <_printf_i+0x32>
 8006b14:	2f00      	cmp	r7, #0
 8006b16:	f000 80d2 	beq.w	8006cbe <_printf_i+0x1c6>
 8006b1a:	2f58      	cmp	r7, #88	@ 0x58
 8006b1c:	f000 80b9 	beq.w	8006c92 <_printf_i+0x19a>
 8006b20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b28:	e03a      	b.n	8006ba0 <_printf_i+0xa8>
 8006b2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b2e:	2b15      	cmp	r3, #21
 8006b30:	d8f6      	bhi.n	8006b20 <_printf_i+0x28>
 8006b32:	a101      	add	r1, pc, #4	@ (adr r1, 8006b38 <_printf_i+0x40>)
 8006b34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b38:	08006b91 	.word	0x08006b91
 8006b3c:	08006ba5 	.word	0x08006ba5
 8006b40:	08006b21 	.word	0x08006b21
 8006b44:	08006b21 	.word	0x08006b21
 8006b48:	08006b21 	.word	0x08006b21
 8006b4c:	08006b21 	.word	0x08006b21
 8006b50:	08006ba5 	.word	0x08006ba5
 8006b54:	08006b21 	.word	0x08006b21
 8006b58:	08006b21 	.word	0x08006b21
 8006b5c:	08006b21 	.word	0x08006b21
 8006b60:	08006b21 	.word	0x08006b21
 8006b64:	08006ca5 	.word	0x08006ca5
 8006b68:	08006bcf 	.word	0x08006bcf
 8006b6c:	08006c5f 	.word	0x08006c5f
 8006b70:	08006b21 	.word	0x08006b21
 8006b74:	08006b21 	.word	0x08006b21
 8006b78:	08006cc7 	.word	0x08006cc7
 8006b7c:	08006b21 	.word	0x08006b21
 8006b80:	08006bcf 	.word	0x08006bcf
 8006b84:	08006b21 	.word	0x08006b21
 8006b88:	08006b21 	.word	0x08006b21
 8006b8c:	08006c67 	.word	0x08006c67
 8006b90:	6833      	ldr	r3, [r6, #0]
 8006b92:	1d1a      	adds	r2, r3, #4
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	6032      	str	r2, [r6, #0]
 8006b98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e09d      	b.n	8006ce0 <_printf_i+0x1e8>
 8006ba4:	6833      	ldr	r3, [r6, #0]
 8006ba6:	6820      	ldr	r0, [r4, #0]
 8006ba8:	1d19      	adds	r1, r3, #4
 8006baa:	6031      	str	r1, [r6, #0]
 8006bac:	0606      	lsls	r6, r0, #24
 8006bae:	d501      	bpl.n	8006bb4 <_printf_i+0xbc>
 8006bb0:	681d      	ldr	r5, [r3, #0]
 8006bb2:	e003      	b.n	8006bbc <_printf_i+0xc4>
 8006bb4:	0645      	lsls	r5, r0, #25
 8006bb6:	d5fb      	bpl.n	8006bb0 <_printf_i+0xb8>
 8006bb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006bbc:	2d00      	cmp	r5, #0
 8006bbe:	da03      	bge.n	8006bc8 <_printf_i+0xd0>
 8006bc0:	232d      	movs	r3, #45	@ 0x2d
 8006bc2:	426d      	negs	r5, r5
 8006bc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bc8:	4859      	ldr	r0, [pc, #356]	@ (8006d30 <_printf_i+0x238>)
 8006bca:	230a      	movs	r3, #10
 8006bcc:	e011      	b.n	8006bf2 <_printf_i+0xfa>
 8006bce:	6821      	ldr	r1, [r4, #0]
 8006bd0:	6833      	ldr	r3, [r6, #0]
 8006bd2:	0608      	lsls	r0, r1, #24
 8006bd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006bd8:	d402      	bmi.n	8006be0 <_printf_i+0xe8>
 8006bda:	0649      	lsls	r1, r1, #25
 8006bdc:	bf48      	it	mi
 8006bde:	b2ad      	uxthmi	r5, r5
 8006be0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006be2:	4853      	ldr	r0, [pc, #332]	@ (8006d30 <_printf_i+0x238>)
 8006be4:	6033      	str	r3, [r6, #0]
 8006be6:	bf14      	ite	ne
 8006be8:	230a      	movne	r3, #10
 8006bea:	2308      	moveq	r3, #8
 8006bec:	2100      	movs	r1, #0
 8006bee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006bf2:	6866      	ldr	r6, [r4, #4]
 8006bf4:	60a6      	str	r6, [r4, #8]
 8006bf6:	2e00      	cmp	r6, #0
 8006bf8:	bfa2      	ittt	ge
 8006bfa:	6821      	ldrge	r1, [r4, #0]
 8006bfc:	f021 0104 	bicge.w	r1, r1, #4
 8006c00:	6021      	strge	r1, [r4, #0]
 8006c02:	b90d      	cbnz	r5, 8006c08 <_printf_i+0x110>
 8006c04:	2e00      	cmp	r6, #0
 8006c06:	d04b      	beq.n	8006ca0 <_printf_i+0x1a8>
 8006c08:	4616      	mov	r6, r2
 8006c0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c0e:	fb03 5711 	mls	r7, r3, r1, r5
 8006c12:	5dc7      	ldrb	r7, [r0, r7]
 8006c14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c18:	462f      	mov	r7, r5
 8006c1a:	42bb      	cmp	r3, r7
 8006c1c:	460d      	mov	r5, r1
 8006c1e:	d9f4      	bls.n	8006c0a <_printf_i+0x112>
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	d10b      	bne.n	8006c3c <_printf_i+0x144>
 8006c24:	6823      	ldr	r3, [r4, #0]
 8006c26:	07df      	lsls	r7, r3, #31
 8006c28:	d508      	bpl.n	8006c3c <_printf_i+0x144>
 8006c2a:	6923      	ldr	r3, [r4, #16]
 8006c2c:	6861      	ldr	r1, [r4, #4]
 8006c2e:	4299      	cmp	r1, r3
 8006c30:	bfde      	ittt	le
 8006c32:	2330      	movle	r3, #48	@ 0x30
 8006c34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c3c:	1b92      	subs	r2, r2, r6
 8006c3e:	6122      	str	r2, [r4, #16]
 8006c40:	f8cd a000 	str.w	sl, [sp]
 8006c44:	464b      	mov	r3, r9
 8006c46:	aa03      	add	r2, sp, #12
 8006c48:	4621      	mov	r1, r4
 8006c4a:	4640      	mov	r0, r8
 8006c4c:	f7ff fee6 	bl	8006a1c <_printf_common>
 8006c50:	3001      	adds	r0, #1
 8006c52:	d14a      	bne.n	8006cea <_printf_i+0x1f2>
 8006c54:	f04f 30ff 	mov.w	r0, #4294967295
 8006c58:	b004      	add	sp, #16
 8006c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c5e:	6823      	ldr	r3, [r4, #0]
 8006c60:	f043 0320 	orr.w	r3, r3, #32
 8006c64:	6023      	str	r3, [r4, #0]
 8006c66:	4833      	ldr	r0, [pc, #204]	@ (8006d34 <_printf_i+0x23c>)
 8006c68:	2778      	movs	r7, #120	@ 0x78
 8006c6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c6e:	6823      	ldr	r3, [r4, #0]
 8006c70:	6831      	ldr	r1, [r6, #0]
 8006c72:	061f      	lsls	r7, r3, #24
 8006c74:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c78:	d402      	bmi.n	8006c80 <_printf_i+0x188>
 8006c7a:	065f      	lsls	r7, r3, #25
 8006c7c:	bf48      	it	mi
 8006c7e:	b2ad      	uxthmi	r5, r5
 8006c80:	6031      	str	r1, [r6, #0]
 8006c82:	07d9      	lsls	r1, r3, #31
 8006c84:	bf44      	itt	mi
 8006c86:	f043 0320 	orrmi.w	r3, r3, #32
 8006c8a:	6023      	strmi	r3, [r4, #0]
 8006c8c:	b11d      	cbz	r5, 8006c96 <_printf_i+0x19e>
 8006c8e:	2310      	movs	r3, #16
 8006c90:	e7ac      	b.n	8006bec <_printf_i+0xf4>
 8006c92:	4827      	ldr	r0, [pc, #156]	@ (8006d30 <_printf_i+0x238>)
 8006c94:	e7e9      	b.n	8006c6a <_printf_i+0x172>
 8006c96:	6823      	ldr	r3, [r4, #0]
 8006c98:	f023 0320 	bic.w	r3, r3, #32
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	e7f6      	b.n	8006c8e <_printf_i+0x196>
 8006ca0:	4616      	mov	r6, r2
 8006ca2:	e7bd      	b.n	8006c20 <_printf_i+0x128>
 8006ca4:	6833      	ldr	r3, [r6, #0]
 8006ca6:	6825      	ldr	r5, [r4, #0]
 8006ca8:	6961      	ldr	r1, [r4, #20]
 8006caa:	1d18      	adds	r0, r3, #4
 8006cac:	6030      	str	r0, [r6, #0]
 8006cae:	062e      	lsls	r6, r5, #24
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	d501      	bpl.n	8006cb8 <_printf_i+0x1c0>
 8006cb4:	6019      	str	r1, [r3, #0]
 8006cb6:	e002      	b.n	8006cbe <_printf_i+0x1c6>
 8006cb8:	0668      	lsls	r0, r5, #25
 8006cba:	d5fb      	bpl.n	8006cb4 <_printf_i+0x1bc>
 8006cbc:	8019      	strh	r1, [r3, #0]
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	6123      	str	r3, [r4, #16]
 8006cc2:	4616      	mov	r6, r2
 8006cc4:	e7bc      	b.n	8006c40 <_printf_i+0x148>
 8006cc6:	6833      	ldr	r3, [r6, #0]
 8006cc8:	1d1a      	adds	r2, r3, #4
 8006cca:	6032      	str	r2, [r6, #0]
 8006ccc:	681e      	ldr	r6, [r3, #0]
 8006cce:	6862      	ldr	r2, [r4, #4]
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	f7f9 fa8c 	bl	80001f0 <memchr>
 8006cd8:	b108      	cbz	r0, 8006cde <_printf_i+0x1e6>
 8006cda:	1b80      	subs	r0, r0, r6
 8006cdc:	6060      	str	r0, [r4, #4]
 8006cde:	6863      	ldr	r3, [r4, #4]
 8006ce0:	6123      	str	r3, [r4, #16]
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ce8:	e7aa      	b.n	8006c40 <_printf_i+0x148>
 8006cea:	6923      	ldr	r3, [r4, #16]
 8006cec:	4632      	mov	r2, r6
 8006cee:	4649      	mov	r1, r9
 8006cf0:	4640      	mov	r0, r8
 8006cf2:	47d0      	blx	sl
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	d0ad      	beq.n	8006c54 <_printf_i+0x15c>
 8006cf8:	6823      	ldr	r3, [r4, #0]
 8006cfa:	079b      	lsls	r3, r3, #30
 8006cfc:	d413      	bmi.n	8006d26 <_printf_i+0x22e>
 8006cfe:	68e0      	ldr	r0, [r4, #12]
 8006d00:	9b03      	ldr	r3, [sp, #12]
 8006d02:	4298      	cmp	r0, r3
 8006d04:	bfb8      	it	lt
 8006d06:	4618      	movlt	r0, r3
 8006d08:	e7a6      	b.n	8006c58 <_printf_i+0x160>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	4632      	mov	r2, r6
 8006d0e:	4649      	mov	r1, r9
 8006d10:	4640      	mov	r0, r8
 8006d12:	47d0      	blx	sl
 8006d14:	3001      	adds	r0, #1
 8006d16:	d09d      	beq.n	8006c54 <_printf_i+0x15c>
 8006d18:	3501      	adds	r5, #1
 8006d1a:	68e3      	ldr	r3, [r4, #12]
 8006d1c:	9903      	ldr	r1, [sp, #12]
 8006d1e:	1a5b      	subs	r3, r3, r1
 8006d20:	42ab      	cmp	r3, r5
 8006d22:	dcf2      	bgt.n	8006d0a <_printf_i+0x212>
 8006d24:	e7eb      	b.n	8006cfe <_printf_i+0x206>
 8006d26:	2500      	movs	r5, #0
 8006d28:	f104 0619 	add.w	r6, r4, #25
 8006d2c:	e7f5      	b.n	8006d1a <_printf_i+0x222>
 8006d2e:	bf00      	nop
 8006d30:	0800a709 	.word	0x0800a709
 8006d34:	0800a71a 	.word	0x0800a71a

08006d38 <std>:
 8006d38:	2300      	movs	r3, #0
 8006d3a:	b510      	push	{r4, lr}
 8006d3c:	4604      	mov	r4, r0
 8006d3e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d46:	6083      	str	r3, [r0, #8]
 8006d48:	8181      	strh	r1, [r0, #12]
 8006d4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d4c:	81c2      	strh	r2, [r0, #14]
 8006d4e:	6183      	str	r3, [r0, #24]
 8006d50:	4619      	mov	r1, r3
 8006d52:	2208      	movs	r2, #8
 8006d54:	305c      	adds	r0, #92	@ 0x5c
 8006d56:	f000 fab1 	bl	80072bc <memset>
 8006d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d90 <std+0x58>)
 8006d5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d94 <std+0x5c>)
 8006d60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d62:	4b0d      	ldr	r3, [pc, #52]	@ (8006d98 <std+0x60>)
 8006d64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d66:	4b0d      	ldr	r3, [pc, #52]	@ (8006d9c <std+0x64>)
 8006d68:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006da0 <std+0x68>)
 8006d6c:	6224      	str	r4, [r4, #32]
 8006d6e:	429c      	cmp	r4, r3
 8006d70:	d006      	beq.n	8006d80 <std+0x48>
 8006d72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d76:	4294      	cmp	r4, r2
 8006d78:	d002      	beq.n	8006d80 <std+0x48>
 8006d7a:	33d0      	adds	r3, #208	@ 0xd0
 8006d7c:	429c      	cmp	r4, r3
 8006d7e:	d105      	bne.n	8006d8c <std+0x54>
 8006d80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d88:	f000 bb36 	b.w	80073f8 <__retarget_lock_init_recursive>
 8006d8c:	bd10      	pop	{r4, pc}
 8006d8e:	bf00      	nop
 8006d90:	08007109 	.word	0x08007109
 8006d94:	0800712f 	.word	0x0800712f
 8006d98:	08007167 	.word	0x08007167
 8006d9c:	0800718b 	.word	0x0800718b
 8006da0:	200002a4 	.word	0x200002a4

08006da4 <stdio_exit_handler>:
 8006da4:	4a02      	ldr	r2, [pc, #8]	@ (8006db0 <stdio_exit_handler+0xc>)
 8006da6:	4903      	ldr	r1, [pc, #12]	@ (8006db4 <stdio_exit_handler+0x10>)
 8006da8:	4803      	ldr	r0, [pc, #12]	@ (8006db8 <stdio_exit_handler+0x14>)
 8006daa:	f000 b87b 	b.w	8006ea4 <_fwalk_sglue>
 8006dae:	bf00      	nop
 8006db0:	20000018 	.word	0x20000018
 8006db4:	08009df1 	.word	0x08009df1
 8006db8:	20000194 	.word	0x20000194

08006dbc <cleanup_stdio>:
 8006dbc:	6841      	ldr	r1, [r0, #4]
 8006dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8006df0 <cleanup_stdio+0x34>)
 8006dc0:	4299      	cmp	r1, r3
 8006dc2:	b510      	push	{r4, lr}
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	d001      	beq.n	8006dcc <cleanup_stdio+0x10>
 8006dc8:	f003 f812 	bl	8009df0 <_fflush_r>
 8006dcc:	68a1      	ldr	r1, [r4, #8]
 8006dce:	4b09      	ldr	r3, [pc, #36]	@ (8006df4 <cleanup_stdio+0x38>)
 8006dd0:	4299      	cmp	r1, r3
 8006dd2:	d002      	beq.n	8006dda <cleanup_stdio+0x1e>
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f003 f80b 	bl	8009df0 <_fflush_r>
 8006dda:	68e1      	ldr	r1, [r4, #12]
 8006ddc:	4b06      	ldr	r3, [pc, #24]	@ (8006df8 <cleanup_stdio+0x3c>)
 8006dde:	4299      	cmp	r1, r3
 8006de0:	d004      	beq.n	8006dec <cleanup_stdio+0x30>
 8006de2:	4620      	mov	r0, r4
 8006de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006de8:	f003 b802 	b.w	8009df0 <_fflush_r>
 8006dec:	bd10      	pop	{r4, pc}
 8006dee:	bf00      	nop
 8006df0:	200002a4 	.word	0x200002a4
 8006df4:	2000030c 	.word	0x2000030c
 8006df8:	20000374 	.word	0x20000374

08006dfc <global_stdio_init.part.0>:
 8006dfc:	b510      	push	{r4, lr}
 8006dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8006e2c <global_stdio_init.part.0+0x30>)
 8006e00:	4c0b      	ldr	r4, [pc, #44]	@ (8006e30 <global_stdio_init.part.0+0x34>)
 8006e02:	4a0c      	ldr	r2, [pc, #48]	@ (8006e34 <global_stdio_init.part.0+0x38>)
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	4620      	mov	r0, r4
 8006e08:	2200      	movs	r2, #0
 8006e0a:	2104      	movs	r1, #4
 8006e0c:	f7ff ff94 	bl	8006d38 <std>
 8006e10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e14:	2201      	movs	r2, #1
 8006e16:	2109      	movs	r1, #9
 8006e18:	f7ff ff8e 	bl	8006d38 <std>
 8006e1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e20:	2202      	movs	r2, #2
 8006e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e26:	2112      	movs	r1, #18
 8006e28:	f7ff bf86 	b.w	8006d38 <std>
 8006e2c:	200003dc 	.word	0x200003dc
 8006e30:	200002a4 	.word	0x200002a4
 8006e34:	08006da5 	.word	0x08006da5

08006e38 <__sfp_lock_acquire>:
 8006e38:	4801      	ldr	r0, [pc, #4]	@ (8006e40 <__sfp_lock_acquire+0x8>)
 8006e3a:	f000 bade 	b.w	80073fa <__retarget_lock_acquire_recursive>
 8006e3e:	bf00      	nop
 8006e40:	200003e5 	.word	0x200003e5

08006e44 <__sfp_lock_release>:
 8006e44:	4801      	ldr	r0, [pc, #4]	@ (8006e4c <__sfp_lock_release+0x8>)
 8006e46:	f000 bad9 	b.w	80073fc <__retarget_lock_release_recursive>
 8006e4a:	bf00      	nop
 8006e4c:	200003e5 	.word	0x200003e5

08006e50 <__sinit>:
 8006e50:	b510      	push	{r4, lr}
 8006e52:	4604      	mov	r4, r0
 8006e54:	f7ff fff0 	bl	8006e38 <__sfp_lock_acquire>
 8006e58:	6a23      	ldr	r3, [r4, #32]
 8006e5a:	b11b      	cbz	r3, 8006e64 <__sinit+0x14>
 8006e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e60:	f7ff bff0 	b.w	8006e44 <__sfp_lock_release>
 8006e64:	4b04      	ldr	r3, [pc, #16]	@ (8006e78 <__sinit+0x28>)
 8006e66:	6223      	str	r3, [r4, #32]
 8006e68:	4b04      	ldr	r3, [pc, #16]	@ (8006e7c <__sinit+0x2c>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1f5      	bne.n	8006e5c <__sinit+0xc>
 8006e70:	f7ff ffc4 	bl	8006dfc <global_stdio_init.part.0>
 8006e74:	e7f2      	b.n	8006e5c <__sinit+0xc>
 8006e76:	bf00      	nop
 8006e78:	08006dbd 	.word	0x08006dbd
 8006e7c:	200003dc 	.word	0x200003dc

08006e80 <fiprintf>:
 8006e80:	b40e      	push	{r1, r2, r3}
 8006e82:	b503      	push	{r0, r1, lr}
 8006e84:	4601      	mov	r1, r0
 8006e86:	ab03      	add	r3, sp, #12
 8006e88:	4805      	ldr	r0, [pc, #20]	@ (8006ea0 <fiprintf+0x20>)
 8006e8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e8e:	6800      	ldr	r0, [r0, #0]
 8006e90:	9301      	str	r3, [sp, #4]
 8006e92:	f002 fcc3 	bl	800981c <_vfiprintf_r>
 8006e96:	b002      	add	sp, #8
 8006e98:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e9c:	b003      	add	sp, #12
 8006e9e:	4770      	bx	lr
 8006ea0:	20000190 	.word	0x20000190

08006ea4 <_fwalk_sglue>:
 8006ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ea8:	4607      	mov	r7, r0
 8006eaa:	4688      	mov	r8, r1
 8006eac:	4614      	mov	r4, r2
 8006eae:	2600      	movs	r6, #0
 8006eb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006eb4:	f1b9 0901 	subs.w	r9, r9, #1
 8006eb8:	d505      	bpl.n	8006ec6 <_fwalk_sglue+0x22>
 8006eba:	6824      	ldr	r4, [r4, #0]
 8006ebc:	2c00      	cmp	r4, #0
 8006ebe:	d1f7      	bne.n	8006eb0 <_fwalk_sglue+0xc>
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ec6:	89ab      	ldrh	r3, [r5, #12]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d907      	bls.n	8006edc <_fwalk_sglue+0x38>
 8006ecc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	d003      	beq.n	8006edc <_fwalk_sglue+0x38>
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	4638      	mov	r0, r7
 8006ed8:	47c0      	blx	r8
 8006eda:	4306      	orrs	r6, r0
 8006edc:	3568      	adds	r5, #104	@ 0x68
 8006ede:	e7e9      	b.n	8006eb4 <_fwalk_sglue+0x10>

08006ee0 <_fwrite_r>:
 8006ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee4:	9c08      	ldr	r4, [sp, #32]
 8006ee6:	468a      	mov	sl, r1
 8006ee8:	4690      	mov	r8, r2
 8006eea:	fb02 f903 	mul.w	r9, r2, r3
 8006eee:	4606      	mov	r6, r0
 8006ef0:	b118      	cbz	r0, 8006efa <_fwrite_r+0x1a>
 8006ef2:	6a03      	ldr	r3, [r0, #32]
 8006ef4:	b90b      	cbnz	r3, 8006efa <_fwrite_r+0x1a>
 8006ef6:	f7ff ffab 	bl	8006e50 <__sinit>
 8006efa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006efc:	07dd      	lsls	r5, r3, #31
 8006efe:	d405      	bmi.n	8006f0c <_fwrite_r+0x2c>
 8006f00:	89a3      	ldrh	r3, [r4, #12]
 8006f02:	0598      	lsls	r0, r3, #22
 8006f04:	d402      	bmi.n	8006f0c <_fwrite_r+0x2c>
 8006f06:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f08:	f000 fa77 	bl	80073fa <__retarget_lock_acquire_recursive>
 8006f0c:	89a3      	ldrh	r3, [r4, #12]
 8006f0e:	0719      	lsls	r1, r3, #28
 8006f10:	d516      	bpl.n	8006f40 <_fwrite_r+0x60>
 8006f12:	6923      	ldr	r3, [r4, #16]
 8006f14:	b1a3      	cbz	r3, 8006f40 <_fwrite_r+0x60>
 8006f16:	2500      	movs	r5, #0
 8006f18:	454d      	cmp	r5, r9
 8006f1a:	d01f      	beq.n	8006f5c <_fwrite_r+0x7c>
 8006f1c:	68a7      	ldr	r7, [r4, #8]
 8006f1e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8006f22:	3f01      	subs	r7, #1
 8006f24:	2f00      	cmp	r7, #0
 8006f26:	60a7      	str	r7, [r4, #8]
 8006f28:	da04      	bge.n	8006f34 <_fwrite_r+0x54>
 8006f2a:	69a3      	ldr	r3, [r4, #24]
 8006f2c:	429f      	cmp	r7, r3
 8006f2e:	db0f      	blt.n	8006f50 <_fwrite_r+0x70>
 8006f30:	290a      	cmp	r1, #10
 8006f32:	d00d      	beq.n	8006f50 <_fwrite_r+0x70>
 8006f34:	6823      	ldr	r3, [r4, #0]
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	6022      	str	r2, [r4, #0]
 8006f3a:	7019      	strb	r1, [r3, #0]
 8006f3c:	3501      	adds	r5, #1
 8006f3e:	e7eb      	b.n	8006f18 <_fwrite_r+0x38>
 8006f40:	4621      	mov	r1, r4
 8006f42:	4630      	mov	r0, r6
 8006f44:	f000 f964 	bl	8007210 <__swsetup_r>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	d0e4      	beq.n	8006f16 <_fwrite_r+0x36>
 8006f4c:	2500      	movs	r5, #0
 8006f4e:	e005      	b.n	8006f5c <_fwrite_r+0x7c>
 8006f50:	4622      	mov	r2, r4
 8006f52:	4630      	mov	r0, r6
 8006f54:	f000 f91d 	bl	8007192 <__swbuf_r>
 8006f58:	3001      	adds	r0, #1
 8006f5a:	d1ef      	bne.n	8006f3c <_fwrite_r+0x5c>
 8006f5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f5e:	07da      	lsls	r2, r3, #31
 8006f60:	d405      	bmi.n	8006f6e <_fwrite_r+0x8e>
 8006f62:	89a3      	ldrh	r3, [r4, #12]
 8006f64:	059b      	lsls	r3, r3, #22
 8006f66:	d402      	bmi.n	8006f6e <_fwrite_r+0x8e>
 8006f68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f6a:	f000 fa47 	bl	80073fc <__retarget_lock_release_recursive>
 8006f6e:	fbb5 f0f8 	udiv	r0, r5, r8
 8006f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08006f78 <fwrite>:
 8006f78:	b507      	push	{r0, r1, r2, lr}
 8006f7a:	9300      	str	r3, [sp, #0]
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	460a      	mov	r2, r1
 8006f80:	4601      	mov	r1, r0
 8006f82:	4803      	ldr	r0, [pc, #12]	@ (8006f90 <fwrite+0x18>)
 8006f84:	6800      	ldr	r0, [r0, #0]
 8006f86:	f7ff ffab 	bl	8006ee0 <_fwrite_r>
 8006f8a:	b003      	add	sp, #12
 8006f8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f90:	20000190 	.word	0x20000190

08006f94 <iprintf>:
 8006f94:	b40f      	push	{r0, r1, r2, r3}
 8006f96:	b507      	push	{r0, r1, r2, lr}
 8006f98:	4906      	ldr	r1, [pc, #24]	@ (8006fb4 <iprintf+0x20>)
 8006f9a:	ab04      	add	r3, sp, #16
 8006f9c:	6808      	ldr	r0, [r1, #0]
 8006f9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fa2:	6881      	ldr	r1, [r0, #8]
 8006fa4:	9301      	str	r3, [sp, #4]
 8006fa6:	f002 fc39 	bl	800981c <_vfiprintf_r>
 8006faa:	b003      	add	sp, #12
 8006fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fb0:	b004      	add	sp, #16
 8006fb2:	4770      	bx	lr
 8006fb4:	20000190 	.word	0x20000190

08006fb8 <_puts_r>:
 8006fb8:	6a03      	ldr	r3, [r0, #32]
 8006fba:	b570      	push	{r4, r5, r6, lr}
 8006fbc:	6884      	ldr	r4, [r0, #8]
 8006fbe:	4605      	mov	r5, r0
 8006fc0:	460e      	mov	r6, r1
 8006fc2:	b90b      	cbnz	r3, 8006fc8 <_puts_r+0x10>
 8006fc4:	f7ff ff44 	bl	8006e50 <__sinit>
 8006fc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fca:	07db      	lsls	r3, r3, #31
 8006fcc:	d405      	bmi.n	8006fda <_puts_r+0x22>
 8006fce:	89a3      	ldrh	r3, [r4, #12]
 8006fd0:	0598      	lsls	r0, r3, #22
 8006fd2:	d402      	bmi.n	8006fda <_puts_r+0x22>
 8006fd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fd6:	f000 fa10 	bl	80073fa <__retarget_lock_acquire_recursive>
 8006fda:	89a3      	ldrh	r3, [r4, #12]
 8006fdc:	0719      	lsls	r1, r3, #28
 8006fde:	d502      	bpl.n	8006fe6 <_puts_r+0x2e>
 8006fe0:	6923      	ldr	r3, [r4, #16]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d135      	bne.n	8007052 <_puts_r+0x9a>
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	4628      	mov	r0, r5
 8006fea:	f000 f911 	bl	8007210 <__swsetup_r>
 8006fee:	b380      	cbz	r0, 8007052 <_puts_r+0x9a>
 8006ff0:	f04f 35ff 	mov.w	r5, #4294967295
 8006ff4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ff6:	07da      	lsls	r2, r3, #31
 8006ff8:	d405      	bmi.n	8007006 <_puts_r+0x4e>
 8006ffa:	89a3      	ldrh	r3, [r4, #12]
 8006ffc:	059b      	lsls	r3, r3, #22
 8006ffe:	d402      	bmi.n	8007006 <_puts_r+0x4e>
 8007000:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007002:	f000 f9fb 	bl	80073fc <__retarget_lock_release_recursive>
 8007006:	4628      	mov	r0, r5
 8007008:	bd70      	pop	{r4, r5, r6, pc}
 800700a:	2b00      	cmp	r3, #0
 800700c:	da04      	bge.n	8007018 <_puts_r+0x60>
 800700e:	69a2      	ldr	r2, [r4, #24]
 8007010:	429a      	cmp	r2, r3
 8007012:	dc17      	bgt.n	8007044 <_puts_r+0x8c>
 8007014:	290a      	cmp	r1, #10
 8007016:	d015      	beq.n	8007044 <_puts_r+0x8c>
 8007018:	6823      	ldr	r3, [r4, #0]
 800701a:	1c5a      	adds	r2, r3, #1
 800701c:	6022      	str	r2, [r4, #0]
 800701e:	7019      	strb	r1, [r3, #0]
 8007020:	68a3      	ldr	r3, [r4, #8]
 8007022:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007026:	3b01      	subs	r3, #1
 8007028:	60a3      	str	r3, [r4, #8]
 800702a:	2900      	cmp	r1, #0
 800702c:	d1ed      	bne.n	800700a <_puts_r+0x52>
 800702e:	2b00      	cmp	r3, #0
 8007030:	da11      	bge.n	8007056 <_puts_r+0x9e>
 8007032:	4622      	mov	r2, r4
 8007034:	210a      	movs	r1, #10
 8007036:	4628      	mov	r0, r5
 8007038:	f000 f8ab 	bl	8007192 <__swbuf_r>
 800703c:	3001      	adds	r0, #1
 800703e:	d0d7      	beq.n	8006ff0 <_puts_r+0x38>
 8007040:	250a      	movs	r5, #10
 8007042:	e7d7      	b.n	8006ff4 <_puts_r+0x3c>
 8007044:	4622      	mov	r2, r4
 8007046:	4628      	mov	r0, r5
 8007048:	f000 f8a3 	bl	8007192 <__swbuf_r>
 800704c:	3001      	adds	r0, #1
 800704e:	d1e7      	bne.n	8007020 <_puts_r+0x68>
 8007050:	e7ce      	b.n	8006ff0 <_puts_r+0x38>
 8007052:	3e01      	subs	r6, #1
 8007054:	e7e4      	b.n	8007020 <_puts_r+0x68>
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	1c5a      	adds	r2, r3, #1
 800705a:	6022      	str	r2, [r4, #0]
 800705c:	220a      	movs	r2, #10
 800705e:	701a      	strb	r2, [r3, #0]
 8007060:	e7ee      	b.n	8007040 <_puts_r+0x88>
	...

08007064 <puts>:
 8007064:	4b02      	ldr	r3, [pc, #8]	@ (8007070 <puts+0xc>)
 8007066:	4601      	mov	r1, r0
 8007068:	6818      	ldr	r0, [r3, #0]
 800706a:	f7ff bfa5 	b.w	8006fb8 <_puts_r>
 800706e:	bf00      	nop
 8007070:	20000190 	.word	0x20000190

08007074 <siprintf>:
 8007074:	b40e      	push	{r1, r2, r3}
 8007076:	b500      	push	{lr}
 8007078:	b09c      	sub	sp, #112	@ 0x70
 800707a:	ab1d      	add	r3, sp, #116	@ 0x74
 800707c:	9002      	str	r0, [sp, #8]
 800707e:	9006      	str	r0, [sp, #24]
 8007080:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007084:	4809      	ldr	r0, [pc, #36]	@ (80070ac <siprintf+0x38>)
 8007086:	9107      	str	r1, [sp, #28]
 8007088:	9104      	str	r1, [sp, #16]
 800708a:	4909      	ldr	r1, [pc, #36]	@ (80070b0 <siprintf+0x3c>)
 800708c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007090:	9105      	str	r1, [sp, #20]
 8007092:	6800      	ldr	r0, [r0, #0]
 8007094:	9301      	str	r3, [sp, #4]
 8007096:	a902      	add	r1, sp, #8
 8007098:	f002 f8ce 	bl	8009238 <_svfiprintf_r>
 800709c:	9b02      	ldr	r3, [sp, #8]
 800709e:	2200      	movs	r2, #0
 80070a0:	701a      	strb	r2, [r3, #0]
 80070a2:	b01c      	add	sp, #112	@ 0x70
 80070a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80070a8:	b003      	add	sp, #12
 80070aa:	4770      	bx	lr
 80070ac:	20000190 	.word	0x20000190
 80070b0:	ffff0208 	.word	0xffff0208

080070b4 <siscanf>:
 80070b4:	b40e      	push	{r1, r2, r3}
 80070b6:	b530      	push	{r4, r5, lr}
 80070b8:	b09c      	sub	sp, #112	@ 0x70
 80070ba:	ac1f      	add	r4, sp, #124	@ 0x7c
 80070bc:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80070c0:	f854 5b04 	ldr.w	r5, [r4], #4
 80070c4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80070c8:	9002      	str	r0, [sp, #8]
 80070ca:	9006      	str	r0, [sp, #24]
 80070cc:	f7f9 f8e0 	bl	8000290 <strlen>
 80070d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007100 <siscanf+0x4c>)
 80070d2:	9003      	str	r0, [sp, #12]
 80070d4:	9007      	str	r0, [sp, #28]
 80070d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070d8:	480a      	ldr	r0, [pc, #40]	@ (8007104 <siscanf+0x50>)
 80070da:	9401      	str	r4, [sp, #4]
 80070dc:	2300      	movs	r3, #0
 80070de:	930f      	str	r3, [sp, #60]	@ 0x3c
 80070e0:	9314      	str	r3, [sp, #80]	@ 0x50
 80070e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80070e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80070ea:	462a      	mov	r2, r5
 80070ec:	4623      	mov	r3, r4
 80070ee:	a902      	add	r1, sp, #8
 80070f0:	6800      	ldr	r0, [r0, #0]
 80070f2:	f002 f9f5 	bl	80094e0 <__ssvfiscanf_r>
 80070f6:	b01c      	add	sp, #112	@ 0x70
 80070f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070fc:	b003      	add	sp, #12
 80070fe:	4770      	bx	lr
 8007100:	0800712b 	.word	0x0800712b
 8007104:	20000190 	.word	0x20000190

08007108 <__sread>:
 8007108:	b510      	push	{r4, lr}
 800710a:	460c      	mov	r4, r1
 800710c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007110:	f000 f914 	bl	800733c <_read_r>
 8007114:	2800      	cmp	r0, #0
 8007116:	bfab      	itete	ge
 8007118:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800711a:	89a3      	ldrhlt	r3, [r4, #12]
 800711c:	181b      	addge	r3, r3, r0
 800711e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007122:	bfac      	ite	ge
 8007124:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007126:	81a3      	strhlt	r3, [r4, #12]
 8007128:	bd10      	pop	{r4, pc}

0800712a <__seofread>:
 800712a:	2000      	movs	r0, #0
 800712c:	4770      	bx	lr

0800712e <__swrite>:
 800712e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007132:	461f      	mov	r7, r3
 8007134:	898b      	ldrh	r3, [r1, #12]
 8007136:	05db      	lsls	r3, r3, #23
 8007138:	4605      	mov	r5, r0
 800713a:	460c      	mov	r4, r1
 800713c:	4616      	mov	r6, r2
 800713e:	d505      	bpl.n	800714c <__swrite+0x1e>
 8007140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007144:	2302      	movs	r3, #2
 8007146:	2200      	movs	r2, #0
 8007148:	f000 f8e6 	bl	8007318 <_lseek_r>
 800714c:	89a3      	ldrh	r3, [r4, #12]
 800714e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007152:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007156:	81a3      	strh	r3, [r4, #12]
 8007158:	4632      	mov	r2, r6
 800715a:	463b      	mov	r3, r7
 800715c:	4628      	mov	r0, r5
 800715e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007162:	f000 b90d 	b.w	8007380 <_write_r>

08007166 <__sseek>:
 8007166:	b510      	push	{r4, lr}
 8007168:	460c      	mov	r4, r1
 800716a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800716e:	f000 f8d3 	bl	8007318 <_lseek_r>
 8007172:	1c43      	adds	r3, r0, #1
 8007174:	89a3      	ldrh	r3, [r4, #12]
 8007176:	bf15      	itete	ne
 8007178:	6560      	strne	r0, [r4, #84]	@ 0x54
 800717a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800717e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007182:	81a3      	strheq	r3, [r4, #12]
 8007184:	bf18      	it	ne
 8007186:	81a3      	strhne	r3, [r4, #12]
 8007188:	bd10      	pop	{r4, pc}

0800718a <__sclose>:
 800718a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800718e:	f000 b8b3 	b.w	80072f8 <_close_r>

08007192 <__swbuf_r>:
 8007192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007194:	460e      	mov	r6, r1
 8007196:	4614      	mov	r4, r2
 8007198:	4605      	mov	r5, r0
 800719a:	b118      	cbz	r0, 80071a4 <__swbuf_r+0x12>
 800719c:	6a03      	ldr	r3, [r0, #32]
 800719e:	b90b      	cbnz	r3, 80071a4 <__swbuf_r+0x12>
 80071a0:	f7ff fe56 	bl	8006e50 <__sinit>
 80071a4:	69a3      	ldr	r3, [r4, #24]
 80071a6:	60a3      	str	r3, [r4, #8]
 80071a8:	89a3      	ldrh	r3, [r4, #12]
 80071aa:	071a      	lsls	r2, r3, #28
 80071ac:	d501      	bpl.n	80071b2 <__swbuf_r+0x20>
 80071ae:	6923      	ldr	r3, [r4, #16]
 80071b0:	b943      	cbnz	r3, 80071c4 <__swbuf_r+0x32>
 80071b2:	4621      	mov	r1, r4
 80071b4:	4628      	mov	r0, r5
 80071b6:	f000 f82b 	bl	8007210 <__swsetup_r>
 80071ba:	b118      	cbz	r0, 80071c4 <__swbuf_r+0x32>
 80071bc:	f04f 37ff 	mov.w	r7, #4294967295
 80071c0:	4638      	mov	r0, r7
 80071c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	6922      	ldr	r2, [r4, #16]
 80071c8:	1a98      	subs	r0, r3, r2
 80071ca:	6963      	ldr	r3, [r4, #20]
 80071cc:	b2f6      	uxtb	r6, r6
 80071ce:	4283      	cmp	r3, r0
 80071d0:	4637      	mov	r7, r6
 80071d2:	dc05      	bgt.n	80071e0 <__swbuf_r+0x4e>
 80071d4:	4621      	mov	r1, r4
 80071d6:	4628      	mov	r0, r5
 80071d8:	f002 fe0a 	bl	8009df0 <_fflush_r>
 80071dc:	2800      	cmp	r0, #0
 80071de:	d1ed      	bne.n	80071bc <__swbuf_r+0x2a>
 80071e0:	68a3      	ldr	r3, [r4, #8]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	60a3      	str	r3, [r4, #8]
 80071e6:	6823      	ldr	r3, [r4, #0]
 80071e8:	1c5a      	adds	r2, r3, #1
 80071ea:	6022      	str	r2, [r4, #0]
 80071ec:	701e      	strb	r6, [r3, #0]
 80071ee:	6962      	ldr	r2, [r4, #20]
 80071f0:	1c43      	adds	r3, r0, #1
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d004      	beq.n	8007200 <__swbuf_r+0x6e>
 80071f6:	89a3      	ldrh	r3, [r4, #12]
 80071f8:	07db      	lsls	r3, r3, #31
 80071fa:	d5e1      	bpl.n	80071c0 <__swbuf_r+0x2e>
 80071fc:	2e0a      	cmp	r6, #10
 80071fe:	d1df      	bne.n	80071c0 <__swbuf_r+0x2e>
 8007200:	4621      	mov	r1, r4
 8007202:	4628      	mov	r0, r5
 8007204:	f002 fdf4 	bl	8009df0 <_fflush_r>
 8007208:	2800      	cmp	r0, #0
 800720a:	d0d9      	beq.n	80071c0 <__swbuf_r+0x2e>
 800720c:	e7d6      	b.n	80071bc <__swbuf_r+0x2a>
	...

08007210 <__swsetup_r>:
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	4b29      	ldr	r3, [pc, #164]	@ (80072b8 <__swsetup_r+0xa8>)
 8007214:	4605      	mov	r5, r0
 8007216:	6818      	ldr	r0, [r3, #0]
 8007218:	460c      	mov	r4, r1
 800721a:	b118      	cbz	r0, 8007224 <__swsetup_r+0x14>
 800721c:	6a03      	ldr	r3, [r0, #32]
 800721e:	b90b      	cbnz	r3, 8007224 <__swsetup_r+0x14>
 8007220:	f7ff fe16 	bl	8006e50 <__sinit>
 8007224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007228:	0719      	lsls	r1, r3, #28
 800722a:	d422      	bmi.n	8007272 <__swsetup_r+0x62>
 800722c:	06da      	lsls	r2, r3, #27
 800722e:	d407      	bmi.n	8007240 <__swsetup_r+0x30>
 8007230:	2209      	movs	r2, #9
 8007232:	602a      	str	r2, [r5, #0]
 8007234:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007238:	81a3      	strh	r3, [r4, #12]
 800723a:	f04f 30ff 	mov.w	r0, #4294967295
 800723e:	e033      	b.n	80072a8 <__swsetup_r+0x98>
 8007240:	0758      	lsls	r0, r3, #29
 8007242:	d512      	bpl.n	800726a <__swsetup_r+0x5a>
 8007244:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007246:	b141      	cbz	r1, 800725a <__swsetup_r+0x4a>
 8007248:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800724c:	4299      	cmp	r1, r3
 800724e:	d002      	beq.n	8007256 <__swsetup_r+0x46>
 8007250:	4628      	mov	r0, r5
 8007252:	f000 ff39 	bl	80080c8 <_free_r>
 8007256:	2300      	movs	r3, #0
 8007258:	6363      	str	r3, [r4, #52]	@ 0x34
 800725a:	89a3      	ldrh	r3, [r4, #12]
 800725c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007260:	81a3      	strh	r3, [r4, #12]
 8007262:	2300      	movs	r3, #0
 8007264:	6063      	str	r3, [r4, #4]
 8007266:	6923      	ldr	r3, [r4, #16]
 8007268:	6023      	str	r3, [r4, #0]
 800726a:	89a3      	ldrh	r3, [r4, #12]
 800726c:	f043 0308 	orr.w	r3, r3, #8
 8007270:	81a3      	strh	r3, [r4, #12]
 8007272:	6923      	ldr	r3, [r4, #16]
 8007274:	b94b      	cbnz	r3, 800728a <__swsetup_r+0x7a>
 8007276:	89a3      	ldrh	r3, [r4, #12]
 8007278:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800727c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007280:	d003      	beq.n	800728a <__swsetup_r+0x7a>
 8007282:	4621      	mov	r1, r4
 8007284:	4628      	mov	r0, r5
 8007286:	f002 fe01 	bl	8009e8c <__smakebuf_r>
 800728a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800728e:	f013 0201 	ands.w	r2, r3, #1
 8007292:	d00a      	beq.n	80072aa <__swsetup_r+0x9a>
 8007294:	2200      	movs	r2, #0
 8007296:	60a2      	str	r2, [r4, #8]
 8007298:	6962      	ldr	r2, [r4, #20]
 800729a:	4252      	negs	r2, r2
 800729c:	61a2      	str	r2, [r4, #24]
 800729e:	6922      	ldr	r2, [r4, #16]
 80072a0:	b942      	cbnz	r2, 80072b4 <__swsetup_r+0xa4>
 80072a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80072a6:	d1c5      	bne.n	8007234 <__swsetup_r+0x24>
 80072a8:	bd38      	pop	{r3, r4, r5, pc}
 80072aa:	0799      	lsls	r1, r3, #30
 80072ac:	bf58      	it	pl
 80072ae:	6962      	ldrpl	r2, [r4, #20]
 80072b0:	60a2      	str	r2, [r4, #8]
 80072b2:	e7f4      	b.n	800729e <__swsetup_r+0x8e>
 80072b4:	2000      	movs	r0, #0
 80072b6:	e7f7      	b.n	80072a8 <__swsetup_r+0x98>
 80072b8:	20000190 	.word	0x20000190

080072bc <memset>:
 80072bc:	4402      	add	r2, r0
 80072be:	4603      	mov	r3, r0
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d100      	bne.n	80072c6 <memset+0xa>
 80072c4:	4770      	bx	lr
 80072c6:	f803 1b01 	strb.w	r1, [r3], #1
 80072ca:	e7f9      	b.n	80072c0 <memset+0x4>

080072cc <strncmp>:
 80072cc:	b510      	push	{r4, lr}
 80072ce:	b16a      	cbz	r2, 80072ec <strncmp+0x20>
 80072d0:	3901      	subs	r1, #1
 80072d2:	1884      	adds	r4, r0, r2
 80072d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80072dc:	429a      	cmp	r2, r3
 80072de:	d103      	bne.n	80072e8 <strncmp+0x1c>
 80072e0:	42a0      	cmp	r0, r4
 80072e2:	d001      	beq.n	80072e8 <strncmp+0x1c>
 80072e4:	2a00      	cmp	r2, #0
 80072e6:	d1f5      	bne.n	80072d4 <strncmp+0x8>
 80072e8:	1ad0      	subs	r0, r2, r3
 80072ea:	bd10      	pop	{r4, pc}
 80072ec:	4610      	mov	r0, r2
 80072ee:	e7fc      	b.n	80072ea <strncmp+0x1e>

080072f0 <_localeconv_r>:
 80072f0:	4800      	ldr	r0, [pc, #0]	@ (80072f4 <_localeconv_r+0x4>)
 80072f2:	4770      	bx	lr
 80072f4:	20000114 	.word	0x20000114

080072f8 <_close_r>:
 80072f8:	b538      	push	{r3, r4, r5, lr}
 80072fa:	4d06      	ldr	r5, [pc, #24]	@ (8007314 <_close_r+0x1c>)
 80072fc:	2300      	movs	r3, #0
 80072fe:	4604      	mov	r4, r0
 8007300:	4608      	mov	r0, r1
 8007302:	602b      	str	r3, [r5, #0]
 8007304:	f7fc fb20 	bl	8003948 <_close>
 8007308:	1c43      	adds	r3, r0, #1
 800730a:	d102      	bne.n	8007312 <_close_r+0x1a>
 800730c:	682b      	ldr	r3, [r5, #0]
 800730e:	b103      	cbz	r3, 8007312 <_close_r+0x1a>
 8007310:	6023      	str	r3, [r4, #0]
 8007312:	bd38      	pop	{r3, r4, r5, pc}
 8007314:	200003e0 	.word	0x200003e0

08007318 <_lseek_r>:
 8007318:	b538      	push	{r3, r4, r5, lr}
 800731a:	4d07      	ldr	r5, [pc, #28]	@ (8007338 <_lseek_r+0x20>)
 800731c:	4604      	mov	r4, r0
 800731e:	4608      	mov	r0, r1
 8007320:	4611      	mov	r1, r2
 8007322:	2200      	movs	r2, #0
 8007324:	602a      	str	r2, [r5, #0]
 8007326:	461a      	mov	r2, r3
 8007328:	f7fc fb35 	bl	8003996 <_lseek>
 800732c:	1c43      	adds	r3, r0, #1
 800732e:	d102      	bne.n	8007336 <_lseek_r+0x1e>
 8007330:	682b      	ldr	r3, [r5, #0]
 8007332:	b103      	cbz	r3, 8007336 <_lseek_r+0x1e>
 8007334:	6023      	str	r3, [r4, #0]
 8007336:	bd38      	pop	{r3, r4, r5, pc}
 8007338:	200003e0 	.word	0x200003e0

0800733c <_read_r>:
 800733c:	b538      	push	{r3, r4, r5, lr}
 800733e:	4d07      	ldr	r5, [pc, #28]	@ (800735c <_read_r+0x20>)
 8007340:	4604      	mov	r4, r0
 8007342:	4608      	mov	r0, r1
 8007344:	4611      	mov	r1, r2
 8007346:	2200      	movs	r2, #0
 8007348:	602a      	str	r2, [r5, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	f7fc fac3 	bl	80038d6 <_read>
 8007350:	1c43      	adds	r3, r0, #1
 8007352:	d102      	bne.n	800735a <_read_r+0x1e>
 8007354:	682b      	ldr	r3, [r5, #0]
 8007356:	b103      	cbz	r3, 800735a <_read_r+0x1e>
 8007358:	6023      	str	r3, [r4, #0]
 800735a:	bd38      	pop	{r3, r4, r5, pc}
 800735c:	200003e0 	.word	0x200003e0

08007360 <_sbrk_r>:
 8007360:	b538      	push	{r3, r4, r5, lr}
 8007362:	4d06      	ldr	r5, [pc, #24]	@ (800737c <_sbrk_r+0x1c>)
 8007364:	2300      	movs	r3, #0
 8007366:	4604      	mov	r4, r0
 8007368:	4608      	mov	r0, r1
 800736a:	602b      	str	r3, [r5, #0]
 800736c:	f7fc fb20 	bl	80039b0 <_sbrk>
 8007370:	1c43      	adds	r3, r0, #1
 8007372:	d102      	bne.n	800737a <_sbrk_r+0x1a>
 8007374:	682b      	ldr	r3, [r5, #0]
 8007376:	b103      	cbz	r3, 800737a <_sbrk_r+0x1a>
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	bd38      	pop	{r3, r4, r5, pc}
 800737c:	200003e0 	.word	0x200003e0

08007380 <_write_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	4d07      	ldr	r5, [pc, #28]	@ (80073a0 <_write_r+0x20>)
 8007384:	4604      	mov	r4, r0
 8007386:	4608      	mov	r0, r1
 8007388:	4611      	mov	r1, r2
 800738a:	2200      	movs	r2, #0
 800738c:	602a      	str	r2, [r5, #0]
 800738e:	461a      	mov	r2, r3
 8007390:	f7fc fabe 	bl	8003910 <_write>
 8007394:	1c43      	adds	r3, r0, #1
 8007396:	d102      	bne.n	800739e <_write_r+0x1e>
 8007398:	682b      	ldr	r3, [r5, #0]
 800739a:	b103      	cbz	r3, 800739e <_write_r+0x1e>
 800739c:	6023      	str	r3, [r4, #0]
 800739e:	bd38      	pop	{r3, r4, r5, pc}
 80073a0:	200003e0 	.word	0x200003e0

080073a4 <__errno>:
 80073a4:	4b01      	ldr	r3, [pc, #4]	@ (80073ac <__errno+0x8>)
 80073a6:	6818      	ldr	r0, [r3, #0]
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	20000190 	.word	0x20000190

080073b0 <__libc_init_array>:
 80073b0:	b570      	push	{r4, r5, r6, lr}
 80073b2:	4d0d      	ldr	r5, [pc, #52]	@ (80073e8 <__libc_init_array+0x38>)
 80073b4:	4c0d      	ldr	r4, [pc, #52]	@ (80073ec <__libc_init_array+0x3c>)
 80073b6:	1b64      	subs	r4, r4, r5
 80073b8:	10a4      	asrs	r4, r4, #2
 80073ba:	2600      	movs	r6, #0
 80073bc:	42a6      	cmp	r6, r4
 80073be:	d109      	bne.n	80073d4 <__libc_init_array+0x24>
 80073c0:	4d0b      	ldr	r5, [pc, #44]	@ (80073f0 <__libc_init_array+0x40>)
 80073c2:	4c0c      	ldr	r4, [pc, #48]	@ (80073f4 <__libc_init_array+0x44>)
 80073c4:	f002 ffb8 	bl	800a338 <_init>
 80073c8:	1b64      	subs	r4, r4, r5
 80073ca:	10a4      	asrs	r4, r4, #2
 80073cc:	2600      	movs	r6, #0
 80073ce:	42a6      	cmp	r6, r4
 80073d0:	d105      	bne.n	80073de <__libc_init_array+0x2e>
 80073d2:	bd70      	pop	{r4, r5, r6, pc}
 80073d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073d8:	4798      	blx	r3
 80073da:	3601      	adds	r6, #1
 80073dc:	e7ee      	b.n	80073bc <__libc_init_array+0xc>
 80073de:	f855 3b04 	ldr.w	r3, [r5], #4
 80073e2:	4798      	blx	r3
 80073e4:	3601      	adds	r6, #1
 80073e6:	e7f2      	b.n	80073ce <__libc_init_array+0x1e>
 80073e8:	0800a9e8 	.word	0x0800a9e8
 80073ec:	0800a9e8 	.word	0x0800a9e8
 80073f0:	0800a9e8 	.word	0x0800a9e8
 80073f4:	0800a9ec 	.word	0x0800a9ec

080073f8 <__retarget_lock_init_recursive>:
 80073f8:	4770      	bx	lr

080073fa <__retarget_lock_acquire_recursive>:
 80073fa:	4770      	bx	lr

080073fc <__retarget_lock_release_recursive>:
 80073fc:	4770      	bx	lr

080073fe <memcpy>:
 80073fe:	440a      	add	r2, r1
 8007400:	4291      	cmp	r1, r2
 8007402:	f100 33ff 	add.w	r3, r0, #4294967295
 8007406:	d100      	bne.n	800740a <memcpy+0xc>
 8007408:	4770      	bx	lr
 800740a:	b510      	push	{r4, lr}
 800740c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007410:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007414:	4291      	cmp	r1, r2
 8007416:	d1f9      	bne.n	800740c <memcpy+0xe>
 8007418:	bd10      	pop	{r4, pc}
 800741a:	0000      	movs	r0, r0
 800741c:	0000      	movs	r0, r0
	...

08007420 <nan>:
 8007420:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007428 <nan+0x8>
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	00000000 	.word	0x00000000
 800742c:	7ff80000 	.word	0x7ff80000

08007430 <quorem>:
 8007430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007434:	6903      	ldr	r3, [r0, #16]
 8007436:	690c      	ldr	r4, [r1, #16]
 8007438:	42a3      	cmp	r3, r4
 800743a:	4607      	mov	r7, r0
 800743c:	db7e      	blt.n	800753c <quorem+0x10c>
 800743e:	3c01      	subs	r4, #1
 8007440:	f101 0814 	add.w	r8, r1, #20
 8007444:	00a3      	lsls	r3, r4, #2
 8007446:	f100 0514 	add.w	r5, r0, #20
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007450:	9301      	str	r3, [sp, #4]
 8007452:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007456:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800745a:	3301      	adds	r3, #1
 800745c:	429a      	cmp	r2, r3
 800745e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007462:	fbb2 f6f3 	udiv	r6, r2, r3
 8007466:	d32e      	bcc.n	80074c6 <quorem+0x96>
 8007468:	f04f 0a00 	mov.w	sl, #0
 800746c:	46c4      	mov	ip, r8
 800746e:	46ae      	mov	lr, r5
 8007470:	46d3      	mov	fp, sl
 8007472:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007476:	b298      	uxth	r0, r3
 8007478:	fb06 a000 	mla	r0, r6, r0, sl
 800747c:	0c02      	lsrs	r2, r0, #16
 800747e:	0c1b      	lsrs	r3, r3, #16
 8007480:	fb06 2303 	mla	r3, r6, r3, r2
 8007484:	f8de 2000 	ldr.w	r2, [lr]
 8007488:	b280      	uxth	r0, r0
 800748a:	b292      	uxth	r2, r2
 800748c:	1a12      	subs	r2, r2, r0
 800748e:	445a      	add	r2, fp
 8007490:	f8de 0000 	ldr.w	r0, [lr]
 8007494:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007498:	b29b      	uxth	r3, r3
 800749a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800749e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80074a2:	b292      	uxth	r2, r2
 80074a4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80074a8:	45e1      	cmp	r9, ip
 80074aa:	f84e 2b04 	str.w	r2, [lr], #4
 80074ae:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80074b2:	d2de      	bcs.n	8007472 <quorem+0x42>
 80074b4:	9b00      	ldr	r3, [sp, #0]
 80074b6:	58eb      	ldr	r3, [r5, r3]
 80074b8:	b92b      	cbnz	r3, 80074c6 <quorem+0x96>
 80074ba:	9b01      	ldr	r3, [sp, #4]
 80074bc:	3b04      	subs	r3, #4
 80074be:	429d      	cmp	r5, r3
 80074c0:	461a      	mov	r2, r3
 80074c2:	d32f      	bcc.n	8007524 <quorem+0xf4>
 80074c4:	613c      	str	r4, [r7, #16]
 80074c6:	4638      	mov	r0, r7
 80074c8:	f001 fc58 	bl	8008d7c <__mcmp>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	db25      	blt.n	800751c <quorem+0xec>
 80074d0:	4629      	mov	r1, r5
 80074d2:	2000      	movs	r0, #0
 80074d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80074d8:	f8d1 c000 	ldr.w	ip, [r1]
 80074dc:	fa1f fe82 	uxth.w	lr, r2
 80074e0:	fa1f f38c 	uxth.w	r3, ip
 80074e4:	eba3 030e 	sub.w	r3, r3, lr
 80074e8:	4403      	add	r3, r0
 80074ea:	0c12      	lsrs	r2, r2, #16
 80074ec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80074f0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074fa:	45c1      	cmp	r9, r8
 80074fc:	f841 3b04 	str.w	r3, [r1], #4
 8007500:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007504:	d2e6      	bcs.n	80074d4 <quorem+0xa4>
 8007506:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800750a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800750e:	b922      	cbnz	r2, 800751a <quorem+0xea>
 8007510:	3b04      	subs	r3, #4
 8007512:	429d      	cmp	r5, r3
 8007514:	461a      	mov	r2, r3
 8007516:	d30b      	bcc.n	8007530 <quorem+0x100>
 8007518:	613c      	str	r4, [r7, #16]
 800751a:	3601      	adds	r6, #1
 800751c:	4630      	mov	r0, r6
 800751e:	b003      	add	sp, #12
 8007520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007524:	6812      	ldr	r2, [r2, #0]
 8007526:	3b04      	subs	r3, #4
 8007528:	2a00      	cmp	r2, #0
 800752a:	d1cb      	bne.n	80074c4 <quorem+0x94>
 800752c:	3c01      	subs	r4, #1
 800752e:	e7c6      	b.n	80074be <quorem+0x8e>
 8007530:	6812      	ldr	r2, [r2, #0]
 8007532:	3b04      	subs	r3, #4
 8007534:	2a00      	cmp	r2, #0
 8007536:	d1ef      	bne.n	8007518 <quorem+0xe8>
 8007538:	3c01      	subs	r4, #1
 800753a:	e7ea      	b.n	8007512 <quorem+0xe2>
 800753c:	2000      	movs	r0, #0
 800753e:	e7ee      	b.n	800751e <quorem+0xee>

08007540 <_dtoa_r>:
 8007540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007544:	69c7      	ldr	r7, [r0, #28]
 8007546:	b099      	sub	sp, #100	@ 0x64
 8007548:	ed8d 0b02 	vstr	d0, [sp, #8]
 800754c:	ec55 4b10 	vmov	r4, r5, d0
 8007550:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007552:	9109      	str	r1, [sp, #36]	@ 0x24
 8007554:	4683      	mov	fp, r0
 8007556:	920e      	str	r2, [sp, #56]	@ 0x38
 8007558:	9313      	str	r3, [sp, #76]	@ 0x4c
 800755a:	b97f      	cbnz	r7, 800757c <_dtoa_r+0x3c>
 800755c:	2010      	movs	r0, #16
 800755e:	f7fe f891 	bl	8005684 <malloc>
 8007562:	4602      	mov	r2, r0
 8007564:	f8cb 001c 	str.w	r0, [fp, #28]
 8007568:	b920      	cbnz	r0, 8007574 <_dtoa_r+0x34>
 800756a:	4ba7      	ldr	r3, [pc, #668]	@ (8007808 <_dtoa_r+0x2c8>)
 800756c:	21ef      	movs	r1, #239	@ 0xef
 800756e:	48a7      	ldr	r0, [pc, #668]	@ (800780c <_dtoa_r+0x2cc>)
 8007570:	f002 fd78 	bl	800a064 <__assert_func>
 8007574:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007578:	6007      	str	r7, [r0, #0]
 800757a:	60c7      	str	r7, [r0, #12]
 800757c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007580:	6819      	ldr	r1, [r3, #0]
 8007582:	b159      	cbz	r1, 800759c <_dtoa_r+0x5c>
 8007584:	685a      	ldr	r2, [r3, #4]
 8007586:	604a      	str	r2, [r1, #4]
 8007588:	2301      	movs	r3, #1
 800758a:	4093      	lsls	r3, r2
 800758c:	608b      	str	r3, [r1, #8]
 800758e:	4658      	mov	r0, fp
 8007590:	f001 f970 	bl	8008874 <_Bfree>
 8007594:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007598:	2200      	movs	r2, #0
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	1e2b      	subs	r3, r5, #0
 800759e:	bfb9      	ittee	lt
 80075a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80075a4:	9303      	strlt	r3, [sp, #12]
 80075a6:	2300      	movge	r3, #0
 80075a8:	6033      	strge	r3, [r6, #0]
 80075aa:	9f03      	ldr	r7, [sp, #12]
 80075ac:	4b98      	ldr	r3, [pc, #608]	@ (8007810 <_dtoa_r+0x2d0>)
 80075ae:	bfbc      	itt	lt
 80075b0:	2201      	movlt	r2, #1
 80075b2:	6032      	strlt	r2, [r6, #0]
 80075b4:	43bb      	bics	r3, r7
 80075b6:	d112      	bne.n	80075de <_dtoa_r+0x9e>
 80075b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80075ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80075be:	6013      	str	r3, [r2, #0]
 80075c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075c4:	4323      	orrs	r3, r4
 80075c6:	f000 854d 	beq.w	8008064 <_dtoa_r+0xb24>
 80075ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80075cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007824 <_dtoa_r+0x2e4>
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f000 854f 	beq.w	8008074 <_dtoa_r+0xb34>
 80075d6:	f10a 0303 	add.w	r3, sl, #3
 80075da:	f000 bd49 	b.w	8008070 <_dtoa_r+0xb30>
 80075de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80075e2:	2200      	movs	r2, #0
 80075e4:	ec51 0b17 	vmov	r0, r1, d7
 80075e8:	2300      	movs	r3, #0
 80075ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80075ee:	f7f9 fa7b 	bl	8000ae8 <__aeabi_dcmpeq>
 80075f2:	4680      	mov	r8, r0
 80075f4:	b158      	cbz	r0, 800760e <_dtoa_r+0xce>
 80075f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80075f8:	2301      	movs	r3, #1
 80075fa:	6013      	str	r3, [r2, #0]
 80075fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80075fe:	b113      	cbz	r3, 8007606 <_dtoa_r+0xc6>
 8007600:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007602:	4b84      	ldr	r3, [pc, #528]	@ (8007814 <_dtoa_r+0x2d4>)
 8007604:	6013      	str	r3, [r2, #0]
 8007606:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007828 <_dtoa_r+0x2e8>
 800760a:	f000 bd33 	b.w	8008074 <_dtoa_r+0xb34>
 800760e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007612:	aa16      	add	r2, sp, #88	@ 0x58
 8007614:	a917      	add	r1, sp, #92	@ 0x5c
 8007616:	4658      	mov	r0, fp
 8007618:	f001 fcd0 	bl	8008fbc <__d2b>
 800761c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007620:	4681      	mov	r9, r0
 8007622:	2e00      	cmp	r6, #0
 8007624:	d077      	beq.n	8007716 <_dtoa_r+0x1d6>
 8007626:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007628:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800762c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007630:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007634:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007638:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800763c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007640:	4619      	mov	r1, r3
 8007642:	2200      	movs	r2, #0
 8007644:	4b74      	ldr	r3, [pc, #464]	@ (8007818 <_dtoa_r+0x2d8>)
 8007646:	f7f8 fe2f 	bl	80002a8 <__aeabi_dsub>
 800764a:	a369      	add	r3, pc, #420	@ (adr r3, 80077f0 <_dtoa_r+0x2b0>)
 800764c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007650:	f7f8 ffe2 	bl	8000618 <__aeabi_dmul>
 8007654:	a368      	add	r3, pc, #416	@ (adr r3, 80077f8 <_dtoa_r+0x2b8>)
 8007656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765a:	f7f8 fe27 	bl	80002ac <__adddf3>
 800765e:	4604      	mov	r4, r0
 8007660:	4630      	mov	r0, r6
 8007662:	460d      	mov	r5, r1
 8007664:	f7f8 ff6e 	bl	8000544 <__aeabi_i2d>
 8007668:	a365      	add	r3, pc, #404	@ (adr r3, 8007800 <_dtoa_r+0x2c0>)
 800766a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766e:	f7f8 ffd3 	bl	8000618 <__aeabi_dmul>
 8007672:	4602      	mov	r2, r0
 8007674:	460b      	mov	r3, r1
 8007676:	4620      	mov	r0, r4
 8007678:	4629      	mov	r1, r5
 800767a:	f7f8 fe17 	bl	80002ac <__adddf3>
 800767e:	4604      	mov	r4, r0
 8007680:	460d      	mov	r5, r1
 8007682:	f7f9 fa79 	bl	8000b78 <__aeabi_d2iz>
 8007686:	2200      	movs	r2, #0
 8007688:	4607      	mov	r7, r0
 800768a:	2300      	movs	r3, #0
 800768c:	4620      	mov	r0, r4
 800768e:	4629      	mov	r1, r5
 8007690:	f7f9 fa34 	bl	8000afc <__aeabi_dcmplt>
 8007694:	b140      	cbz	r0, 80076a8 <_dtoa_r+0x168>
 8007696:	4638      	mov	r0, r7
 8007698:	f7f8 ff54 	bl	8000544 <__aeabi_i2d>
 800769c:	4622      	mov	r2, r4
 800769e:	462b      	mov	r3, r5
 80076a0:	f7f9 fa22 	bl	8000ae8 <__aeabi_dcmpeq>
 80076a4:	b900      	cbnz	r0, 80076a8 <_dtoa_r+0x168>
 80076a6:	3f01      	subs	r7, #1
 80076a8:	2f16      	cmp	r7, #22
 80076aa:	d851      	bhi.n	8007750 <_dtoa_r+0x210>
 80076ac:	4b5b      	ldr	r3, [pc, #364]	@ (800781c <_dtoa_r+0x2dc>)
 80076ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80076b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076ba:	f7f9 fa1f 	bl	8000afc <__aeabi_dcmplt>
 80076be:	2800      	cmp	r0, #0
 80076c0:	d048      	beq.n	8007754 <_dtoa_r+0x214>
 80076c2:	3f01      	subs	r7, #1
 80076c4:	2300      	movs	r3, #0
 80076c6:	9312      	str	r3, [sp, #72]	@ 0x48
 80076c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80076ca:	1b9b      	subs	r3, r3, r6
 80076cc:	1e5a      	subs	r2, r3, #1
 80076ce:	bf44      	itt	mi
 80076d0:	f1c3 0801 	rsbmi	r8, r3, #1
 80076d4:	2300      	movmi	r3, #0
 80076d6:	9208      	str	r2, [sp, #32]
 80076d8:	bf54      	ite	pl
 80076da:	f04f 0800 	movpl.w	r8, #0
 80076de:	9308      	strmi	r3, [sp, #32]
 80076e0:	2f00      	cmp	r7, #0
 80076e2:	db39      	blt.n	8007758 <_dtoa_r+0x218>
 80076e4:	9b08      	ldr	r3, [sp, #32]
 80076e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80076e8:	443b      	add	r3, r7
 80076ea:	9308      	str	r3, [sp, #32]
 80076ec:	2300      	movs	r3, #0
 80076ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80076f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076f2:	2b09      	cmp	r3, #9
 80076f4:	d864      	bhi.n	80077c0 <_dtoa_r+0x280>
 80076f6:	2b05      	cmp	r3, #5
 80076f8:	bfc4      	itt	gt
 80076fa:	3b04      	subgt	r3, #4
 80076fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80076fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007700:	f1a3 0302 	sub.w	r3, r3, #2
 8007704:	bfcc      	ite	gt
 8007706:	2400      	movgt	r4, #0
 8007708:	2401      	movle	r4, #1
 800770a:	2b03      	cmp	r3, #3
 800770c:	d863      	bhi.n	80077d6 <_dtoa_r+0x296>
 800770e:	e8df f003 	tbb	[pc, r3]
 8007712:	372a      	.short	0x372a
 8007714:	5535      	.short	0x5535
 8007716:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800771a:	441e      	add	r6, r3
 800771c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007720:	2b20      	cmp	r3, #32
 8007722:	bfc1      	itttt	gt
 8007724:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007728:	409f      	lslgt	r7, r3
 800772a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800772e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007732:	bfd6      	itet	le
 8007734:	f1c3 0320 	rsble	r3, r3, #32
 8007738:	ea47 0003 	orrgt.w	r0, r7, r3
 800773c:	fa04 f003 	lslle.w	r0, r4, r3
 8007740:	f7f8 fef0 	bl	8000524 <__aeabi_ui2d>
 8007744:	2201      	movs	r2, #1
 8007746:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800774a:	3e01      	subs	r6, #1
 800774c:	9214      	str	r2, [sp, #80]	@ 0x50
 800774e:	e777      	b.n	8007640 <_dtoa_r+0x100>
 8007750:	2301      	movs	r3, #1
 8007752:	e7b8      	b.n	80076c6 <_dtoa_r+0x186>
 8007754:	9012      	str	r0, [sp, #72]	@ 0x48
 8007756:	e7b7      	b.n	80076c8 <_dtoa_r+0x188>
 8007758:	427b      	negs	r3, r7
 800775a:	930a      	str	r3, [sp, #40]	@ 0x28
 800775c:	2300      	movs	r3, #0
 800775e:	eba8 0807 	sub.w	r8, r8, r7
 8007762:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007764:	e7c4      	b.n	80076f0 <_dtoa_r+0x1b0>
 8007766:	2300      	movs	r3, #0
 8007768:	930b      	str	r3, [sp, #44]	@ 0x2c
 800776a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800776c:	2b00      	cmp	r3, #0
 800776e:	dc35      	bgt.n	80077dc <_dtoa_r+0x29c>
 8007770:	2301      	movs	r3, #1
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	9307      	str	r3, [sp, #28]
 8007776:	461a      	mov	r2, r3
 8007778:	920e      	str	r2, [sp, #56]	@ 0x38
 800777a:	e00b      	b.n	8007794 <_dtoa_r+0x254>
 800777c:	2301      	movs	r3, #1
 800777e:	e7f3      	b.n	8007768 <_dtoa_r+0x228>
 8007780:	2300      	movs	r3, #0
 8007782:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007784:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007786:	18fb      	adds	r3, r7, r3
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	3301      	adds	r3, #1
 800778c:	2b01      	cmp	r3, #1
 800778e:	9307      	str	r3, [sp, #28]
 8007790:	bfb8      	it	lt
 8007792:	2301      	movlt	r3, #1
 8007794:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007798:	2100      	movs	r1, #0
 800779a:	2204      	movs	r2, #4
 800779c:	f102 0514 	add.w	r5, r2, #20
 80077a0:	429d      	cmp	r5, r3
 80077a2:	d91f      	bls.n	80077e4 <_dtoa_r+0x2a4>
 80077a4:	6041      	str	r1, [r0, #4]
 80077a6:	4658      	mov	r0, fp
 80077a8:	f001 f824 	bl	80087f4 <_Balloc>
 80077ac:	4682      	mov	sl, r0
 80077ae:	2800      	cmp	r0, #0
 80077b0:	d13c      	bne.n	800782c <_dtoa_r+0x2ec>
 80077b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007820 <_dtoa_r+0x2e0>)
 80077b4:	4602      	mov	r2, r0
 80077b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80077ba:	e6d8      	b.n	800756e <_dtoa_r+0x2e>
 80077bc:	2301      	movs	r3, #1
 80077be:	e7e0      	b.n	8007782 <_dtoa_r+0x242>
 80077c0:	2401      	movs	r4, #1
 80077c2:	2300      	movs	r3, #0
 80077c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80077c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80077c8:	f04f 33ff 	mov.w	r3, #4294967295
 80077cc:	9300      	str	r3, [sp, #0]
 80077ce:	9307      	str	r3, [sp, #28]
 80077d0:	2200      	movs	r2, #0
 80077d2:	2312      	movs	r3, #18
 80077d4:	e7d0      	b.n	8007778 <_dtoa_r+0x238>
 80077d6:	2301      	movs	r3, #1
 80077d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077da:	e7f5      	b.n	80077c8 <_dtoa_r+0x288>
 80077dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	9307      	str	r3, [sp, #28]
 80077e2:	e7d7      	b.n	8007794 <_dtoa_r+0x254>
 80077e4:	3101      	adds	r1, #1
 80077e6:	0052      	lsls	r2, r2, #1
 80077e8:	e7d8      	b.n	800779c <_dtoa_r+0x25c>
 80077ea:	bf00      	nop
 80077ec:	f3af 8000 	nop.w
 80077f0:	636f4361 	.word	0x636f4361
 80077f4:	3fd287a7 	.word	0x3fd287a7
 80077f8:	8b60c8b3 	.word	0x8b60c8b3
 80077fc:	3fc68a28 	.word	0x3fc68a28
 8007800:	509f79fb 	.word	0x509f79fb
 8007804:	3fd34413 	.word	0x3fd34413
 8007808:	0800a740 	.word	0x0800a740
 800780c:	0800a757 	.word	0x0800a757
 8007810:	7ff00000 	.word	0x7ff00000
 8007814:	0800a9a0 	.word	0x0800a9a0
 8007818:	3ff80000 	.word	0x3ff80000
 800781c:	0800a8b0 	.word	0x0800a8b0
 8007820:	0800a7af 	.word	0x0800a7af
 8007824:	0800a73c 	.word	0x0800a73c
 8007828:	0800a99f 	.word	0x0800a99f
 800782c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007830:	6018      	str	r0, [r3, #0]
 8007832:	9b07      	ldr	r3, [sp, #28]
 8007834:	2b0e      	cmp	r3, #14
 8007836:	f200 80a4 	bhi.w	8007982 <_dtoa_r+0x442>
 800783a:	2c00      	cmp	r4, #0
 800783c:	f000 80a1 	beq.w	8007982 <_dtoa_r+0x442>
 8007840:	2f00      	cmp	r7, #0
 8007842:	dd33      	ble.n	80078ac <_dtoa_r+0x36c>
 8007844:	4bad      	ldr	r3, [pc, #692]	@ (8007afc <_dtoa_r+0x5bc>)
 8007846:	f007 020f 	and.w	r2, r7, #15
 800784a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800784e:	ed93 7b00 	vldr	d7, [r3]
 8007852:	05f8      	lsls	r0, r7, #23
 8007854:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007858:	ea4f 1427 	mov.w	r4, r7, asr #4
 800785c:	d516      	bpl.n	800788c <_dtoa_r+0x34c>
 800785e:	4ba8      	ldr	r3, [pc, #672]	@ (8007b00 <_dtoa_r+0x5c0>)
 8007860:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007864:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007868:	f7f9 f800 	bl	800086c <__aeabi_ddiv>
 800786c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007870:	f004 040f 	and.w	r4, r4, #15
 8007874:	2603      	movs	r6, #3
 8007876:	4da2      	ldr	r5, [pc, #648]	@ (8007b00 <_dtoa_r+0x5c0>)
 8007878:	b954      	cbnz	r4, 8007890 <_dtoa_r+0x350>
 800787a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800787e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007882:	f7f8 fff3 	bl	800086c <__aeabi_ddiv>
 8007886:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800788a:	e028      	b.n	80078de <_dtoa_r+0x39e>
 800788c:	2602      	movs	r6, #2
 800788e:	e7f2      	b.n	8007876 <_dtoa_r+0x336>
 8007890:	07e1      	lsls	r1, r4, #31
 8007892:	d508      	bpl.n	80078a6 <_dtoa_r+0x366>
 8007894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007898:	e9d5 2300 	ldrd	r2, r3, [r5]
 800789c:	f7f8 febc 	bl	8000618 <__aeabi_dmul>
 80078a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078a4:	3601      	adds	r6, #1
 80078a6:	1064      	asrs	r4, r4, #1
 80078a8:	3508      	adds	r5, #8
 80078aa:	e7e5      	b.n	8007878 <_dtoa_r+0x338>
 80078ac:	f000 80d2 	beq.w	8007a54 <_dtoa_r+0x514>
 80078b0:	427c      	negs	r4, r7
 80078b2:	4b92      	ldr	r3, [pc, #584]	@ (8007afc <_dtoa_r+0x5bc>)
 80078b4:	4d92      	ldr	r5, [pc, #584]	@ (8007b00 <_dtoa_r+0x5c0>)
 80078b6:	f004 020f 	and.w	r2, r4, #15
 80078ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078c6:	f7f8 fea7 	bl	8000618 <__aeabi_dmul>
 80078ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078ce:	1124      	asrs	r4, r4, #4
 80078d0:	2300      	movs	r3, #0
 80078d2:	2602      	movs	r6, #2
 80078d4:	2c00      	cmp	r4, #0
 80078d6:	f040 80b2 	bne.w	8007a3e <_dtoa_r+0x4fe>
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1d3      	bne.n	8007886 <_dtoa_r+0x346>
 80078de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80078e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 80b7 	beq.w	8007a58 <_dtoa_r+0x518>
 80078ea:	4b86      	ldr	r3, [pc, #536]	@ (8007b04 <_dtoa_r+0x5c4>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	4620      	mov	r0, r4
 80078f0:	4629      	mov	r1, r5
 80078f2:	f7f9 f903 	bl	8000afc <__aeabi_dcmplt>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	f000 80ae 	beq.w	8007a58 <_dtoa_r+0x518>
 80078fc:	9b07      	ldr	r3, [sp, #28]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f000 80aa 	beq.w	8007a58 <_dtoa_r+0x518>
 8007904:	9b00      	ldr	r3, [sp, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	dd37      	ble.n	800797a <_dtoa_r+0x43a>
 800790a:	1e7b      	subs	r3, r7, #1
 800790c:	9304      	str	r3, [sp, #16]
 800790e:	4620      	mov	r0, r4
 8007910:	4b7d      	ldr	r3, [pc, #500]	@ (8007b08 <_dtoa_r+0x5c8>)
 8007912:	2200      	movs	r2, #0
 8007914:	4629      	mov	r1, r5
 8007916:	f7f8 fe7f 	bl	8000618 <__aeabi_dmul>
 800791a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800791e:	9c00      	ldr	r4, [sp, #0]
 8007920:	3601      	adds	r6, #1
 8007922:	4630      	mov	r0, r6
 8007924:	f7f8 fe0e 	bl	8000544 <__aeabi_i2d>
 8007928:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800792c:	f7f8 fe74 	bl	8000618 <__aeabi_dmul>
 8007930:	4b76      	ldr	r3, [pc, #472]	@ (8007b0c <_dtoa_r+0x5cc>)
 8007932:	2200      	movs	r2, #0
 8007934:	f7f8 fcba 	bl	80002ac <__adddf3>
 8007938:	4605      	mov	r5, r0
 800793a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800793e:	2c00      	cmp	r4, #0
 8007940:	f040 808d 	bne.w	8007a5e <_dtoa_r+0x51e>
 8007944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007948:	4b71      	ldr	r3, [pc, #452]	@ (8007b10 <_dtoa_r+0x5d0>)
 800794a:	2200      	movs	r2, #0
 800794c:	f7f8 fcac 	bl	80002a8 <__aeabi_dsub>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007958:	462a      	mov	r2, r5
 800795a:	4633      	mov	r3, r6
 800795c:	f7f9 f8ec 	bl	8000b38 <__aeabi_dcmpgt>
 8007960:	2800      	cmp	r0, #0
 8007962:	f040 828b 	bne.w	8007e7c <_dtoa_r+0x93c>
 8007966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800796a:	462a      	mov	r2, r5
 800796c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007970:	f7f9 f8c4 	bl	8000afc <__aeabi_dcmplt>
 8007974:	2800      	cmp	r0, #0
 8007976:	f040 8128 	bne.w	8007bca <_dtoa_r+0x68a>
 800797a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800797e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007982:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007984:	2b00      	cmp	r3, #0
 8007986:	f2c0 815a 	blt.w	8007c3e <_dtoa_r+0x6fe>
 800798a:	2f0e      	cmp	r7, #14
 800798c:	f300 8157 	bgt.w	8007c3e <_dtoa_r+0x6fe>
 8007990:	4b5a      	ldr	r3, [pc, #360]	@ (8007afc <_dtoa_r+0x5bc>)
 8007992:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007996:	ed93 7b00 	vldr	d7, [r3]
 800799a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800799c:	2b00      	cmp	r3, #0
 800799e:	ed8d 7b00 	vstr	d7, [sp]
 80079a2:	da03      	bge.n	80079ac <_dtoa_r+0x46c>
 80079a4:	9b07      	ldr	r3, [sp, #28]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f340 8101 	ble.w	8007bae <_dtoa_r+0x66e>
 80079ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80079b0:	4656      	mov	r6, sl
 80079b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079b6:	4620      	mov	r0, r4
 80079b8:	4629      	mov	r1, r5
 80079ba:	f7f8 ff57 	bl	800086c <__aeabi_ddiv>
 80079be:	f7f9 f8db 	bl	8000b78 <__aeabi_d2iz>
 80079c2:	4680      	mov	r8, r0
 80079c4:	f7f8 fdbe 	bl	8000544 <__aeabi_i2d>
 80079c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079cc:	f7f8 fe24 	bl	8000618 <__aeabi_dmul>
 80079d0:	4602      	mov	r2, r0
 80079d2:	460b      	mov	r3, r1
 80079d4:	4620      	mov	r0, r4
 80079d6:	4629      	mov	r1, r5
 80079d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80079dc:	f7f8 fc64 	bl	80002a8 <__aeabi_dsub>
 80079e0:	f806 4b01 	strb.w	r4, [r6], #1
 80079e4:	9d07      	ldr	r5, [sp, #28]
 80079e6:	eba6 040a 	sub.w	r4, r6, sl
 80079ea:	42a5      	cmp	r5, r4
 80079ec:	4602      	mov	r2, r0
 80079ee:	460b      	mov	r3, r1
 80079f0:	f040 8117 	bne.w	8007c22 <_dtoa_r+0x6e2>
 80079f4:	f7f8 fc5a 	bl	80002ac <__adddf3>
 80079f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079fc:	4604      	mov	r4, r0
 80079fe:	460d      	mov	r5, r1
 8007a00:	f7f9 f89a 	bl	8000b38 <__aeabi_dcmpgt>
 8007a04:	2800      	cmp	r0, #0
 8007a06:	f040 80f9 	bne.w	8007bfc <_dtoa_r+0x6bc>
 8007a0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a0e:	4620      	mov	r0, r4
 8007a10:	4629      	mov	r1, r5
 8007a12:	f7f9 f869 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a16:	b118      	cbz	r0, 8007a20 <_dtoa_r+0x4e0>
 8007a18:	f018 0f01 	tst.w	r8, #1
 8007a1c:	f040 80ee 	bne.w	8007bfc <_dtoa_r+0x6bc>
 8007a20:	4649      	mov	r1, r9
 8007a22:	4658      	mov	r0, fp
 8007a24:	f000 ff26 	bl	8008874 <_Bfree>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	7033      	strb	r3, [r6, #0]
 8007a2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a2e:	3701      	adds	r7, #1
 8007a30:	601f      	str	r7, [r3, #0]
 8007a32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f000 831d 	beq.w	8008074 <_dtoa_r+0xb34>
 8007a3a:	601e      	str	r6, [r3, #0]
 8007a3c:	e31a      	b.n	8008074 <_dtoa_r+0xb34>
 8007a3e:	07e2      	lsls	r2, r4, #31
 8007a40:	d505      	bpl.n	8007a4e <_dtoa_r+0x50e>
 8007a42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a46:	f7f8 fde7 	bl	8000618 <__aeabi_dmul>
 8007a4a:	3601      	adds	r6, #1
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	1064      	asrs	r4, r4, #1
 8007a50:	3508      	adds	r5, #8
 8007a52:	e73f      	b.n	80078d4 <_dtoa_r+0x394>
 8007a54:	2602      	movs	r6, #2
 8007a56:	e742      	b.n	80078de <_dtoa_r+0x39e>
 8007a58:	9c07      	ldr	r4, [sp, #28]
 8007a5a:	9704      	str	r7, [sp, #16]
 8007a5c:	e761      	b.n	8007922 <_dtoa_r+0x3e2>
 8007a5e:	4b27      	ldr	r3, [pc, #156]	@ (8007afc <_dtoa_r+0x5bc>)
 8007a60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a6a:	4454      	add	r4, sl
 8007a6c:	2900      	cmp	r1, #0
 8007a6e:	d053      	beq.n	8007b18 <_dtoa_r+0x5d8>
 8007a70:	4928      	ldr	r1, [pc, #160]	@ (8007b14 <_dtoa_r+0x5d4>)
 8007a72:	2000      	movs	r0, #0
 8007a74:	f7f8 fefa 	bl	800086c <__aeabi_ddiv>
 8007a78:	4633      	mov	r3, r6
 8007a7a:	462a      	mov	r2, r5
 8007a7c:	f7f8 fc14 	bl	80002a8 <__aeabi_dsub>
 8007a80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007a84:	4656      	mov	r6, sl
 8007a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a8a:	f7f9 f875 	bl	8000b78 <__aeabi_d2iz>
 8007a8e:	4605      	mov	r5, r0
 8007a90:	f7f8 fd58 	bl	8000544 <__aeabi_i2d>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a9c:	f7f8 fc04 	bl	80002a8 <__aeabi_dsub>
 8007aa0:	3530      	adds	r5, #48	@ 0x30
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007aaa:	f806 5b01 	strb.w	r5, [r6], #1
 8007aae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ab2:	f7f9 f823 	bl	8000afc <__aeabi_dcmplt>
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	d171      	bne.n	8007b9e <_dtoa_r+0x65e>
 8007aba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007abe:	4911      	ldr	r1, [pc, #68]	@ (8007b04 <_dtoa_r+0x5c4>)
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	f7f8 fbf1 	bl	80002a8 <__aeabi_dsub>
 8007ac6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007aca:	f7f9 f817 	bl	8000afc <__aeabi_dcmplt>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	f040 8095 	bne.w	8007bfe <_dtoa_r+0x6be>
 8007ad4:	42a6      	cmp	r6, r4
 8007ad6:	f43f af50 	beq.w	800797a <_dtoa_r+0x43a>
 8007ada:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007ade:	4b0a      	ldr	r3, [pc, #40]	@ (8007b08 <_dtoa_r+0x5c8>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f7f8 fd99 	bl	8000618 <__aeabi_dmul>
 8007ae6:	4b08      	ldr	r3, [pc, #32]	@ (8007b08 <_dtoa_r+0x5c8>)
 8007ae8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007aec:	2200      	movs	r2, #0
 8007aee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007af2:	f7f8 fd91 	bl	8000618 <__aeabi_dmul>
 8007af6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007afa:	e7c4      	b.n	8007a86 <_dtoa_r+0x546>
 8007afc:	0800a8b0 	.word	0x0800a8b0
 8007b00:	0800a888 	.word	0x0800a888
 8007b04:	3ff00000 	.word	0x3ff00000
 8007b08:	40240000 	.word	0x40240000
 8007b0c:	401c0000 	.word	0x401c0000
 8007b10:	40140000 	.word	0x40140000
 8007b14:	3fe00000 	.word	0x3fe00000
 8007b18:	4631      	mov	r1, r6
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	f7f8 fd7c 	bl	8000618 <__aeabi_dmul>
 8007b20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007b24:	9415      	str	r4, [sp, #84]	@ 0x54
 8007b26:	4656      	mov	r6, sl
 8007b28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b2c:	f7f9 f824 	bl	8000b78 <__aeabi_d2iz>
 8007b30:	4605      	mov	r5, r0
 8007b32:	f7f8 fd07 	bl	8000544 <__aeabi_i2d>
 8007b36:	4602      	mov	r2, r0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b3e:	f7f8 fbb3 	bl	80002a8 <__aeabi_dsub>
 8007b42:	3530      	adds	r5, #48	@ 0x30
 8007b44:	f806 5b01 	strb.w	r5, [r6], #1
 8007b48:	4602      	mov	r2, r0
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	42a6      	cmp	r6, r4
 8007b4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b52:	f04f 0200 	mov.w	r2, #0
 8007b56:	d124      	bne.n	8007ba2 <_dtoa_r+0x662>
 8007b58:	4bac      	ldr	r3, [pc, #688]	@ (8007e0c <_dtoa_r+0x8cc>)
 8007b5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007b5e:	f7f8 fba5 	bl	80002ac <__adddf3>
 8007b62:	4602      	mov	r2, r0
 8007b64:	460b      	mov	r3, r1
 8007b66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b6a:	f7f8 ffe5 	bl	8000b38 <__aeabi_dcmpgt>
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	d145      	bne.n	8007bfe <_dtoa_r+0x6be>
 8007b72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007b76:	49a5      	ldr	r1, [pc, #660]	@ (8007e0c <_dtoa_r+0x8cc>)
 8007b78:	2000      	movs	r0, #0
 8007b7a:	f7f8 fb95 	bl	80002a8 <__aeabi_dsub>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b86:	f7f8 ffb9 	bl	8000afc <__aeabi_dcmplt>
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	f43f aef5 	beq.w	800797a <_dtoa_r+0x43a>
 8007b90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007b92:	1e73      	subs	r3, r6, #1
 8007b94:	9315      	str	r3, [sp, #84]	@ 0x54
 8007b96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007b9a:	2b30      	cmp	r3, #48	@ 0x30
 8007b9c:	d0f8      	beq.n	8007b90 <_dtoa_r+0x650>
 8007b9e:	9f04      	ldr	r7, [sp, #16]
 8007ba0:	e73e      	b.n	8007a20 <_dtoa_r+0x4e0>
 8007ba2:	4b9b      	ldr	r3, [pc, #620]	@ (8007e10 <_dtoa_r+0x8d0>)
 8007ba4:	f7f8 fd38 	bl	8000618 <__aeabi_dmul>
 8007ba8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bac:	e7bc      	b.n	8007b28 <_dtoa_r+0x5e8>
 8007bae:	d10c      	bne.n	8007bca <_dtoa_r+0x68a>
 8007bb0:	4b98      	ldr	r3, [pc, #608]	@ (8007e14 <_dtoa_r+0x8d4>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bb8:	f7f8 fd2e 	bl	8000618 <__aeabi_dmul>
 8007bbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bc0:	f7f8 ffb0 	bl	8000b24 <__aeabi_dcmpge>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	f000 8157 	beq.w	8007e78 <_dtoa_r+0x938>
 8007bca:	2400      	movs	r4, #0
 8007bcc:	4625      	mov	r5, r4
 8007bce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bd0:	43db      	mvns	r3, r3
 8007bd2:	9304      	str	r3, [sp, #16]
 8007bd4:	4656      	mov	r6, sl
 8007bd6:	2700      	movs	r7, #0
 8007bd8:	4621      	mov	r1, r4
 8007bda:	4658      	mov	r0, fp
 8007bdc:	f000 fe4a 	bl	8008874 <_Bfree>
 8007be0:	2d00      	cmp	r5, #0
 8007be2:	d0dc      	beq.n	8007b9e <_dtoa_r+0x65e>
 8007be4:	b12f      	cbz	r7, 8007bf2 <_dtoa_r+0x6b2>
 8007be6:	42af      	cmp	r7, r5
 8007be8:	d003      	beq.n	8007bf2 <_dtoa_r+0x6b2>
 8007bea:	4639      	mov	r1, r7
 8007bec:	4658      	mov	r0, fp
 8007bee:	f000 fe41 	bl	8008874 <_Bfree>
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	4658      	mov	r0, fp
 8007bf6:	f000 fe3d 	bl	8008874 <_Bfree>
 8007bfa:	e7d0      	b.n	8007b9e <_dtoa_r+0x65e>
 8007bfc:	9704      	str	r7, [sp, #16]
 8007bfe:	4633      	mov	r3, r6
 8007c00:	461e      	mov	r6, r3
 8007c02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c06:	2a39      	cmp	r2, #57	@ 0x39
 8007c08:	d107      	bne.n	8007c1a <_dtoa_r+0x6da>
 8007c0a:	459a      	cmp	sl, r3
 8007c0c:	d1f8      	bne.n	8007c00 <_dtoa_r+0x6c0>
 8007c0e:	9a04      	ldr	r2, [sp, #16]
 8007c10:	3201      	adds	r2, #1
 8007c12:	9204      	str	r2, [sp, #16]
 8007c14:	2230      	movs	r2, #48	@ 0x30
 8007c16:	f88a 2000 	strb.w	r2, [sl]
 8007c1a:	781a      	ldrb	r2, [r3, #0]
 8007c1c:	3201      	adds	r2, #1
 8007c1e:	701a      	strb	r2, [r3, #0]
 8007c20:	e7bd      	b.n	8007b9e <_dtoa_r+0x65e>
 8007c22:	4b7b      	ldr	r3, [pc, #492]	@ (8007e10 <_dtoa_r+0x8d0>)
 8007c24:	2200      	movs	r2, #0
 8007c26:	f7f8 fcf7 	bl	8000618 <__aeabi_dmul>
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	4604      	mov	r4, r0
 8007c30:	460d      	mov	r5, r1
 8007c32:	f7f8 ff59 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	f43f aebb 	beq.w	80079b2 <_dtoa_r+0x472>
 8007c3c:	e6f0      	b.n	8007a20 <_dtoa_r+0x4e0>
 8007c3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007c40:	2a00      	cmp	r2, #0
 8007c42:	f000 80db 	beq.w	8007dfc <_dtoa_r+0x8bc>
 8007c46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c48:	2a01      	cmp	r2, #1
 8007c4a:	f300 80bf 	bgt.w	8007dcc <_dtoa_r+0x88c>
 8007c4e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007c50:	2a00      	cmp	r2, #0
 8007c52:	f000 80b7 	beq.w	8007dc4 <_dtoa_r+0x884>
 8007c56:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007c5a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007c5c:	4646      	mov	r6, r8
 8007c5e:	9a08      	ldr	r2, [sp, #32]
 8007c60:	2101      	movs	r1, #1
 8007c62:	441a      	add	r2, r3
 8007c64:	4658      	mov	r0, fp
 8007c66:	4498      	add	r8, r3
 8007c68:	9208      	str	r2, [sp, #32]
 8007c6a:	f000 ff01 	bl	8008a70 <__i2b>
 8007c6e:	4605      	mov	r5, r0
 8007c70:	b15e      	cbz	r6, 8007c8a <_dtoa_r+0x74a>
 8007c72:	9b08      	ldr	r3, [sp, #32]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	dd08      	ble.n	8007c8a <_dtoa_r+0x74a>
 8007c78:	42b3      	cmp	r3, r6
 8007c7a:	9a08      	ldr	r2, [sp, #32]
 8007c7c:	bfa8      	it	ge
 8007c7e:	4633      	movge	r3, r6
 8007c80:	eba8 0803 	sub.w	r8, r8, r3
 8007c84:	1af6      	subs	r6, r6, r3
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	9308      	str	r3, [sp, #32]
 8007c8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c8c:	b1f3      	cbz	r3, 8007ccc <_dtoa_r+0x78c>
 8007c8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f000 80b7 	beq.w	8007e04 <_dtoa_r+0x8c4>
 8007c96:	b18c      	cbz	r4, 8007cbc <_dtoa_r+0x77c>
 8007c98:	4629      	mov	r1, r5
 8007c9a:	4622      	mov	r2, r4
 8007c9c:	4658      	mov	r0, fp
 8007c9e:	f000 ffa7 	bl	8008bf0 <__pow5mult>
 8007ca2:	464a      	mov	r2, r9
 8007ca4:	4601      	mov	r1, r0
 8007ca6:	4605      	mov	r5, r0
 8007ca8:	4658      	mov	r0, fp
 8007caa:	f000 fef7 	bl	8008a9c <__multiply>
 8007cae:	4649      	mov	r1, r9
 8007cb0:	9004      	str	r0, [sp, #16]
 8007cb2:	4658      	mov	r0, fp
 8007cb4:	f000 fdde 	bl	8008874 <_Bfree>
 8007cb8:	9b04      	ldr	r3, [sp, #16]
 8007cba:	4699      	mov	r9, r3
 8007cbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cbe:	1b1a      	subs	r2, r3, r4
 8007cc0:	d004      	beq.n	8007ccc <_dtoa_r+0x78c>
 8007cc2:	4649      	mov	r1, r9
 8007cc4:	4658      	mov	r0, fp
 8007cc6:	f000 ff93 	bl	8008bf0 <__pow5mult>
 8007cca:	4681      	mov	r9, r0
 8007ccc:	2101      	movs	r1, #1
 8007cce:	4658      	mov	r0, fp
 8007cd0:	f000 fece 	bl	8008a70 <__i2b>
 8007cd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f000 81cf 	beq.w	800807c <_dtoa_r+0xb3c>
 8007cde:	461a      	mov	r2, r3
 8007ce0:	4601      	mov	r1, r0
 8007ce2:	4658      	mov	r0, fp
 8007ce4:	f000 ff84 	bl	8008bf0 <__pow5mult>
 8007ce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	4604      	mov	r4, r0
 8007cee:	f300 8095 	bgt.w	8007e1c <_dtoa_r+0x8dc>
 8007cf2:	9b02      	ldr	r3, [sp, #8]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f040 8087 	bne.w	8007e08 <_dtoa_r+0x8c8>
 8007cfa:	9b03      	ldr	r3, [sp, #12]
 8007cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f040 8089 	bne.w	8007e18 <_dtoa_r+0x8d8>
 8007d06:	9b03      	ldr	r3, [sp, #12]
 8007d08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d0c:	0d1b      	lsrs	r3, r3, #20
 8007d0e:	051b      	lsls	r3, r3, #20
 8007d10:	b12b      	cbz	r3, 8007d1e <_dtoa_r+0x7de>
 8007d12:	9b08      	ldr	r3, [sp, #32]
 8007d14:	3301      	adds	r3, #1
 8007d16:	9308      	str	r3, [sp, #32]
 8007d18:	f108 0801 	add.w	r8, r8, #1
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 81b0 	beq.w	8008088 <_dtoa_r+0xb48>
 8007d28:	6923      	ldr	r3, [r4, #16]
 8007d2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007d2e:	6918      	ldr	r0, [r3, #16]
 8007d30:	f000 fe52 	bl	80089d8 <__hi0bits>
 8007d34:	f1c0 0020 	rsb	r0, r0, #32
 8007d38:	9b08      	ldr	r3, [sp, #32]
 8007d3a:	4418      	add	r0, r3
 8007d3c:	f010 001f 	ands.w	r0, r0, #31
 8007d40:	d077      	beq.n	8007e32 <_dtoa_r+0x8f2>
 8007d42:	f1c0 0320 	rsb	r3, r0, #32
 8007d46:	2b04      	cmp	r3, #4
 8007d48:	dd6b      	ble.n	8007e22 <_dtoa_r+0x8e2>
 8007d4a:	9b08      	ldr	r3, [sp, #32]
 8007d4c:	f1c0 001c 	rsb	r0, r0, #28
 8007d50:	4403      	add	r3, r0
 8007d52:	4480      	add	r8, r0
 8007d54:	4406      	add	r6, r0
 8007d56:	9308      	str	r3, [sp, #32]
 8007d58:	f1b8 0f00 	cmp.w	r8, #0
 8007d5c:	dd05      	ble.n	8007d6a <_dtoa_r+0x82a>
 8007d5e:	4649      	mov	r1, r9
 8007d60:	4642      	mov	r2, r8
 8007d62:	4658      	mov	r0, fp
 8007d64:	f000 ff9e 	bl	8008ca4 <__lshift>
 8007d68:	4681      	mov	r9, r0
 8007d6a:	9b08      	ldr	r3, [sp, #32]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	dd05      	ble.n	8007d7c <_dtoa_r+0x83c>
 8007d70:	4621      	mov	r1, r4
 8007d72:	461a      	mov	r2, r3
 8007d74:	4658      	mov	r0, fp
 8007d76:	f000 ff95 	bl	8008ca4 <__lshift>
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d059      	beq.n	8007e36 <_dtoa_r+0x8f6>
 8007d82:	4621      	mov	r1, r4
 8007d84:	4648      	mov	r0, r9
 8007d86:	f000 fff9 	bl	8008d7c <__mcmp>
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	da53      	bge.n	8007e36 <_dtoa_r+0x8f6>
 8007d8e:	1e7b      	subs	r3, r7, #1
 8007d90:	9304      	str	r3, [sp, #16]
 8007d92:	4649      	mov	r1, r9
 8007d94:	2300      	movs	r3, #0
 8007d96:	220a      	movs	r2, #10
 8007d98:	4658      	mov	r0, fp
 8007d9a:	f000 fd8d 	bl	80088b8 <__multadd>
 8007d9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007da0:	4681      	mov	r9, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f000 8172 	beq.w	800808c <_dtoa_r+0xb4c>
 8007da8:	2300      	movs	r3, #0
 8007daa:	4629      	mov	r1, r5
 8007dac:	220a      	movs	r2, #10
 8007dae:	4658      	mov	r0, fp
 8007db0:	f000 fd82 	bl	80088b8 <__multadd>
 8007db4:	9b00      	ldr	r3, [sp, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	4605      	mov	r5, r0
 8007dba:	dc67      	bgt.n	8007e8c <_dtoa_r+0x94c>
 8007dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	dc41      	bgt.n	8007e46 <_dtoa_r+0x906>
 8007dc2:	e063      	b.n	8007e8c <_dtoa_r+0x94c>
 8007dc4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007dc6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007dca:	e746      	b.n	8007c5a <_dtoa_r+0x71a>
 8007dcc:	9b07      	ldr	r3, [sp, #28]
 8007dce:	1e5c      	subs	r4, r3, #1
 8007dd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dd2:	42a3      	cmp	r3, r4
 8007dd4:	bfbf      	itttt	lt
 8007dd6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007dd8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007dda:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007ddc:	1ae3      	sublt	r3, r4, r3
 8007dde:	bfb4      	ite	lt
 8007de0:	18d2      	addlt	r2, r2, r3
 8007de2:	1b1c      	subge	r4, r3, r4
 8007de4:	9b07      	ldr	r3, [sp, #28]
 8007de6:	bfbc      	itt	lt
 8007de8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007dea:	2400      	movlt	r4, #0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	bfb5      	itete	lt
 8007df0:	eba8 0603 	sublt.w	r6, r8, r3
 8007df4:	9b07      	ldrge	r3, [sp, #28]
 8007df6:	2300      	movlt	r3, #0
 8007df8:	4646      	movge	r6, r8
 8007dfa:	e730      	b.n	8007c5e <_dtoa_r+0x71e>
 8007dfc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007dfe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007e00:	4646      	mov	r6, r8
 8007e02:	e735      	b.n	8007c70 <_dtoa_r+0x730>
 8007e04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e06:	e75c      	b.n	8007cc2 <_dtoa_r+0x782>
 8007e08:	2300      	movs	r3, #0
 8007e0a:	e788      	b.n	8007d1e <_dtoa_r+0x7de>
 8007e0c:	3fe00000 	.word	0x3fe00000
 8007e10:	40240000 	.word	0x40240000
 8007e14:	40140000 	.word	0x40140000
 8007e18:	9b02      	ldr	r3, [sp, #8]
 8007e1a:	e780      	b.n	8007d1e <_dtoa_r+0x7de>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e20:	e782      	b.n	8007d28 <_dtoa_r+0x7e8>
 8007e22:	d099      	beq.n	8007d58 <_dtoa_r+0x818>
 8007e24:	9a08      	ldr	r2, [sp, #32]
 8007e26:	331c      	adds	r3, #28
 8007e28:	441a      	add	r2, r3
 8007e2a:	4498      	add	r8, r3
 8007e2c:	441e      	add	r6, r3
 8007e2e:	9208      	str	r2, [sp, #32]
 8007e30:	e792      	b.n	8007d58 <_dtoa_r+0x818>
 8007e32:	4603      	mov	r3, r0
 8007e34:	e7f6      	b.n	8007e24 <_dtoa_r+0x8e4>
 8007e36:	9b07      	ldr	r3, [sp, #28]
 8007e38:	9704      	str	r7, [sp, #16]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	dc20      	bgt.n	8007e80 <_dtoa_r+0x940>
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	dd1e      	ble.n	8007e84 <_dtoa_r+0x944>
 8007e46:	9b00      	ldr	r3, [sp, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f47f aec0 	bne.w	8007bce <_dtoa_r+0x68e>
 8007e4e:	4621      	mov	r1, r4
 8007e50:	2205      	movs	r2, #5
 8007e52:	4658      	mov	r0, fp
 8007e54:	f000 fd30 	bl	80088b8 <__multadd>
 8007e58:	4601      	mov	r1, r0
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	4648      	mov	r0, r9
 8007e5e:	f000 ff8d 	bl	8008d7c <__mcmp>
 8007e62:	2800      	cmp	r0, #0
 8007e64:	f77f aeb3 	ble.w	8007bce <_dtoa_r+0x68e>
 8007e68:	4656      	mov	r6, sl
 8007e6a:	2331      	movs	r3, #49	@ 0x31
 8007e6c:	f806 3b01 	strb.w	r3, [r6], #1
 8007e70:	9b04      	ldr	r3, [sp, #16]
 8007e72:	3301      	adds	r3, #1
 8007e74:	9304      	str	r3, [sp, #16]
 8007e76:	e6ae      	b.n	8007bd6 <_dtoa_r+0x696>
 8007e78:	9c07      	ldr	r4, [sp, #28]
 8007e7a:	9704      	str	r7, [sp, #16]
 8007e7c:	4625      	mov	r5, r4
 8007e7e:	e7f3      	b.n	8007e68 <_dtoa_r+0x928>
 8007e80:	9b07      	ldr	r3, [sp, #28]
 8007e82:	9300      	str	r3, [sp, #0]
 8007e84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f000 8104 	beq.w	8008094 <_dtoa_r+0xb54>
 8007e8c:	2e00      	cmp	r6, #0
 8007e8e:	dd05      	ble.n	8007e9c <_dtoa_r+0x95c>
 8007e90:	4629      	mov	r1, r5
 8007e92:	4632      	mov	r2, r6
 8007e94:	4658      	mov	r0, fp
 8007e96:	f000 ff05 	bl	8008ca4 <__lshift>
 8007e9a:	4605      	mov	r5, r0
 8007e9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d05a      	beq.n	8007f58 <_dtoa_r+0xa18>
 8007ea2:	6869      	ldr	r1, [r5, #4]
 8007ea4:	4658      	mov	r0, fp
 8007ea6:	f000 fca5 	bl	80087f4 <_Balloc>
 8007eaa:	4606      	mov	r6, r0
 8007eac:	b928      	cbnz	r0, 8007eba <_dtoa_r+0x97a>
 8007eae:	4b84      	ldr	r3, [pc, #528]	@ (80080c0 <_dtoa_r+0xb80>)
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007eb6:	f7ff bb5a 	b.w	800756e <_dtoa_r+0x2e>
 8007eba:	692a      	ldr	r2, [r5, #16]
 8007ebc:	3202      	adds	r2, #2
 8007ebe:	0092      	lsls	r2, r2, #2
 8007ec0:	f105 010c 	add.w	r1, r5, #12
 8007ec4:	300c      	adds	r0, #12
 8007ec6:	f7ff fa9a 	bl	80073fe <memcpy>
 8007eca:	2201      	movs	r2, #1
 8007ecc:	4631      	mov	r1, r6
 8007ece:	4658      	mov	r0, fp
 8007ed0:	f000 fee8 	bl	8008ca4 <__lshift>
 8007ed4:	f10a 0301 	add.w	r3, sl, #1
 8007ed8:	9307      	str	r3, [sp, #28]
 8007eda:	9b00      	ldr	r3, [sp, #0]
 8007edc:	4453      	add	r3, sl
 8007ede:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ee0:	9b02      	ldr	r3, [sp, #8]
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	462f      	mov	r7, r5
 8007ee8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007eea:	4605      	mov	r5, r0
 8007eec:	9b07      	ldr	r3, [sp, #28]
 8007eee:	4621      	mov	r1, r4
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	4648      	mov	r0, r9
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	f7ff fa9b 	bl	8007430 <quorem>
 8007efa:	4639      	mov	r1, r7
 8007efc:	9002      	str	r0, [sp, #8]
 8007efe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007f02:	4648      	mov	r0, r9
 8007f04:	f000 ff3a 	bl	8008d7c <__mcmp>
 8007f08:	462a      	mov	r2, r5
 8007f0a:	9008      	str	r0, [sp, #32]
 8007f0c:	4621      	mov	r1, r4
 8007f0e:	4658      	mov	r0, fp
 8007f10:	f000 ff50 	bl	8008db4 <__mdiff>
 8007f14:	68c2      	ldr	r2, [r0, #12]
 8007f16:	4606      	mov	r6, r0
 8007f18:	bb02      	cbnz	r2, 8007f5c <_dtoa_r+0xa1c>
 8007f1a:	4601      	mov	r1, r0
 8007f1c:	4648      	mov	r0, r9
 8007f1e:	f000 ff2d 	bl	8008d7c <__mcmp>
 8007f22:	4602      	mov	r2, r0
 8007f24:	4631      	mov	r1, r6
 8007f26:	4658      	mov	r0, fp
 8007f28:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f2a:	f000 fca3 	bl	8008874 <_Bfree>
 8007f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f32:	9e07      	ldr	r6, [sp, #28]
 8007f34:	ea43 0102 	orr.w	r1, r3, r2
 8007f38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f3a:	4319      	orrs	r1, r3
 8007f3c:	d110      	bne.n	8007f60 <_dtoa_r+0xa20>
 8007f3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007f42:	d029      	beq.n	8007f98 <_dtoa_r+0xa58>
 8007f44:	9b08      	ldr	r3, [sp, #32]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	dd02      	ble.n	8007f50 <_dtoa_r+0xa10>
 8007f4a:	9b02      	ldr	r3, [sp, #8]
 8007f4c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007f50:	9b00      	ldr	r3, [sp, #0]
 8007f52:	f883 8000 	strb.w	r8, [r3]
 8007f56:	e63f      	b.n	8007bd8 <_dtoa_r+0x698>
 8007f58:	4628      	mov	r0, r5
 8007f5a:	e7bb      	b.n	8007ed4 <_dtoa_r+0x994>
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	e7e1      	b.n	8007f24 <_dtoa_r+0x9e4>
 8007f60:	9b08      	ldr	r3, [sp, #32]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	db04      	blt.n	8007f70 <_dtoa_r+0xa30>
 8007f66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f68:	430b      	orrs	r3, r1
 8007f6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007f6c:	430b      	orrs	r3, r1
 8007f6e:	d120      	bne.n	8007fb2 <_dtoa_r+0xa72>
 8007f70:	2a00      	cmp	r2, #0
 8007f72:	dded      	ble.n	8007f50 <_dtoa_r+0xa10>
 8007f74:	4649      	mov	r1, r9
 8007f76:	2201      	movs	r2, #1
 8007f78:	4658      	mov	r0, fp
 8007f7a:	f000 fe93 	bl	8008ca4 <__lshift>
 8007f7e:	4621      	mov	r1, r4
 8007f80:	4681      	mov	r9, r0
 8007f82:	f000 fefb 	bl	8008d7c <__mcmp>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	dc03      	bgt.n	8007f92 <_dtoa_r+0xa52>
 8007f8a:	d1e1      	bne.n	8007f50 <_dtoa_r+0xa10>
 8007f8c:	f018 0f01 	tst.w	r8, #1
 8007f90:	d0de      	beq.n	8007f50 <_dtoa_r+0xa10>
 8007f92:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007f96:	d1d8      	bne.n	8007f4a <_dtoa_r+0xa0a>
 8007f98:	9a00      	ldr	r2, [sp, #0]
 8007f9a:	2339      	movs	r3, #57	@ 0x39
 8007f9c:	7013      	strb	r3, [r2, #0]
 8007f9e:	4633      	mov	r3, r6
 8007fa0:	461e      	mov	r6, r3
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007fa8:	2a39      	cmp	r2, #57	@ 0x39
 8007faa:	d052      	beq.n	8008052 <_dtoa_r+0xb12>
 8007fac:	3201      	adds	r2, #1
 8007fae:	701a      	strb	r2, [r3, #0]
 8007fb0:	e612      	b.n	8007bd8 <_dtoa_r+0x698>
 8007fb2:	2a00      	cmp	r2, #0
 8007fb4:	dd07      	ble.n	8007fc6 <_dtoa_r+0xa86>
 8007fb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007fba:	d0ed      	beq.n	8007f98 <_dtoa_r+0xa58>
 8007fbc:	9a00      	ldr	r2, [sp, #0]
 8007fbe:	f108 0301 	add.w	r3, r8, #1
 8007fc2:	7013      	strb	r3, [r2, #0]
 8007fc4:	e608      	b.n	8007bd8 <_dtoa_r+0x698>
 8007fc6:	9b07      	ldr	r3, [sp, #28]
 8007fc8:	9a07      	ldr	r2, [sp, #28]
 8007fca:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007fce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d028      	beq.n	8008026 <_dtoa_r+0xae6>
 8007fd4:	4649      	mov	r1, r9
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	220a      	movs	r2, #10
 8007fda:	4658      	mov	r0, fp
 8007fdc:	f000 fc6c 	bl	80088b8 <__multadd>
 8007fe0:	42af      	cmp	r7, r5
 8007fe2:	4681      	mov	r9, r0
 8007fe4:	f04f 0300 	mov.w	r3, #0
 8007fe8:	f04f 020a 	mov.w	r2, #10
 8007fec:	4639      	mov	r1, r7
 8007fee:	4658      	mov	r0, fp
 8007ff0:	d107      	bne.n	8008002 <_dtoa_r+0xac2>
 8007ff2:	f000 fc61 	bl	80088b8 <__multadd>
 8007ff6:	4607      	mov	r7, r0
 8007ff8:	4605      	mov	r5, r0
 8007ffa:	9b07      	ldr	r3, [sp, #28]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	9307      	str	r3, [sp, #28]
 8008000:	e774      	b.n	8007eec <_dtoa_r+0x9ac>
 8008002:	f000 fc59 	bl	80088b8 <__multadd>
 8008006:	4629      	mov	r1, r5
 8008008:	4607      	mov	r7, r0
 800800a:	2300      	movs	r3, #0
 800800c:	220a      	movs	r2, #10
 800800e:	4658      	mov	r0, fp
 8008010:	f000 fc52 	bl	80088b8 <__multadd>
 8008014:	4605      	mov	r5, r0
 8008016:	e7f0      	b.n	8007ffa <_dtoa_r+0xaba>
 8008018:	9b00      	ldr	r3, [sp, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	bfcc      	ite	gt
 800801e:	461e      	movgt	r6, r3
 8008020:	2601      	movle	r6, #1
 8008022:	4456      	add	r6, sl
 8008024:	2700      	movs	r7, #0
 8008026:	4649      	mov	r1, r9
 8008028:	2201      	movs	r2, #1
 800802a:	4658      	mov	r0, fp
 800802c:	f000 fe3a 	bl	8008ca4 <__lshift>
 8008030:	4621      	mov	r1, r4
 8008032:	4681      	mov	r9, r0
 8008034:	f000 fea2 	bl	8008d7c <__mcmp>
 8008038:	2800      	cmp	r0, #0
 800803a:	dcb0      	bgt.n	8007f9e <_dtoa_r+0xa5e>
 800803c:	d102      	bne.n	8008044 <_dtoa_r+0xb04>
 800803e:	f018 0f01 	tst.w	r8, #1
 8008042:	d1ac      	bne.n	8007f9e <_dtoa_r+0xa5e>
 8008044:	4633      	mov	r3, r6
 8008046:	461e      	mov	r6, r3
 8008048:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800804c:	2a30      	cmp	r2, #48	@ 0x30
 800804e:	d0fa      	beq.n	8008046 <_dtoa_r+0xb06>
 8008050:	e5c2      	b.n	8007bd8 <_dtoa_r+0x698>
 8008052:	459a      	cmp	sl, r3
 8008054:	d1a4      	bne.n	8007fa0 <_dtoa_r+0xa60>
 8008056:	9b04      	ldr	r3, [sp, #16]
 8008058:	3301      	adds	r3, #1
 800805a:	9304      	str	r3, [sp, #16]
 800805c:	2331      	movs	r3, #49	@ 0x31
 800805e:	f88a 3000 	strb.w	r3, [sl]
 8008062:	e5b9      	b.n	8007bd8 <_dtoa_r+0x698>
 8008064:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008066:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80080c4 <_dtoa_r+0xb84>
 800806a:	b11b      	cbz	r3, 8008074 <_dtoa_r+0xb34>
 800806c:	f10a 0308 	add.w	r3, sl, #8
 8008070:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008072:	6013      	str	r3, [r2, #0]
 8008074:	4650      	mov	r0, sl
 8008076:	b019      	add	sp, #100	@ 0x64
 8008078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800807c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800807e:	2b01      	cmp	r3, #1
 8008080:	f77f ae37 	ble.w	8007cf2 <_dtoa_r+0x7b2>
 8008084:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008086:	930a      	str	r3, [sp, #40]	@ 0x28
 8008088:	2001      	movs	r0, #1
 800808a:	e655      	b.n	8007d38 <_dtoa_r+0x7f8>
 800808c:	9b00      	ldr	r3, [sp, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	f77f aed6 	ble.w	8007e40 <_dtoa_r+0x900>
 8008094:	4656      	mov	r6, sl
 8008096:	4621      	mov	r1, r4
 8008098:	4648      	mov	r0, r9
 800809a:	f7ff f9c9 	bl	8007430 <quorem>
 800809e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80080a2:	f806 8b01 	strb.w	r8, [r6], #1
 80080a6:	9b00      	ldr	r3, [sp, #0]
 80080a8:	eba6 020a 	sub.w	r2, r6, sl
 80080ac:	4293      	cmp	r3, r2
 80080ae:	ddb3      	ble.n	8008018 <_dtoa_r+0xad8>
 80080b0:	4649      	mov	r1, r9
 80080b2:	2300      	movs	r3, #0
 80080b4:	220a      	movs	r2, #10
 80080b6:	4658      	mov	r0, fp
 80080b8:	f000 fbfe 	bl	80088b8 <__multadd>
 80080bc:	4681      	mov	r9, r0
 80080be:	e7ea      	b.n	8008096 <_dtoa_r+0xb56>
 80080c0:	0800a7af 	.word	0x0800a7af
 80080c4:	0800a733 	.word	0x0800a733

080080c8 <_free_r>:
 80080c8:	b538      	push	{r3, r4, r5, lr}
 80080ca:	4605      	mov	r5, r0
 80080cc:	2900      	cmp	r1, #0
 80080ce:	d041      	beq.n	8008154 <_free_r+0x8c>
 80080d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080d4:	1f0c      	subs	r4, r1, #4
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	bfb8      	it	lt
 80080da:	18e4      	addlt	r4, r4, r3
 80080dc:	f7fd fb84 	bl	80057e8 <__malloc_lock>
 80080e0:	4a1d      	ldr	r2, [pc, #116]	@ (8008158 <_free_r+0x90>)
 80080e2:	6813      	ldr	r3, [r2, #0]
 80080e4:	b933      	cbnz	r3, 80080f4 <_free_r+0x2c>
 80080e6:	6063      	str	r3, [r4, #4]
 80080e8:	6014      	str	r4, [r2, #0]
 80080ea:	4628      	mov	r0, r5
 80080ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080f0:	f7fd bb80 	b.w	80057f4 <__malloc_unlock>
 80080f4:	42a3      	cmp	r3, r4
 80080f6:	d908      	bls.n	800810a <_free_r+0x42>
 80080f8:	6820      	ldr	r0, [r4, #0]
 80080fa:	1821      	adds	r1, r4, r0
 80080fc:	428b      	cmp	r3, r1
 80080fe:	bf01      	itttt	eq
 8008100:	6819      	ldreq	r1, [r3, #0]
 8008102:	685b      	ldreq	r3, [r3, #4]
 8008104:	1809      	addeq	r1, r1, r0
 8008106:	6021      	streq	r1, [r4, #0]
 8008108:	e7ed      	b.n	80080e6 <_free_r+0x1e>
 800810a:	461a      	mov	r2, r3
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	b10b      	cbz	r3, 8008114 <_free_r+0x4c>
 8008110:	42a3      	cmp	r3, r4
 8008112:	d9fa      	bls.n	800810a <_free_r+0x42>
 8008114:	6811      	ldr	r1, [r2, #0]
 8008116:	1850      	adds	r0, r2, r1
 8008118:	42a0      	cmp	r0, r4
 800811a:	d10b      	bne.n	8008134 <_free_r+0x6c>
 800811c:	6820      	ldr	r0, [r4, #0]
 800811e:	4401      	add	r1, r0
 8008120:	1850      	adds	r0, r2, r1
 8008122:	4283      	cmp	r3, r0
 8008124:	6011      	str	r1, [r2, #0]
 8008126:	d1e0      	bne.n	80080ea <_free_r+0x22>
 8008128:	6818      	ldr	r0, [r3, #0]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	6053      	str	r3, [r2, #4]
 800812e:	4408      	add	r0, r1
 8008130:	6010      	str	r0, [r2, #0]
 8008132:	e7da      	b.n	80080ea <_free_r+0x22>
 8008134:	d902      	bls.n	800813c <_free_r+0x74>
 8008136:	230c      	movs	r3, #12
 8008138:	602b      	str	r3, [r5, #0]
 800813a:	e7d6      	b.n	80080ea <_free_r+0x22>
 800813c:	6820      	ldr	r0, [r4, #0]
 800813e:	1821      	adds	r1, r4, r0
 8008140:	428b      	cmp	r3, r1
 8008142:	bf04      	itt	eq
 8008144:	6819      	ldreq	r1, [r3, #0]
 8008146:	685b      	ldreq	r3, [r3, #4]
 8008148:	6063      	str	r3, [r4, #4]
 800814a:	bf04      	itt	eq
 800814c:	1809      	addeq	r1, r1, r0
 800814e:	6021      	streq	r1, [r4, #0]
 8008150:	6054      	str	r4, [r2, #4]
 8008152:	e7ca      	b.n	80080ea <_free_r+0x22>
 8008154:	bd38      	pop	{r3, r4, r5, pc}
 8008156:	bf00      	nop
 8008158:	200002a0 	.word	0x200002a0

0800815c <rshift>:
 800815c:	6903      	ldr	r3, [r0, #16]
 800815e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008162:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008166:	ea4f 1261 	mov.w	r2, r1, asr #5
 800816a:	f100 0414 	add.w	r4, r0, #20
 800816e:	dd45      	ble.n	80081fc <rshift+0xa0>
 8008170:	f011 011f 	ands.w	r1, r1, #31
 8008174:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008178:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800817c:	d10c      	bne.n	8008198 <rshift+0x3c>
 800817e:	f100 0710 	add.w	r7, r0, #16
 8008182:	4629      	mov	r1, r5
 8008184:	42b1      	cmp	r1, r6
 8008186:	d334      	bcc.n	80081f2 <rshift+0x96>
 8008188:	1a9b      	subs	r3, r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	1eea      	subs	r2, r5, #3
 800818e:	4296      	cmp	r6, r2
 8008190:	bf38      	it	cc
 8008192:	2300      	movcc	r3, #0
 8008194:	4423      	add	r3, r4
 8008196:	e015      	b.n	80081c4 <rshift+0x68>
 8008198:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800819c:	f1c1 0820 	rsb	r8, r1, #32
 80081a0:	40cf      	lsrs	r7, r1
 80081a2:	f105 0e04 	add.w	lr, r5, #4
 80081a6:	46a1      	mov	r9, r4
 80081a8:	4576      	cmp	r6, lr
 80081aa:	46f4      	mov	ip, lr
 80081ac:	d815      	bhi.n	80081da <rshift+0x7e>
 80081ae:	1a9a      	subs	r2, r3, r2
 80081b0:	0092      	lsls	r2, r2, #2
 80081b2:	3a04      	subs	r2, #4
 80081b4:	3501      	adds	r5, #1
 80081b6:	42ae      	cmp	r6, r5
 80081b8:	bf38      	it	cc
 80081ba:	2200      	movcc	r2, #0
 80081bc:	18a3      	adds	r3, r4, r2
 80081be:	50a7      	str	r7, [r4, r2]
 80081c0:	b107      	cbz	r7, 80081c4 <rshift+0x68>
 80081c2:	3304      	adds	r3, #4
 80081c4:	1b1a      	subs	r2, r3, r4
 80081c6:	42a3      	cmp	r3, r4
 80081c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80081cc:	bf08      	it	eq
 80081ce:	2300      	moveq	r3, #0
 80081d0:	6102      	str	r2, [r0, #16]
 80081d2:	bf08      	it	eq
 80081d4:	6143      	streq	r3, [r0, #20]
 80081d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081da:	f8dc c000 	ldr.w	ip, [ip]
 80081de:	fa0c fc08 	lsl.w	ip, ip, r8
 80081e2:	ea4c 0707 	orr.w	r7, ip, r7
 80081e6:	f849 7b04 	str.w	r7, [r9], #4
 80081ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 80081ee:	40cf      	lsrs	r7, r1
 80081f0:	e7da      	b.n	80081a8 <rshift+0x4c>
 80081f2:	f851 cb04 	ldr.w	ip, [r1], #4
 80081f6:	f847 cf04 	str.w	ip, [r7, #4]!
 80081fa:	e7c3      	b.n	8008184 <rshift+0x28>
 80081fc:	4623      	mov	r3, r4
 80081fe:	e7e1      	b.n	80081c4 <rshift+0x68>

08008200 <__hexdig_fun>:
 8008200:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008204:	2b09      	cmp	r3, #9
 8008206:	d802      	bhi.n	800820e <__hexdig_fun+0xe>
 8008208:	3820      	subs	r0, #32
 800820a:	b2c0      	uxtb	r0, r0
 800820c:	4770      	bx	lr
 800820e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008212:	2b05      	cmp	r3, #5
 8008214:	d801      	bhi.n	800821a <__hexdig_fun+0x1a>
 8008216:	3847      	subs	r0, #71	@ 0x47
 8008218:	e7f7      	b.n	800820a <__hexdig_fun+0xa>
 800821a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800821e:	2b05      	cmp	r3, #5
 8008220:	d801      	bhi.n	8008226 <__hexdig_fun+0x26>
 8008222:	3827      	subs	r0, #39	@ 0x27
 8008224:	e7f1      	b.n	800820a <__hexdig_fun+0xa>
 8008226:	2000      	movs	r0, #0
 8008228:	4770      	bx	lr
	...

0800822c <__gethex>:
 800822c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008230:	b085      	sub	sp, #20
 8008232:	468a      	mov	sl, r1
 8008234:	9302      	str	r3, [sp, #8]
 8008236:	680b      	ldr	r3, [r1, #0]
 8008238:	9001      	str	r0, [sp, #4]
 800823a:	4690      	mov	r8, r2
 800823c:	1c9c      	adds	r4, r3, #2
 800823e:	46a1      	mov	r9, r4
 8008240:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008244:	2830      	cmp	r0, #48	@ 0x30
 8008246:	d0fa      	beq.n	800823e <__gethex+0x12>
 8008248:	eba9 0303 	sub.w	r3, r9, r3
 800824c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008250:	f7ff ffd6 	bl	8008200 <__hexdig_fun>
 8008254:	4605      	mov	r5, r0
 8008256:	2800      	cmp	r0, #0
 8008258:	d168      	bne.n	800832c <__gethex+0x100>
 800825a:	49a0      	ldr	r1, [pc, #640]	@ (80084dc <__gethex+0x2b0>)
 800825c:	2201      	movs	r2, #1
 800825e:	4648      	mov	r0, r9
 8008260:	f7ff f834 	bl	80072cc <strncmp>
 8008264:	4607      	mov	r7, r0
 8008266:	2800      	cmp	r0, #0
 8008268:	d167      	bne.n	800833a <__gethex+0x10e>
 800826a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800826e:	4626      	mov	r6, r4
 8008270:	f7ff ffc6 	bl	8008200 <__hexdig_fun>
 8008274:	2800      	cmp	r0, #0
 8008276:	d062      	beq.n	800833e <__gethex+0x112>
 8008278:	4623      	mov	r3, r4
 800827a:	7818      	ldrb	r0, [r3, #0]
 800827c:	2830      	cmp	r0, #48	@ 0x30
 800827e:	4699      	mov	r9, r3
 8008280:	f103 0301 	add.w	r3, r3, #1
 8008284:	d0f9      	beq.n	800827a <__gethex+0x4e>
 8008286:	f7ff ffbb 	bl	8008200 <__hexdig_fun>
 800828a:	fab0 f580 	clz	r5, r0
 800828e:	096d      	lsrs	r5, r5, #5
 8008290:	f04f 0b01 	mov.w	fp, #1
 8008294:	464a      	mov	r2, r9
 8008296:	4616      	mov	r6, r2
 8008298:	3201      	adds	r2, #1
 800829a:	7830      	ldrb	r0, [r6, #0]
 800829c:	f7ff ffb0 	bl	8008200 <__hexdig_fun>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	d1f8      	bne.n	8008296 <__gethex+0x6a>
 80082a4:	498d      	ldr	r1, [pc, #564]	@ (80084dc <__gethex+0x2b0>)
 80082a6:	2201      	movs	r2, #1
 80082a8:	4630      	mov	r0, r6
 80082aa:	f7ff f80f 	bl	80072cc <strncmp>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	d13f      	bne.n	8008332 <__gethex+0x106>
 80082b2:	b944      	cbnz	r4, 80082c6 <__gethex+0x9a>
 80082b4:	1c74      	adds	r4, r6, #1
 80082b6:	4622      	mov	r2, r4
 80082b8:	4616      	mov	r6, r2
 80082ba:	3201      	adds	r2, #1
 80082bc:	7830      	ldrb	r0, [r6, #0]
 80082be:	f7ff ff9f 	bl	8008200 <__hexdig_fun>
 80082c2:	2800      	cmp	r0, #0
 80082c4:	d1f8      	bne.n	80082b8 <__gethex+0x8c>
 80082c6:	1ba4      	subs	r4, r4, r6
 80082c8:	00a7      	lsls	r7, r4, #2
 80082ca:	7833      	ldrb	r3, [r6, #0]
 80082cc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80082d0:	2b50      	cmp	r3, #80	@ 0x50
 80082d2:	d13e      	bne.n	8008352 <__gethex+0x126>
 80082d4:	7873      	ldrb	r3, [r6, #1]
 80082d6:	2b2b      	cmp	r3, #43	@ 0x2b
 80082d8:	d033      	beq.n	8008342 <__gethex+0x116>
 80082da:	2b2d      	cmp	r3, #45	@ 0x2d
 80082dc:	d034      	beq.n	8008348 <__gethex+0x11c>
 80082de:	1c71      	adds	r1, r6, #1
 80082e0:	2400      	movs	r4, #0
 80082e2:	7808      	ldrb	r0, [r1, #0]
 80082e4:	f7ff ff8c 	bl	8008200 <__hexdig_fun>
 80082e8:	1e43      	subs	r3, r0, #1
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b18      	cmp	r3, #24
 80082ee:	d830      	bhi.n	8008352 <__gethex+0x126>
 80082f0:	f1a0 0210 	sub.w	r2, r0, #16
 80082f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80082f8:	f7ff ff82 	bl	8008200 <__hexdig_fun>
 80082fc:	f100 3cff 	add.w	ip, r0, #4294967295
 8008300:	fa5f fc8c 	uxtb.w	ip, ip
 8008304:	f1bc 0f18 	cmp.w	ip, #24
 8008308:	f04f 030a 	mov.w	r3, #10
 800830c:	d91e      	bls.n	800834c <__gethex+0x120>
 800830e:	b104      	cbz	r4, 8008312 <__gethex+0xe6>
 8008310:	4252      	negs	r2, r2
 8008312:	4417      	add	r7, r2
 8008314:	f8ca 1000 	str.w	r1, [sl]
 8008318:	b1ed      	cbz	r5, 8008356 <__gethex+0x12a>
 800831a:	f1bb 0f00 	cmp.w	fp, #0
 800831e:	bf0c      	ite	eq
 8008320:	2506      	moveq	r5, #6
 8008322:	2500      	movne	r5, #0
 8008324:	4628      	mov	r0, r5
 8008326:	b005      	add	sp, #20
 8008328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800832c:	2500      	movs	r5, #0
 800832e:	462c      	mov	r4, r5
 8008330:	e7b0      	b.n	8008294 <__gethex+0x68>
 8008332:	2c00      	cmp	r4, #0
 8008334:	d1c7      	bne.n	80082c6 <__gethex+0x9a>
 8008336:	4627      	mov	r7, r4
 8008338:	e7c7      	b.n	80082ca <__gethex+0x9e>
 800833a:	464e      	mov	r6, r9
 800833c:	462f      	mov	r7, r5
 800833e:	2501      	movs	r5, #1
 8008340:	e7c3      	b.n	80082ca <__gethex+0x9e>
 8008342:	2400      	movs	r4, #0
 8008344:	1cb1      	adds	r1, r6, #2
 8008346:	e7cc      	b.n	80082e2 <__gethex+0xb6>
 8008348:	2401      	movs	r4, #1
 800834a:	e7fb      	b.n	8008344 <__gethex+0x118>
 800834c:	fb03 0002 	mla	r0, r3, r2, r0
 8008350:	e7ce      	b.n	80082f0 <__gethex+0xc4>
 8008352:	4631      	mov	r1, r6
 8008354:	e7de      	b.n	8008314 <__gethex+0xe8>
 8008356:	eba6 0309 	sub.w	r3, r6, r9
 800835a:	3b01      	subs	r3, #1
 800835c:	4629      	mov	r1, r5
 800835e:	2b07      	cmp	r3, #7
 8008360:	dc0a      	bgt.n	8008378 <__gethex+0x14c>
 8008362:	9801      	ldr	r0, [sp, #4]
 8008364:	f000 fa46 	bl	80087f4 <_Balloc>
 8008368:	4604      	mov	r4, r0
 800836a:	b940      	cbnz	r0, 800837e <__gethex+0x152>
 800836c:	4b5c      	ldr	r3, [pc, #368]	@ (80084e0 <__gethex+0x2b4>)
 800836e:	4602      	mov	r2, r0
 8008370:	21e4      	movs	r1, #228	@ 0xe4
 8008372:	485c      	ldr	r0, [pc, #368]	@ (80084e4 <__gethex+0x2b8>)
 8008374:	f001 fe76 	bl	800a064 <__assert_func>
 8008378:	3101      	adds	r1, #1
 800837a:	105b      	asrs	r3, r3, #1
 800837c:	e7ef      	b.n	800835e <__gethex+0x132>
 800837e:	f100 0a14 	add.w	sl, r0, #20
 8008382:	2300      	movs	r3, #0
 8008384:	4655      	mov	r5, sl
 8008386:	469b      	mov	fp, r3
 8008388:	45b1      	cmp	r9, r6
 800838a:	d337      	bcc.n	80083fc <__gethex+0x1d0>
 800838c:	f845 bb04 	str.w	fp, [r5], #4
 8008390:	eba5 050a 	sub.w	r5, r5, sl
 8008394:	10ad      	asrs	r5, r5, #2
 8008396:	6125      	str	r5, [r4, #16]
 8008398:	4658      	mov	r0, fp
 800839a:	f000 fb1d 	bl	80089d8 <__hi0bits>
 800839e:	016d      	lsls	r5, r5, #5
 80083a0:	f8d8 6000 	ldr.w	r6, [r8]
 80083a4:	1a2d      	subs	r5, r5, r0
 80083a6:	42b5      	cmp	r5, r6
 80083a8:	dd54      	ble.n	8008454 <__gethex+0x228>
 80083aa:	1bad      	subs	r5, r5, r6
 80083ac:	4629      	mov	r1, r5
 80083ae:	4620      	mov	r0, r4
 80083b0:	f000 feb1 	bl	8009116 <__any_on>
 80083b4:	4681      	mov	r9, r0
 80083b6:	b178      	cbz	r0, 80083d8 <__gethex+0x1ac>
 80083b8:	1e6b      	subs	r3, r5, #1
 80083ba:	1159      	asrs	r1, r3, #5
 80083bc:	f003 021f 	and.w	r2, r3, #31
 80083c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80083c4:	f04f 0901 	mov.w	r9, #1
 80083c8:	fa09 f202 	lsl.w	r2, r9, r2
 80083cc:	420a      	tst	r2, r1
 80083ce:	d003      	beq.n	80083d8 <__gethex+0x1ac>
 80083d0:	454b      	cmp	r3, r9
 80083d2:	dc36      	bgt.n	8008442 <__gethex+0x216>
 80083d4:	f04f 0902 	mov.w	r9, #2
 80083d8:	4629      	mov	r1, r5
 80083da:	4620      	mov	r0, r4
 80083dc:	f7ff febe 	bl	800815c <rshift>
 80083e0:	442f      	add	r7, r5
 80083e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80083e6:	42bb      	cmp	r3, r7
 80083e8:	da42      	bge.n	8008470 <__gethex+0x244>
 80083ea:	9801      	ldr	r0, [sp, #4]
 80083ec:	4621      	mov	r1, r4
 80083ee:	f000 fa41 	bl	8008874 <_Bfree>
 80083f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083f4:	2300      	movs	r3, #0
 80083f6:	6013      	str	r3, [r2, #0]
 80083f8:	25a3      	movs	r5, #163	@ 0xa3
 80083fa:	e793      	b.n	8008324 <__gethex+0xf8>
 80083fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008400:	2a2e      	cmp	r2, #46	@ 0x2e
 8008402:	d012      	beq.n	800842a <__gethex+0x1fe>
 8008404:	2b20      	cmp	r3, #32
 8008406:	d104      	bne.n	8008412 <__gethex+0x1e6>
 8008408:	f845 bb04 	str.w	fp, [r5], #4
 800840c:	f04f 0b00 	mov.w	fp, #0
 8008410:	465b      	mov	r3, fp
 8008412:	7830      	ldrb	r0, [r6, #0]
 8008414:	9303      	str	r3, [sp, #12]
 8008416:	f7ff fef3 	bl	8008200 <__hexdig_fun>
 800841a:	9b03      	ldr	r3, [sp, #12]
 800841c:	f000 000f 	and.w	r0, r0, #15
 8008420:	4098      	lsls	r0, r3
 8008422:	ea4b 0b00 	orr.w	fp, fp, r0
 8008426:	3304      	adds	r3, #4
 8008428:	e7ae      	b.n	8008388 <__gethex+0x15c>
 800842a:	45b1      	cmp	r9, r6
 800842c:	d8ea      	bhi.n	8008404 <__gethex+0x1d8>
 800842e:	492b      	ldr	r1, [pc, #172]	@ (80084dc <__gethex+0x2b0>)
 8008430:	9303      	str	r3, [sp, #12]
 8008432:	2201      	movs	r2, #1
 8008434:	4630      	mov	r0, r6
 8008436:	f7fe ff49 	bl	80072cc <strncmp>
 800843a:	9b03      	ldr	r3, [sp, #12]
 800843c:	2800      	cmp	r0, #0
 800843e:	d1e1      	bne.n	8008404 <__gethex+0x1d8>
 8008440:	e7a2      	b.n	8008388 <__gethex+0x15c>
 8008442:	1ea9      	subs	r1, r5, #2
 8008444:	4620      	mov	r0, r4
 8008446:	f000 fe66 	bl	8009116 <__any_on>
 800844a:	2800      	cmp	r0, #0
 800844c:	d0c2      	beq.n	80083d4 <__gethex+0x1a8>
 800844e:	f04f 0903 	mov.w	r9, #3
 8008452:	e7c1      	b.n	80083d8 <__gethex+0x1ac>
 8008454:	da09      	bge.n	800846a <__gethex+0x23e>
 8008456:	1b75      	subs	r5, r6, r5
 8008458:	4621      	mov	r1, r4
 800845a:	9801      	ldr	r0, [sp, #4]
 800845c:	462a      	mov	r2, r5
 800845e:	f000 fc21 	bl	8008ca4 <__lshift>
 8008462:	1b7f      	subs	r7, r7, r5
 8008464:	4604      	mov	r4, r0
 8008466:	f100 0a14 	add.w	sl, r0, #20
 800846a:	f04f 0900 	mov.w	r9, #0
 800846e:	e7b8      	b.n	80083e2 <__gethex+0x1b6>
 8008470:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008474:	42bd      	cmp	r5, r7
 8008476:	dd6f      	ble.n	8008558 <__gethex+0x32c>
 8008478:	1bed      	subs	r5, r5, r7
 800847a:	42ae      	cmp	r6, r5
 800847c:	dc34      	bgt.n	80084e8 <__gethex+0x2bc>
 800847e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008482:	2b02      	cmp	r3, #2
 8008484:	d022      	beq.n	80084cc <__gethex+0x2a0>
 8008486:	2b03      	cmp	r3, #3
 8008488:	d024      	beq.n	80084d4 <__gethex+0x2a8>
 800848a:	2b01      	cmp	r3, #1
 800848c:	d115      	bne.n	80084ba <__gethex+0x28e>
 800848e:	42ae      	cmp	r6, r5
 8008490:	d113      	bne.n	80084ba <__gethex+0x28e>
 8008492:	2e01      	cmp	r6, #1
 8008494:	d10b      	bne.n	80084ae <__gethex+0x282>
 8008496:	9a02      	ldr	r2, [sp, #8]
 8008498:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800849c:	6013      	str	r3, [r2, #0]
 800849e:	2301      	movs	r3, #1
 80084a0:	6123      	str	r3, [r4, #16]
 80084a2:	f8ca 3000 	str.w	r3, [sl]
 80084a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084a8:	2562      	movs	r5, #98	@ 0x62
 80084aa:	601c      	str	r4, [r3, #0]
 80084ac:	e73a      	b.n	8008324 <__gethex+0xf8>
 80084ae:	1e71      	subs	r1, r6, #1
 80084b0:	4620      	mov	r0, r4
 80084b2:	f000 fe30 	bl	8009116 <__any_on>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	d1ed      	bne.n	8008496 <__gethex+0x26a>
 80084ba:	9801      	ldr	r0, [sp, #4]
 80084bc:	4621      	mov	r1, r4
 80084be:	f000 f9d9 	bl	8008874 <_Bfree>
 80084c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084c4:	2300      	movs	r3, #0
 80084c6:	6013      	str	r3, [r2, #0]
 80084c8:	2550      	movs	r5, #80	@ 0x50
 80084ca:	e72b      	b.n	8008324 <__gethex+0xf8>
 80084cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1f3      	bne.n	80084ba <__gethex+0x28e>
 80084d2:	e7e0      	b.n	8008496 <__gethex+0x26a>
 80084d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1dd      	bne.n	8008496 <__gethex+0x26a>
 80084da:	e7ee      	b.n	80084ba <__gethex+0x28e>
 80084dc:	0800a5a4 	.word	0x0800a5a4
 80084e0:	0800a7af 	.word	0x0800a7af
 80084e4:	0800a7c0 	.word	0x0800a7c0
 80084e8:	1e6f      	subs	r7, r5, #1
 80084ea:	f1b9 0f00 	cmp.w	r9, #0
 80084ee:	d130      	bne.n	8008552 <__gethex+0x326>
 80084f0:	b127      	cbz	r7, 80084fc <__gethex+0x2d0>
 80084f2:	4639      	mov	r1, r7
 80084f4:	4620      	mov	r0, r4
 80084f6:	f000 fe0e 	bl	8009116 <__any_on>
 80084fa:	4681      	mov	r9, r0
 80084fc:	117a      	asrs	r2, r7, #5
 80084fe:	2301      	movs	r3, #1
 8008500:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008504:	f007 071f 	and.w	r7, r7, #31
 8008508:	40bb      	lsls	r3, r7
 800850a:	4213      	tst	r3, r2
 800850c:	4629      	mov	r1, r5
 800850e:	4620      	mov	r0, r4
 8008510:	bf18      	it	ne
 8008512:	f049 0902 	orrne.w	r9, r9, #2
 8008516:	f7ff fe21 	bl	800815c <rshift>
 800851a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800851e:	1b76      	subs	r6, r6, r5
 8008520:	2502      	movs	r5, #2
 8008522:	f1b9 0f00 	cmp.w	r9, #0
 8008526:	d047      	beq.n	80085b8 <__gethex+0x38c>
 8008528:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800852c:	2b02      	cmp	r3, #2
 800852e:	d015      	beq.n	800855c <__gethex+0x330>
 8008530:	2b03      	cmp	r3, #3
 8008532:	d017      	beq.n	8008564 <__gethex+0x338>
 8008534:	2b01      	cmp	r3, #1
 8008536:	d109      	bne.n	800854c <__gethex+0x320>
 8008538:	f019 0f02 	tst.w	r9, #2
 800853c:	d006      	beq.n	800854c <__gethex+0x320>
 800853e:	f8da 3000 	ldr.w	r3, [sl]
 8008542:	ea49 0903 	orr.w	r9, r9, r3
 8008546:	f019 0f01 	tst.w	r9, #1
 800854a:	d10e      	bne.n	800856a <__gethex+0x33e>
 800854c:	f045 0510 	orr.w	r5, r5, #16
 8008550:	e032      	b.n	80085b8 <__gethex+0x38c>
 8008552:	f04f 0901 	mov.w	r9, #1
 8008556:	e7d1      	b.n	80084fc <__gethex+0x2d0>
 8008558:	2501      	movs	r5, #1
 800855a:	e7e2      	b.n	8008522 <__gethex+0x2f6>
 800855c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800855e:	f1c3 0301 	rsb	r3, r3, #1
 8008562:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008566:	2b00      	cmp	r3, #0
 8008568:	d0f0      	beq.n	800854c <__gethex+0x320>
 800856a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800856e:	f104 0314 	add.w	r3, r4, #20
 8008572:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008576:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800857a:	f04f 0c00 	mov.w	ip, #0
 800857e:	4618      	mov	r0, r3
 8008580:	f853 2b04 	ldr.w	r2, [r3], #4
 8008584:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008588:	d01b      	beq.n	80085c2 <__gethex+0x396>
 800858a:	3201      	adds	r2, #1
 800858c:	6002      	str	r2, [r0, #0]
 800858e:	2d02      	cmp	r5, #2
 8008590:	f104 0314 	add.w	r3, r4, #20
 8008594:	d13c      	bne.n	8008610 <__gethex+0x3e4>
 8008596:	f8d8 2000 	ldr.w	r2, [r8]
 800859a:	3a01      	subs	r2, #1
 800859c:	42b2      	cmp	r2, r6
 800859e:	d109      	bne.n	80085b4 <__gethex+0x388>
 80085a0:	1171      	asrs	r1, r6, #5
 80085a2:	2201      	movs	r2, #1
 80085a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80085a8:	f006 061f 	and.w	r6, r6, #31
 80085ac:	fa02 f606 	lsl.w	r6, r2, r6
 80085b0:	421e      	tst	r6, r3
 80085b2:	d13a      	bne.n	800862a <__gethex+0x3fe>
 80085b4:	f045 0520 	orr.w	r5, r5, #32
 80085b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085ba:	601c      	str	r4, [r3, #0]
 80085bc:	9b02      	ldr	r3, [sp, #8]
 80085be:	601f      	str	r7, [r3, #0]
 80085c0:	e6b0      	b.n	8008324 <__gethex+0xf8>
 80085c2:	4299      	cmp	r1, r3
 80085c4:	f843 cc04 	str.w	ip, [r3, #-4]
 80085c8:	d8d9      	bhi.n	800857e <__gethex+0x352>
 80085ca:	68a3      	ldr	r3, [r4, #8]
 80085cc:	459b      	cmp	fp, r3
 80085ce:	db17      	blt.n	8008600 <__gethex+0x3d4>
 80085d0:	6861      	ldr	r1, [r4, #4]
 80085d2:	9801      	ldr	r0, [sp, #4]
 80085d4:	3101      	adds	r1, #1
 80085d6:	f000 f90d 	bl	80087f4 <_Balloc>
 80085da:	4681      	mov	r9, r0
 80085dc:	b918      	cbnz	r0, 80085e6 <__gethex+0x3ba>
 80085de:	4b1a      	ldr	r3, [pc, #104]	@ (8008648 <__gethex+0x41c>)
 80085e0:	4602      	mov	r2, r0
 80085e2:	2184      	movs	r1, #132	@ 0x84
 80085e4:	e6c5      	b.n	8008372 <__gethex+0x146>
 80085e6:	6922      	ldr	r2, [r4, #16]
 80085e8:	3202      	adds	r2, #2
 80085ea:	f104 010c 	add.w	r1, r4, #12
 80085ee:	0092      	lsls	r2, r2, #2
 80085f0:	300c      	adds	r0, #12
 80085f2:	f7fe ff04 	bl	80073fe <memcpy>
 80085f6:	4621      	mov	r1, r4
 80085f8:	9801      	ldr	r0, [sp, #4]
 80085fa:	f000 f93b 	bl	8008874 <_Bfree>
 80085fe:	464c      	mov	r4, r9
 8008600:	6923      	ldr	r3, [r4, #16]
 8008602:	1c5a      	adds	r2, r3, #1
 8008604:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008608:	6122      	str	r2, [r4, #16]
 800860a:	2201      	movs	r2, #1
 800860c:	615a      	str	r2, [r3, #20]
 800860e:	e7be      	b.n	800858e <__gethex+0x362>
 8008610:	6922      	ldr	r2, [r4, #16]
 8008612:	455a      	cmp	r2, fp
 8008614:	dd0b      	ble.n	800862e <__gethex+0x402>
 8008616:	2101      	movs	r1, #1
 8008618:	4620      	mov	r0, r4
 800861a:	f7ff fd9f 	bl	800815c <rshift>
 800861e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008622:	3701      	adds	r7, #1
 8008624:	42bb      	cmp	r3, r7
 8008626:	f6ff aee0 	blt.w	80083ea <__gethex+0x1be>
 800862a:	2501      	movs	r5, #1
 800862c:	e7c2      	b.n	80085b4 <__gethex+0x388>
 800862e:	f016 061f 	ands.w	r6, r6, #31
 8008632:	d0fa      	beq.n	800862a <__gethex+0x3fe>
 8008634:	4453      	add	r3, sl
 8008636:	f1c6 0620 	rsb	r6, r6, #32
 800863a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800863e:	f000 f9cb 	bl	80089d8 <__hi0bits>
 8008642:	42b0      	cmp	r0, r6
 8008644:	dbe7      	blt.n	8008616 <__gethex+0x3ea>
 8008646:	e7f0      	b.n	800862a <__gethex+0x3fe>
 8008648:	0800a7af 	.word	0x0800a7af

0800864c <L_shift>:
 800864c:	f1c2 0208 	rsb	r2, r2, #8
 8008650:	0092      	lsls	r2, r2, #2
 8008652:	b570      	push	{r4, r5, r6, lr}
 8008654:	f1c2 0620 	rsb	r6, r2, #32
 8008658:	6843      	ldr	r3, [r0, #4]
 800865a:	6804      	ldr	r4, [r0, #0]
 800865c:	fa03 f506 	lsl.w	r5, r3, r6
 8008660:	432c      	orrs	r4, r5
 8008662:	40d3      	lsrs	r3, r2
 8008664:	6004      	str	r4, [r0, #0]
 8008666:	f840 3f04 	str.w	r3, [r0, #4]!
 800866a:	4288      	cmp	r0, r1
 800866c:	d3f4      	bcc.n	8008658 <L_shift+0xc>
 800866e:	bd70      	pop	{r4, r5, r6, pc}

08008670 <__match>:
 8008670:	b530      	push	{r4, r5, lr}
 8008672:	6803      	ldr	r3, [r0, #0]
 8008674:	3301      	adds	r3, #1
 8008676:	f811 4b01 	ldrb.w	r4, [r1], #1
 800867a:	b914      	cbnz	r4, 8008682 <__match+0x12>
 800867c:	6003      	str	r3, [r0, #0]
 800867e:	2001      	movs	r0, #1
 8008680:	bd30      	pop	{r4, r5, pc}
 8008682:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008686:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800868a:	2d19      	cmp	r5, #25
 800868c:	bf98      	it	ls
 800868e:	3220      	addls	r2, #32
 8008690:	42a2      	cmp	r2, r4
 8008692:	d0f0      	beq.n	8008676 <__match+0x6>
 8008694:	2000      	movs	r0, #0
 8008696:	e7f3      	b.n	8008680 <__match+0x10>

08008698 <__hexnan>:
 8008698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800869c:	680b      	ldr	r3, [r1, #0]
 800869e:	6801      	ldr	r1, [r0, #0]
 80086a0:	115e      	asrs	r6, r3, #5
 80086a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80086a6:	f013 031f 	ands.w	r3, r3, #31
 80086aa:	b087      	sub	sp, #28
 80086ac:	bf18      	it	ne
 80086ae:	3604      	addne	r6, #4
 80086b0:	2500      	movs	r5, #0
 80086b2:	1f37      	subs	r7, r6, #4
 80086b4:	4682      	mov	sl, r0
 80086b6:	4690      	mov	r8, r2
 80086b8:	9301      	str	r3, [sp, #4]
 80086ba:	f846 5c04 	str.w	r5, [r6, #-4]
 80086be:	46b9      	mov	r9, r7
 80086c0:	463c      	mov	r4, r7
 80086c2:	9502      	str	r5, [sp, #8]
 80086c4:	46ab      	mov	fp, r5
 80086c6:	784a      	ldrb	r2, [r1, #1]
 80086c8:	1c4b      	adds	r3, r1, #1
 80086ca:	9303      	str	r3, [sp, #12]
 80086cc:	b342      	cbz	r2, 8008720 <__hexnan+0x88>
 80086ce:	4610      	mov	r0, r2
 80086d0:	9105      	str	r1, [sp, #20]
 80086d2:	9204      	str	r2, [sp, #16]
 80086d4:	f7ff fd94 	bl	8008200 <__hexdig_fun>
 80086d8:	2800      	cmp	r0, #0
 80086da:	d151      	bne.n	8008780 <__hexnan+0xe8>
 80086dc:	9a04      	ldr	r2, [sp, #16]
 80086de:	9905      	ldr	r1, [sp, #20]
 80086e0:	2a20      	cmp	r2, #32
 80086e2:	d818      	bhi.n	8008716 <__hexnan+0x7e>
 80086e4:	9b02      	ldr	r3, [sp, #8]
 80086e6:	459b      	cmp	fp, r3
 80086e8:	dd13      	ble.n	8008712 <__hexnan+0x7a>
 80086ea:	454c      	cmp	r4, r9
 80086ec:	d206      	bcs.n	80086fc <__hexnan+0x64>
 80086ee:	2d07      	cmp	r5, #7
 80086f0:	dc04      	bgt.n	80086fc <__hexnan+0x64>
 80086f2:	462a      	mov	r2, r5
 80086f4:	4649      	mov	r1, r9
 80086f6:	4620      	mov	r0, r4
 80086f8:	f7ff ffa8 	bl	800864c <L_shift>
 80086fc:	4544      	cmp	r4, r8
 80086fe:	d952      	bls.n	80087a6 <__hexnan+0x10e>
 8008700:	2300      	movs	r3, #0
 8008702:	f1a4 0904 	sub.w	r9, r4, #4
 8008706:	f844 3c04 	str.w	r3, [r4, #-4]
 800870a:	f8cd b008 	str.w	fp, [sp, #8]
 800870e:	464c      	mov	r4, r9
 8008710:	461d      	mov	r5, r3
 8008712:	9903      	ldr	r1, [sp, #12]
 8008714:	e7d7      	b.n	80086c6 <__hexnan+0x2e>
 8008716:	2a29      	cmp	r2, #41	@ 0x29
 8008718:	d157      	bne.n	80087ca <__hexnan+0x132>
 800871a:	3102      	adds	r1, #2
 800871c:	f8ca 1000 	str.w	r1, [sl]
 8008720:	f1bb 0f00 	cmp.w	fp, #0
 8008724:	d051      	beq.n	80087ca <__hexnan+0x132>
 8008726:	454c      	cmp	r4, r9
 8008728:	d206      	bcs.n	8008738 <__hexnan+0xa0>
 800872a:	2d07      	cmp	r5, #7
 800872c:	dc04      	bgt.n	8008738 <__hexnan+0xa0>
 800872e:	462a      	mov	r2, r5
 8008730:	4649      	mov	r1, r9
 8008732:	4620      	mov	r0, r4
 8008734:	f7ff ff8a 	bl	800864c <L_shift>
 8008738:	4544      	cmp	r4, r8
 800873a:	d936      	bls.n	80087aa <__hexnan+0x112>
 800873c:	f1a8 0204 	sub.w	r2, r8, #4
 8008740:	4623      	mov	r3, r4
 8008742:	f853 1b04 	ldr.w	r1, [r3], #4
 8008746:	f842 1f04 	str.w	r1, [r2, #4]!
 800874a:	429f      	cmp	r7, r3
 800874c:	d2f9      	bcs.n	8008742 <__hexnan+0xaa>
 800874e:	1b3b      	subs	r3, r7, r4
 8008750:	f023 0303 	bic.w	r3, r3, #3
 8008754:	3304      	adds	r3, #4
 8008756:	3401      	adds	r4, #1
 8008758:	3e03      	subs	r6, #3
 800875a:	42b4      	cmp	r4, r6
 800875c:	bf88      	it	hi
 800875e:	2304      	movhi	r3, #4
 8008760:	4443      	add	r3, r8
 8008762:	2200      	movs	r2, #0
 8008764:	f843 2b04 	str.w	r2, [r3], #4
 8008768:	429f      	cmp	r7, r3
 800876a:	d2fb      	bcs.n	8008764 <__hexnan+0xcc>
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	b91b      	cbnz	r3, 8008778 <__hexnan+0xe0>
 8008770:	4547      	cmp	r7, r8
 8008772:	d128      	bne.n	80087c6 <__hexnan+0x12e>
 8008774:	2301      	movs	r3, #1
 8008776:	603b      	str	r3, [r7, #0]
 8008778:	2005      	movs	r0, #5
 800877a:	b007      	add	sp, #28
 800877c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008780:	3501      	adds	r5, #1
 8008782:	2d08      	cmp	r5, #8
 8008784:	f10b 0b01 	add.w	fp, fp, #1
 8008788:	dd06      	ble.n	8008798 <__hexnan+0x100>
 800878a:	4544      	cmp	r4, r8
 800878c:	d9c1      	bls.n	8008712 <__hexnan+0x7a>
 800878e:	2300      	movs	r3, #0
 8008790:	f844 3c04 	str.w	r3, [r4, #-4]
 8008794:	2501      	movs	r5, #1
 8008796:	3c04      	subs	r4, #4
 8008798:	6822      	ldr	r2, [r4, #0]
 800879a:	f000 000f 	and.w	r0, r0, #15
 800879e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80087a2:	6020      	str	r0, [r4, #0]
 80087a4:	e7b5      	b.n	8008712 <__hexnan+0x7a>
 80087a6:	2508      	movs	r5, #8
 80087a8:	e7b3      	b.n	8008712 <__hexnan+0x7a>
 80087aa:	9b01      	ldr	r3, [sp, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d0dd      	beq.n	800876c <__hexnan+0xd4>
 80087b0:	f1c3 0320 	rsb	r3, r3, #32
 80087b4:	f04f 32ff 	mov.w	r2, #4294967295
 80087b8:	40da      	lsrs	r2, r3
 80087ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80087be:	4013      	ands	r3, r2
 80087c0:	f846 3c04 	str.w	r3, [r6, #-4]
 80087c4:	e7d2      	b.n	800876c <__hexnan+0xd4>
 80087c6:	3f04      	subs	r7, #4
 80087c8:	e7d0      	b.n	800876c <__hexnan+0xd4>
 80087ca:	2004      	movs	r0, #4
 80087cc:	e7d5      	b.n	800877a <__hexnan+0xe2>

080087ce <__ascii_mbtowc>:
 80087ce:	b082      	sub	sp, #8
 80087d0:	b901      	cbnz	r1, 80087d4 <__ascii_mbtowc+0x6>
 80087d2:	a901      	add	r1, sp, #4
 80087d4:	b142      	cbz	r2, 80087e8 <__ascii_mbtowc+0x1a>
 80087d6:	b14b      	cbz	r3, 80087ec <__ascii_mbtowc+0x1e>
 80087d8:	7813      	ldrb	r3, [r2, #0]
 80087da:	600b      	str	r3, [r1, #0]
 80087dc:	7812      	ldrb	r2, [r2, #0]
 80087de:	1e10      	subs	r0, r2, #0
 80087e0:	bf18      	it	ne
 80087e2:	2001      	movne	r0, #1
 80087e4:	b002      	add	sp, #8
 80087e6:	4770      	bx	lr
 80087e8:	4610      	mov	r0, r2
 80087ea:	e7fb      	b.n	80087e4 <__ascii_mbtowc+0x16>
 80087ec:	f06f 0001 	mvn.w	r0, #1
 80087f0:	e7f8      	b.n	80087e4 <__ascii_mbtowc+0x16>
	...

080087f4 <_Balloc>:
 80087f4:	b570      	push	{r4, r5, r6, lr}
 80087f6:	69c6      	ldr	r6, [r0, #28]
 80087f8:	4604      	mov	r4, r0
 80087fa:	460d      	mov	r5, r1
 80087fc:	b976      	cbnz	r6, 800881c <_Balloc+0x28>
 80087fe:	2010      	movs	r0, #16
 8008800:	f7fc ff40 	bl	8005684 <malloc>
 8008804:	4602      	mov	r2, r0
 8008806:	61e0      	str	r0, [r4, #28]
 8008808:	b920      	cbnz	r0, 8008814 <_Balloc+0x20>
 800880a:	4b18      	ldr	r3, [pc, #96]	@ (800886c <_Balloc+0x78>)
 800880c:	4818      	ldr	r0, [pc, #96]	@ (8008870 <_Balloc+0x7c>)
 800880e:	216b      	movs	r1, #107	@ 0x6b
 8008810:	f001 fc28 	bl	800a064 <__assert_func>
 8008814:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008818:	6006      	str	r6, [r0, #0]
 800881a:	60c6      	str	r6, [r0, #12]
 800881c:	69e6      	ldr	r6, [r4, #28]
 800881e:	68f3      	ldr	r3, [r6, #12]
 8008820:	b183      	cbz	r3, 8008844 <_Balloc+0x50>
 8008822:	69e3      	ldr	r3, [r4, #28]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800882a:	b9b8      	cbnz	r0, 800885c <_Balloc+0x68>
 800882c:	2101      	movs	r1, #1
 800882e:	fa01 f605 	lsl.w	r6, r1, r5
 8008832:	1d72      	adds	r2, r6, #5
 8008834:	0092      	lsls	r2, r2, #2
 8008836:	4620      	mov	r0, r4
 8008838:	f001 fc32 	bl	800a0a0 <_calloc_r>
 800883c:	b160      	cbz	r0, 8008858 <_Balloc+0x64>
 800883e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008842:	e00e      	b.n	8008862 <_Balloc+0x6e>
 8008844:	2221      	movs	r2, #33	@ 0x21
 8008846:	2104      	movs	r1, #4
 8008848:	4620      	mov	r0, r4
 800884a:	f001 fc29 	bl	800a0a0 <_calloc_r>
 800884e:	69e3      	ldr	r3, [r4, #28]
 8008850:	60f0      	str	r0, [r6, #12]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d1e4      	bne.n	8008822 <_Balloc+0x2e>
 8008858:	2000      	movs	r0, #0
 800885a:	bd70      	pop	{r4, r5, r6, pc}
 800885c:	6802      	ldr	r2, [r0, #0]
 800885e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008862:	2300      	movs	r3, #0
 8008864:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008868:	e7f7      	b.n	800885a <_Balloc+0x66>
 800886a:	bf00      	nop
 800886c:	0800a740 	.word	0x0800a740
 8008870:	0800a820 	.word	0x0800a820

08008874 <_Bfree>:
 8008874:	b570      	push	{r4, r5, r6, lr}
 8008876:	69c6      	ldr	r6, [r0, #28]
 8008878:	4605      	mov	r5, r0
 800887a:	460c      	mov	r4, r1
 800887c:	b976      	cbnz	r6, 800889c <_Bfree+0x28>
 800887e:	2010      	movs	r0, #16
 8008880:	f7fc ff00 	bl	8005684 <malloc>
 8008884:	4602      	mov	r2, r0
 8008886:	61e8      	str	r0, [r5, #28]
 8008888:	b920      	cbnz	r0, 8008894 <_Bfree+0x20>
 800888a:	4b09      	ldr	r3, [pc, #36]	@ (80088b0 <_Bfree+0x3c>)
 800888c:	4809      	ldr	r0, [pc, #36]	@ (80088b4 <_Bfree+0x40>)
 800888e:	218f      	movs	r1, #143	@ 0x8f
 8008890:	f001 fbe8 	bl	800a064 <__assert_func>
 8008894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008898:	6006      	str	r6, [r0, #0]
 800889a:	60c6      	str	r6, [r0, #12]
 800889c:	b13c      	cbz	r4, 80088ae <_Bfree+0x3a>
 800889e:	69eb      	ldr	r3, [r5, #28]
 80088a0:	6862      	ldr	r2, [r4, #4]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088a8:	6021      	str	r1, [r4, #0]
 80088aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088ae:	bd70      	pop	{r4, r5, r6, pc}
 80088b0:	0800a740 	.word	0x0800a740
 80088b4:	0800a820 	.word	0x0800a820

080088b8 <__multadd>:
 80088b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088bc:	690d      	ldr	r5, [r1, #16]
 80088be:	4607      	mov	r7, r0
 80088c0:	460c      	mov	r4, r1
 80088c2:	461e      	mov	r6, r3
 80088c4:	f101 0c14 	add.w	ip, r1, #20
 80088c8:	2000      	movs	r0, #0
 80088ca:	f8dc 3000 	ldr.w	r3, [ip]
 80088ce:	b299      	uxth	r1, r3
 80088d0:	fb02 6101 	mla	r1, r2, r1, r6
 80088d4:	0c1e      	lsrs	r6, r3, #16
 80088d6:	0c0b      	lsrs	r3, r1, #16
 80088d8:	fb02 3306 	mla	r3, r2, r6, r3
 80088dc:	b289      	uxth	r1, r1
 80088de:	3001      	adds	r0, #1
 80088e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80088e4:	4285      	cmp	r5, r0
 80088e6:	f84c 1b04 	str.w	r1, [ip], #4
 80088ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80088ee:	dcec      	bgt.n	80088ca <__multadd+0x12>
 80088f0:	b30e      	cbz	r6, 8008936 <__multadd+0x7e>
 80088f2:	68a3      	ldr	r3, [r4, #8]
 80088f4:	42ab      	cmp	r3, r5
 80088f6:	dc19      	bgt.n	800892c <__multadd+0x74>
 80088f8:	6861      	ldr	r1, [r4, #4]
 80088fa:	4638      	mov	r0, r7
 80088fc:	3101      	adds	r1, #1
 80088fe:	f7ff ff79 	bl	80087f4 <_Balloc>
 8008902:	4680      	mov	r8, r0
 8008904:	b928      	cbnz	r0, 8008912 <__multadd+0x5a>
 8008906:	4602      	mov	r2, r0
 8008908:	4b0c      	ldr	r3, [pc, #48]	@ (800893c <__multadd+0x84>)
 800890a:	480d      	ldr	r0, [pc, #52]	@ (8008940 <__multadd+0x88>)
 800890c:	21ba      	movs	r1, #186	@ 0xba
 800890e:	f001 fba9 	bl	800a064 <__assert_func>
 8008912:	6922      	ldr	r2, [r4, #16]
 8008914:	3202      	adds	r2, #2
 8008916:	f104 010c 	add.w	r1, r4, #12
 800891a:	0092      	lsls	r2, r2, #2
 800891c:	300c      	adds	r0, #12
 800891e:	f7fe fd6e 	bl	80073fe <memcpy>
 8008922:	4621      	mov	r1, r4
 8008924:	4638      	mov	r0, r7
 8008926:	f7ff ffa5 	bl	8008874 <_Bfree>
 800892a:	4644      	mov	r4, r8
 800892c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008930:	3501      	adds	r5, #1
 8008932:	615e      	str	r6, [r3, #20]
 8008934:	6125      	str	r5, [r4, #16]
 8008936:	4620      	mov	r0, r4
 8008938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800893c:	0800a7af 	.word	0x0800a7af
 8008940:	0800a820 	.word	0x0800a820

08008944 <__s2b>:
 8008944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008948:	460c      	mov	r4, r1
 800894a:	4615      	mov	r5, r2
 800894c:	461f      	mov	r7, r3
 800894e:	2209      	movs	r2, #9
 8008950:	3308      	adds	r3, #8
 8008952:	4606      	mov	r6, r0
 8008954:	fb93 f3f2 	sdiv	r3, r3, r2
 8008958:	2100      	movs	r1, #0
 800895a:	2201      	movs	r2, #1
 800895c:	429a      	cmp	r2, r3
 800895e:	db09      	blt.n	8008974 <__s2b+0x30>
 8008960:	4630      	mov	r0, r6
 8008962:	f7ff ff47 	bl	80087f4 <_Balloc>
 8008966:	b940      	cbnz	r0, 800897a <__s2b+0x36>
 8008968:	4602      	mov	r2, r0
 800896a:	4b19      	ldr	r3, [pc, #100]	@ (80089d0 <__s2b+0x8c>)
 800896c:	4819      	ldr	r0, [pc, #100]	@ (80089d4 <__s2b+0x90>)
 800896e:	21d3      	movs	r1, #211	@ 0xd3
 8008970:	f001 fb78 	bl	800a064 <__assert_func>
 8008974:	0052      	lsls	r2, r2, #1
 8008976:	3101      	adds	r1, #1
 8008978:	e7f0      	b.n	800895c <__s2b+0x18>
 800897a:	9b08      	ldr	r3, [sp, #32]
 800897c:	6143      	str	r3, [r0, #20]
 800897e:	2d09      	cmp	r5, #9
 8008980:	f04f 0301 	mov.w	r3, #1
 8008984:	6103      	str	r3, [r0, #16]
 8008986:	dd16      	ble.n	80089b6 <__s2b+0x72>
 8008988:	f104 0909 	add.w	r9, r4, #9
 800898c:	46c8      	mov	r8, r9
 800898e:	442c      	add	r4, r5
 8008990:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008994:	4601      	mov	r1, r0
 8008996:	3b30      	subs	r3, #48	@ 0x30
 8008998:	220a      	movs	r2, #10
 800899a:	4630      	mov	r0, r6
 800899c:	f7ff ff8c 	bl	80088b8 <__multadd>
 80089a0:	45a0      	cmp	r8, r4
 80089a2:	d1f5      	bne.n	8008990 <__s2b+0x4c>
 80089a4:	f1a5 0408 	sub.w	r4, r5, #8
 80089a8:	444c      	add	r4, r9
 80089aa:	1b2d      	subs	r5, r5, r4
 80089ac:	1963      	adds	r3, r4, r5
 80089ae:	42bb      	cmp	r3, r7
 80089b0:	db04      	blt.n	80089bc <__s2b+0x78>
 80089b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089b6:	340a      	adds	r4, #10
 80089b8:	2509      	movs	r5, #9
 80089ba:	e7f6      	b.n	80089aa <__s2b+0x66>
 80089bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80089c0:	4601      	mov	r1, r0
 80089c2:	3b30      	subs	r3, #48	@ 0x30
 80089c4:	220a      	movs	r2, #10
 80089c6:	4630      	mov	r0, r6
 80089c8:	f7ff ff76 	bl	80088b8 <__multadd>
 80089cc:	e7ee      	b.n	80089ac <__s2b+0x68>
 80089ce:	bf00      	nop
 80089d0:	0800a7af 	.word	0x0800a7af
 80089d4:	0800a820 	.word	0x0800a820

080089d8 <__hi0bits>:
 80089d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80089dc:	4603      	mov	r3, r0
 80089de:	bf36      	itet	cc
 80089e0:	0403      	lslcc	r3, r0, #16
 80089e2:	2000      	movcs	r0, #0
 80089e4:	2010      	movcc	r0, #16
 80089e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089ea:	bf3c      	itt	cc
 80089ec:	021b      	lslcc	r3, r3, #8
 80089ee:	3008      	addcc	r0, #8
 80089f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089f4:	bf3c      	itt	cc
 80089f6:	011b      	lslcc	r3, r3, #4
 80089f8:	3004      	addcc	r0, #4
 80089fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089fe:	bf3c      	itt	cc
 8008a00:	009b      	lslcc	r3, r3, #2
 8008a02:	3002      	addcc	r0, #2
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	db05      	blt.n	8008a14 <__hi0bits+0x3c>
 8008a08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008a0c:	f100 0001 	add.w	r0, r0, #1
 8008a10:	bf08      	it	eq
 8008a12:	2020      	moveq	r0, #32
 8008a14:	4770      	bx	lr

08008a16 <__lo0bits>:
 8008a16:	6803      	ldr	r3, [r0, #0]
 8008a18:	4602      	mov	r2, r0
 8008a1a:	f013 0007 	ands.w	r0, r3, #7
 8008a1e:	d00b      	beq.n	8008a38 <__lo0bits+0x22>
 8008a20:	07d9      	lsls	r1, r3, #31
 8008a22:	d421      	bmi.n	8008a68 <__lo0bits+0x52>
 8008a24:	0798      	lsls	r0, r3, #30
 8008a26:	bf49      	itett	mi
 8008a28:	085b      	lsrmi	r3, r3, #1
 8008a2a:	089b      	lsrpl	r3, r3, #2
 8008a2c:	2001      	movmi	r0, #1
 8008a2e:	6013      	strmi	r3, [r2, #0]
 8008a30:	bf5c      	itt	pl
 8008a32:	6013      	strpl	r3, [r2, #0]
 8008a34:	2002      	movpl	r0, #2
 8008a36:	4770      	bx	lr
 8008a38:	b299      	uxth	r1, r3
 8008a3a:	b909      	cbnz	r1, 8008a40 <__lo0bits+0x2a>
 8008a3c:	0c1b      	lsrs	r3, r3, #16
 8008a3e:	2010      	movs	r0, #16
 8008a40:	b2d9      	uxtb	r1, r3
 8008a42:	b909      	cbnz	r1, 8008a48 <__lo0bits+0x32>
 8008a44:	3008      	adds	r0, #8
 8008a46:	0a1b      	lsrs	r3, r3, #8
 8008a48:	0719      	lsls	r1, r3, #28
 8008a4a:	bf04      	itt	eq
 8008a4c:	091b      	lsreq	r3, r3, #4
 8008a4e:	3004      	addeq	r0, #4
 8008a50:	0799      	lsls	r1, r3, #30
 8008a52:	bf04      	itt	eq
 8008a54:	089b      	lsreq	r3, r3, #2
 8008a56:	3002      	addeq	r0, #2
 8008a58:	07d9      	lsls	r1, r3, #31
 8008a5a:	d403      	bmi.n	8008a64 <__lo0bits+0x4e>
 8008a5c:	085b      	lsrs	r3, r3, #1
 8008a5e:	f100 0001 	add.w	r0, r0, #1
 8008a62:	d003      	beq.n	8008a6c <__lo0bits+0x56>
 8008a64:	6013      	str	r3, [r2, #0]
 8008a66:	4770      	bx	lr
 8008a68:	2000      	movs	r0, #0
 8008a6a:	4770      	bx	lr
 8008a6c:	2020      	movs	r0, #32
 8008a6e:	4770      	bx	lr

08008a70 <__i2b>:
 8008a70:	b510      	push	{r4, lr}
 8008a72:	460c      	mov	r4, r1
 8008a74:	2101      	movs	r1, #1
 8008a76:	f7ff febd 	bl	80087f4 <_Balloc>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	b928      	cbnz	r0, 8008a8a <__i2b+0x1a>
 8008a7e:	4b05      	ldr	r3, [pc, #20]	@ (8008a94 <__i2b+0x24>)
 8008a80:	4805      	ldr	r0, [pc, #20]	@ (8008a98 <__i2b+0x28>)
 8008a82:	f240 1145 	movw	r1, #325	@ 0x145
 8008a86:	f001 faed 	bl	800a064 <__assert_func>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	6144      	str	r4, [r0, #20]
 8008a8e:	6103      	str	r3, [r0, #16]
 8008a90:	bd10      	pop	{r4, pc}
 8008a92:	bf00      	nop
 8008a94:	0800a7af 	.word	0x0800a7af
 8008a98:	0800a820 	.word	0x0800a820

08008a9c <__multiply>:
 8008a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa0:	4614      	mov	r4, r2
 8008aa2:	690a      	ldr	r2, [r1, #16]
 8008aa4:	6923      	ldr	r3, [r4, #16]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	bfa8      	it	ge
 8008aaa:	4623      	movge	r3, r4
 8008aac:	460f      	mov	r7, r1
 8008aae:	bfa4      	itt	ge
 8008ab0:	460c      	movge	r4, r1
 8008ab2:	461f      	movge	r7, r3
 8008ab4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008ab8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008abc:	68a3      	ldr	r3, [r4, #8]
 8008abe:	6861      	ldr	r1, [r4, #4]
 8008ac0:	eb0a 0609 	add.w	r6, sl, r9
 8008ac4:	42b3      	cmp	r3, r6
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	bfb8      	it	lt
 8008aca:	3101      	addlt	r1, #1
 8008acc:	f7ff fe92 	bl	80087f4 <_Balloc>
 8008ad0:	b930      	cbnz	r0, 8008ae0 <__multiply+0x44>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	4b44      	ldr	r3, [pc, #272]	@ (8008be8 <__multiply+0x14c>)
 8008ad6:	4845      	ldr	r0, [pc, #276]	@ (8008bec <__multiply+0x150>)
 8008ad8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008adc:	f001 fac2 	bl	800a064 <__assert_func>
 8008ae0:	f100 0514 	add.w	r5, r0, #20
 8008ae4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ae8:	462b      	mov	r3, r5
 8008aea:	2200      	movs	r2, #0
 8008aec:	4543      	cmp	r3, r8
 8008aee:	d321      	bcc.n	8008b34 <__multiply+0x98>
 8008af0:	f107 0114 	add.w	r1, r7, #20
 8008af4:	f104 0214 	add.w	r2, r4, #20
 8008af8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008afc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008b00:	9302      	str	r3, [sp, #8]
 8008b02:	1b13      	subs	r3, r2, r4
 8008b04:	3b15      	subs	r3, #21
 8008b06:	f023 0303 	bic.w	r3, r3, #3
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	f104 0715 	add.w	r7, r4, #21
 8008b10:	42ba      	cmp	r2, r7
 8008b12:	bf38      	it	cc
 8008b14:	2304      	movcc	r3, #4
 8008b16:	9301      	str	r3, [sp, #4]
 8008b18:	9b02      	ldr	r3, [sp, #8]
 8008b1a:	9103      	str	r1, [sp, #12]
 8008b1c:	428b      	cmp	r3, r1
 8008b1e:	d80c      	bhi.n	8008b3a <__multiply+0x9e>
 8008b20:	2e00      	cmp	r6, #0
 8008b22:	dd03      	ble.n	8008b2c <__multiply+0x90>
 8008b24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d05b      	beq.n	8008be4 <__multiply+0x148>
 8008b2c:	6106      	str	r6, [r0, #16]
 8008b2e:	b005      	add	sp, #20
 8008b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b34:	f843 2b04 	str.w	r2, [r3], #4
 8008b38:	e7d8      	b.n	8008aec <__multiply+0x50>
 8008b3a:	f8b1 a000 	ldrh.w	sl, [r1]
 8008b3e:	f1ba 0f00 	cmp.w	sl, #0
 8008b42:	d024      	beq.n	8008b8e <__multiply+0xf2>
 8008b44:	f104 0e14 	add.w	lr, r4, #20
 8008b48:	46a9      	mov	r9, r5
 8008b4a:	f04f 0c00 	mov.w	ip, #0
 8008b4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b52:	f8d9 3000 	ldr.w	r3, [r9]
 8008b56:	fa1f fb87 	uxth.w	fp, r7
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008b60:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008b64:	f8d9 7000 	ldr.w	r7, [r9]
 8008b68:	4463      	add	r3, ip
 8008b6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008b6e:	fb0a c70b 	mla	r7, sl, fp, ip
 8008b72:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b7c:	4572      	cmp	r2, lr
 8008b7e:	f849 3b04 	str.w	r3, [r9], #4
 8008b82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008b86:	d8e2      	bhi.n	8008b4e <__multiply+0xb2>
 8008b88:	9b01      	ldr	r3, [sp, #4]
 8008b8a:	f845 c003 	str.w	ip, [r5, r3]
 8008b8e:	9b03      	ldr	r3, [sp, #12]
 8008b90:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008b94:	3104      	adds	r1, #4
 8008b96:	f1b9 0f00 	cmp.w	r9, #0
 8008b9a:	d021      	beq.n	8008be0 <__multiply+0x144>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	f104 0c14 	add.w	ip, r4, #20
 8008ba2:	46ae      	mov	lr, r5
 8008ba4:	f04f 0a00 	mov.w	sl, #0
 8008ba8:	f8bc b000 	ldrh.w	fp, [ip]
 8008bac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008bb0:	fb09 770b 	mla	r7, r9, fp, r7
 8008bb4:	4457      	add	r7, sl
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008bbc:	f84e 3b04 	str.w	r3, [lr], #4
 8008bc0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008bc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bc8:	f8be 3000 	ldrh.w	r3, [lr]
 8008bcc:	fb09 330a 	mla	r3, r9, sl, r3
 8008bd0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008bd4:	4562      	cmp	r2, ip
 8008bd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bda:	d8e5      	bhi.n	8008ba8 <__multiply+0x10c>
 8008bdc:	9f01      	ldr	r7, [sp, #4]
 8008bde:	51eb      	str	r3, [r5, r7]
 8008be0:	3504      	adds	r5, #4
 8008be2:	e799      	b.n	8008b18 <__multiply+0x7c>
 8008be4:	3e01      	subs	r6, #1
 8008be6:	e79b      	b.n	8008b20 <__multiply+0x84>
 8008be8:	0800a7af 	.word	0x0800a7af
 8008bec:	0800a820 	.word	0x0800a820

08008bf0 <__pow5mult>:
 8008bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bf4:	4615      	mov	r5, r2
 8008bf6:	f012 0203 	ands.w	r2, r2, #3
 8008bfa:	4607      	mov	r7, r0
 8008bfc:	460e      	mov	r6, r1
 8008bfe:	d007      	beq.n	8008c10 <__pow5mult+0x20>
 8008c00:	4c25      	ldr	r4, [pc, #148]	@ (8008c98 <__pow5mult+0xa8>)
 8008c02:	3a01      	subs	r2, #1
 8008c04:	2300      	movs	r3, #0
 8008c06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c0a:	f7ff fe55 	bl	80088b8 <__multadd>
 8008c0e:	4606      	mov	r6, r0
 8008c10:	10ad      	asrs	r5, r5, #2
 8008c12:	d03d      	beq.n	8008c90 <__pow5mult+0xa0>
 8008c14:	69fc      	ldr	r4, [r7, #28]
 8008c16:	b97c      	cbnz	r4, 8008c38 <__pow5mult+0x48>
 8008c18:	2010      	movs	r0, #16
 8008c1a:	f7fc fd33 	bl	8005684 <malloc>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	61f8      	str	r0, [r7, #28]
 8008c22:	b928      	cbnz	r0, 8008c30 <__pow5mult+0x40>
 8008c24:	4b1d      	ldr	r3, [pc, #116]	@ (8008c9c <__pow5mult+0xac>)
 8008c26:	481e      	ldr	r0, [pc, #120]	@ (8008ca0 <__pow5mult+0xb0>)
 8008c28:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008c2c:	f001 fa1a 	bl	800a064 <__assert_func>
 8008c30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c34:	6004      	str	r4, [r0, #0]
 8008c36:	60c4      	str	r4, [r0, #12]
 8008c38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008c3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c40:	b94c      	cbnz	r4, 8008c56 <__pow5mult+0x66>
 8008c42:	f240 2171 	movw	r1, #625	@ 0x271
 8008c46:	4638      	mov	r0, r7
 8008c48:	f7ff ff12 	bl	8008a70 <__i2b>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c52:	4604      	mov	r4, r0
 8008c54:	6003      	str	r3, [r0, #0]
 8008c56:	f04f 0900 	mov.w	r9, #0
 8008c5a:	07eb      	lsls	r3, r5, #31
 8008c5c:	d50a      	bpl.n	8008c74 <__pow5mult+0x84>
 8008c5e:	4631      	mov	r1, r6
 8008c60:	4622      	mov	r2, r4
 8008c62:	4638      	mov	r0, r7
 8008c64:	f7ff ff1a 	bl	8008a9c <__multiply>
 8008c68:	4631      	mov	r1, r6
 8008c6a:	4680      	mov	r8, r0
 8008c6c:	4638      	mov	r0, r7
 8008c6e:	f7ff fe01 	bl	8008874 <_Bfree>
 8008c72:	4646      	mov	r6, r8
 8008c74:	106d      	asrs	r5, r5, #1
 8008c76:	d00b      	beq.n	8008c90 <__pow5mult+0xa0>
 8008c78:	6820      	ldr	r0, [r4, #0]
 8008c7a:	b938      	cbnz	r0, 8008c8c <__pow5mult+0x9c>
 8008c7c:	4622      	mov	r2, r4
 8008c7e:	4621      	mov	r1, r4
 8008c80:	4638      	mov	r0, r7
 8008c82:	f7ff ff0b 	bl	8008a9c <__multiply>
 8008c86:	6020      	str	r0, [r4, #0]
 8008c88:	f8c0 9000 	str.w	r9, [r0]
 8008c8c:	4604      	mov	r4, r0
 8008c8e:	e7e4      	b.n	8008c5a <__pow5mult+0x6a>
 8008c90:	4630      	mov	r0, r6
 8008c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c96:	bf00      	nop
 8008c98:	0800a87c 	.word	0x0800a87c
 8008c9c:	0800a740 	.word	0x0800a740
 8008ca0:	0800a820 	.word	0x0800a820

08008ca4 <__lshift>:
 8008ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca8:	460c      	mov	r4, r1
 8008caa:	6849      	ldr	r1, [r1, #4]
 8008cac:	6923      	ldr	r3, [r4, #16]
 8008cae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cb2:	68a3      	ldr	r3, [r4, #8]
 8008cb4:	4607      	mov	r7, r0
 8008cb6:	4691      	mov	r9, r2
 8008cb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008cbc:	f108 0601 	add.w	r6, r8, #1
 8008cc0:	42b3      	cmp	r3, r6
 8008cc2:	db0b      	blt.n	8008cdc <__lshift+0x38>
 8008cc4:	4638      	mov	r0, r7
 8008cc6:	f7ff fd95 	bl	80087f4 <_Balloc>
 8008cca:	4605      	mov	r5, r0
 8008ccc:	b948      	cbnz	r0, 8008ce2 <__lshift+0x3e>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	4b28      	ldr	r3, [pc, #160]	@ (8008d74 <__lshift+0xd0>)
 8008cd2:	4829      	ldr	r0, [pc, #164]	@ (8008d78 <__lshift+0xd4>)
 8008cd4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008cd8:	f001 f9c4 	bl	800a064 <__assert_func>
 8008cdc:	3101      	adds	r1, #1
 8008cde:	005b      	lsls	r3, r3, #1
 8008ce0:	e7ee      	b.n	8008cc0 <__lshift+0x1c>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	f100 0114 	add.w	r1, r0, #20
 8008ce8:	f100 0210 	add.w	r2, r0, #16
 8008cec:	4618      	mov	r0, r3
 8008cee:	4553      	cmp	r3, sl
 8008cf0:	db33      	blt.n	8008d5a <__lshift+0xb6>
 8008cf2:	6920      	ldr	r0, [r4, #16]
 8008cf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cf8:	f104 0314 	add.w	r3, r4, #20
 8008cfc:	f019 091f 	ands.w	r9, r9, #31
 8008d00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d08:	d02b      	beq.n	8008d62 <__lshift+0xbe>
 8008d0a:	f1c9 0e20 	rsb	lr, r9, #32
 8008d0e:	468a      	mov	sl, r1
 8008d10:	2200      	movs	r2, #0
 8008d12:	6818      	ldr	r0, [r3, #0]
 8008d14:	fa00 f009 	lsl.w	r0, r0, r9
 8008d18:	4310      	orrs	r0, r2
 8008d1a:	f84a 0b04 	str.w	r0, [sl], #4
 8008d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d22:	459c      	cmp	ip, r3
 8008d24:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d28:	d8f3      	bhi.n	8008d12 <__lshift+0x6e>
 8008d2a:	ebac 0304 	sub.w	r3, ip, r4
 8008d2e:	3b15      	subs	r3, #21
 8008d30:	f023 0303 	bic.w	r3, r3, #3
 8008d34:	3304      	adds	r3, #4
 8008d36:	f104 0015 	add.w	r0, r4, #21
 8008d3a:	4584      	cmp	ip, r0
 8008d3c:	bf38      	it	cc
 8008d3e:	2304      	movcc	r3, #4
 8008d40:	50ca      	str	r2, [r1, r3]
 8008d42:	b10a      	cbz	r2, 8008d48 <__lshift+0xa4>
 8008d44:	f108 0602 	add.w	r6, r8, #2
 8008d48:	3e01      	subs	r6, #1
 8008d4a:	4638      	mov	r0, r7
 8008d4c:	612e      	str	r6, [r5, #16]
 8008d4e:	4621      	mov	r1, r4
 8008d50:	f7ff fd90 	bl	8008874 <_Bfree>
 8008d54:	4628      	mov	r0, r5
 8008d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d5e:	3301      	adds	r3, #1
 8008d60:	e7c5      	b.n	8008cee <__lshift+0x4a>
 8008d62:	3904      	subs	r1, #4
 8008d64:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d68:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d6c:	459c      	cmp	ip, r3
 8008d6e:	d8f9      	bhi.n	8008d64 <__lshift+0xc0>
 8008d70:	e7ea      	b.n	8008d48 <__lshift+0xa4>
 8008d72:	bf00      	nop
 8008d74:	0800a7af 	.word	0x0800a7af
 8008d78:	0800a820 	.word	0x0800a820

08008d7c <__mcmp>:
 8008d7c:	690a      	ldr	r2, [r1, #16]
 8008d7e:	4603      	mov	r3, r0
 8008d80:	6900      	ldr	r0, [r0, #16]
 8008d82:	1a80      	subs	r0, r0, r2
 8008d84:	b530      	push	{r4, r5, lr}
 8008d86:	d10e      	bne.n	8008da6 <__mcmp+0x2a>
 8008d88:	3314      	adds	r3, #20
 8008d8a:	3114      	adds	r1, #20
 8008d8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d9c:	4295      	cmp	r5, r2
 8008d9e:	d003      	beq.n	8008da8 <__mcmp+0x2c>
 8008da0:	d205      	bcs.n	8008dae <__mcmp+0x32>
 8008da2:	f04f 30ff 	mov.w	r0, #4294967295
 8008da6:	bd30      	pop	{r4, r5, pc}
 8008da8:	42a3      	cmp	r3, r4
 8008daa:	d3f3      	bcc.n	8008d94 <__mcmp+0x18>
 8008dac:	e7fb      	b.n	8008da6 <__mcmp+0x2a>
 8008dae:	2001      	movs	r0, #1
 8008db0:	e7f9      	b.n	8008da6 <__mcmp+0x2a>
	...

08008db4 <__mdiff>:
 8008db4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db8:	4689      	mov	r9, r1
 8008dba:	4606      	mov	r6, r0
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	4648      	mov	r0, r9
 8008dc0:	4614      	mov	r4, r2
 8008dc2:	f7ff ffdb 	bl	8008d7c <__mcmp>
 8008dc6:	1e05      	subs	r5, r0, #0
 8008dc8:	d112      	bne.n	8008df0 <__mdiff+0x3c>
 8008dca:	4629      	mov	r1, r5
 8008dcc:	4630      	mov	r0, r6
 8008dce:	f7ff fd11 	bl	80087f4 <_Balloc>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	b928      	cbnz	r0, 8008de2 <__mdiff+0x2e>
 8008dd6:	4b3f      	ldr	r3, [pc, #252]	@ (8008ed4 <__mdiff+0x120>)
 8008dd8:	f240 2137 	movw	r1, #567	@ 0x237
 8008ddc:	483e      	ldr	r0, [pc, #248]	@ (8008ed8 <__mdiff+0x124>)
 8008dde:	f001 f941 	bl	800a064 <__assert_func>
 8008de2:	2301      	movs	r3, #1
 8008de4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008de8:	4610      	mov	r0, r2
 8008dea:	b003      	add	sp, #12
 8008dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008df0:	bfbc      	itt	lt
 8008df2:	464b      	movlt	r3, r9
 8008df4:	46a1      	movlt	r9, r4
 8008df6:	4630      	mov	r0, r6
 8008df8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008dfc:	bfba      	itte	lt
 8008dfe:	461c      	movlt	r4, r3
 8008e00:	2501      	movlt	r5, #1
 8008e02:	2500      	movge	r5, #0
 8008e04:	f7ff fcf6 	bl	80087f4 <_Balloc>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	b918      	cbnz	r0, 8008e14 <__mdiff+0x60>
 8008e0c:	4b31      	ldr	r3, [pc, #196]	@ (8008ed4 <__mdiff+0x120>)
 8008e0e:	f240 2145 	movw	r1, #581	@ 0x245
 8008e12:	e7e3      	b.n	8008ddc <__mdiff+0x28>
 8008e14:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008e18:	6926      	ldr	r6, [r4, #16]
 8008e1a:	60c5      	str	r5, [r0, #12]
 8008e1c:	f109 0310 	add.w	r3, r9, #16
 8008e20:	f109 0514 	add.w	r5, r9, #20
 8008e24:	f104 0e14 	add.w	lr, r4, #20
 8008e28:	f100 0b14 	add.w	fp, r0, #20
 8008e2c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008e30:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008e34:	9301      	str	r3, [sp, #4]
 8008e36:	46d9      	mov	r9, fp
 8008e38:	f04f 0c00 	mov.w	ip, #0
 8008e3c:	9b01      	ldr	r3, [sp, #4]
 8008e3e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008e42:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008e46:	9301      	str	r3, [sp, #4]
 8008e48:	fa1f f38a 	uxth.w	r3, sl
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	b283      	uxth	r3, r0
 8008e50:	1acb      	subs	r3, r1, r3
 8008e52:	0c00      	lsrs	r0, r0, #16
 8008e54:	4463      	add	r3, ip
 8008e56:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008e5a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008e64:	4576      	cmp	r6, lr
 8008e66:	f849 3b04 	str.w	r3, [r9], #4
 8008e6a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e6e:	d8e5      	bhi.n	8008e3c <__mdiff+0x88>
 8008e70:	1b33      	subs	r3, r6, r4
 8008e72:	3b15      	subs	r3, #21
 8008e74:	f023 0303 	bic.w	r3, r3, #3
 8008e78:	3415      	adds	r4, #21
 8008e7a:	3304      	adds	r3, #4
 8008e7c:	42a6      	cmp	r6, r4
 8008e7e:	bf38      	it	cc
 8008e80:	2304      	movcc	r3, #4
 8008e82:	441d      	add	r5, r3
 8008e84:	445b      	add	r3, fp
 8008e86:	461e      	mov	r6, r3
 8008e88:	462c      	mov	r4, r5
 8008e8a:	4544      	cmp	r4, r8
 8008e8c:	d30e      	bcc.n	8008eac <__mdiff+0xf8>
 8008e8e:	f108 0103 	add.w	r1, r8, #3
 8008e92:	1b49      	subs	r1, r1, r5
 8008e94:	f021 0103 	bic.w	r1, r1, #3
 8008e98:	3d03      	subs	r5, #3
 8008e9a:	45a8      	cmp	r8, r5
 8008e9c:	bf38      	it	cc
 8008e9e:	2100      	movcc	r1, #0
 8008ea0:	440b      	add	r3, r1
 8008ea2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ea6:	b191      	cbz	r1, 8008ece <__mdiff+0x11a>
 8008ea8:	6117      	str	r7, [r2, #16]
 8008eaa:	e79d      	b.n	8008de8 <__mdiff+0x34>
 8008eac:	f854 1b04 	ldr.w	r1, [r4], #4
 8008eb0:	46e6      	mov	lr, ip
 8008eb2:	0c08      	lsrs	r0, r1, #16
 8008eb4:	fa1c fc81 	uxtah	ip, ip, r1
 8008eb8:	4471      	add	r1, lr
 8008eba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008ebe:	b289      	uxth	r1, r1
 8008ec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ec4:	f846 1b04 	str.w	r1, [r6], #4
 8008ec8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ecc:	e7dd      	b.n	8008e8a <__mdiff+0xd6>
 8008ece:	3f01      	subs	r7, #1
 8008ed0:	e7e7      	b.n	8008ea2 <__mdiff+0xee>
 8008ed2:	bf00      	nop
 8008ed4:	0800a7af 	.word	0x0800a7af
 8008ed8:	0800a820 	.word	0x0800a820

08008edc <__ulp>:
 8008edc:	b082      	sub	sp, #8
 8008ede:	ed8d 0b00 	vstr	d0, [sp]
 8008ee2:	9a01      	ldr	r2, [sp, #4]
 8008ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8008f24 <__ulp+0x48>)
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	dc08      	bgt.n	8008f02 <__ulp+0x26>
 8008ef0:	425b      	negs	r3, r3
 8008ef2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008ef6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008efa:	da04      	bge.n	8008f06 <__ulp+0x2a>
 8008efc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008f00:	4113      	asrs	r3, r2
 8008f02:	2200      	movs	r2, #0
 8008f04:	e008      	b.n	8008f18 <__ulp+0x3c>
 8008f06:	f1a2 0314 	sub.w	r3, r2, #20
 8008f0a:	2b1e      	cmp	r3, #30
 8008f0c:	bfda      	itte	le
 8008f0e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008f12:	40da      	lsrle	r2, r3
 8008f14:	2201      	movgt	r2, #1
 8008f16:	2300      	movs	r3, #0
 8008f18:	4619      	mov	r1, r3
 8008f1a:	4610      	mov	r0, r2
 8008f1c:	ec41 0b10 	vmov	d0, r0, r1
 8008f20:	b002      	add	sp, #8
 8008f22:	4770      	bx	lr
 8008f24:	7ff00000 	.word	0x7ff00000

08008f28 <__b2d>:
 8008f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f2c:	6906      	ldr	r6, [r0, #16]
 8008f2e:	f100 0814 	add.w	r8, r0, #20
 8008f32:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008f36:	1f37      	subs	r7, r6, #4
 8008f38:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	f7ff fd4b 	bl	80089d8 <__hi0bits>
 8008f42:	f1c0 0320 	rsb	r3, r0, #32
 8008f46:	280a      	cmp	r0, #10
 8008f48:	600b      	str	r3, [r1, #0]
 8008f4a:	491b      	ldr	r1, [pc, #108]	@ (8008fb8 <__b2d+0x90>)
 8008f4c:	dc15      	bgt.n	8008f7a <__b2d+0x52>
 8008f4e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008f52:	fa22 f30c 	lsr.w	r3, r2, ip
 8008f56:	45b8      	cmp	r8, r7
 8008f58:	ea43 0501 	orr.w	r5, r3, r1
 8008f5c:	bf34      	ite	cc
 8008f5e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008f62:	2300      	movcs	r3, #0
 8008f64:	3015      	adds	r0, #21
 8008f66:	fa02 f000 	lsl.w	r0, r2, r0
 8008f6a:	fa23 f30c 	lsr.w	r3, r3, ip
 8008f6e:	4303      	orrs	r3, r0
 8008f70:	461c      	mov	r4, r3
 8008f72:	ec45 4b10 	vmov	d0, r4, r5
 8008f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f7a:	45b8      	cmp	r8, r7
 8008f7c:	bf3a      	itte	cc
 8008f7e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008f82:	f1a6 0708 	subcc.w	r7, r6, #8
 8008f86:	2300      	movcs	r3, #0
 8008f88:	380b      	subs	r0, #11
 8008f8a:	d012      	beq.n	8008fb2 <__b2d+0x8a>
 8008f8c:	f1c0 0120 	rsb	r1, r0, #32
 8008f90:	fa23 f401 	lsr.w	r4, r3, r1
 8008f94:	4082      	lsls	r2, r0
 8008f96:	4322      	orrs	r2, r4
 8008f98:	4547      	cmp	r7, r8
 8008f9a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008f9e:	bf8c      	ite	hi
 8008fa0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008fa4:	2200      	movls	r2, #0
 8008fa6:	4083      	lsls	r3, r0
 8008fa8:	40ca      	lsrs	r2, r1
 8008faa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	e7de      	b.n	8008f70 <__b2d+0x48>
 8008fb2:	ea42 0501 	orr.w	r5, r2, r1
 8008fb6:	e7db      	b.n	8008f70 <__b2d+0x48>
 8008fb8:	3ff00000 	.word	0x3ff00000

08008fbc <__d2b>:
 8008fbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008fc0:	460f      	mov	r7, r1
 8008fc2:	2101      	movs	r1, #1
 8008fc4:	ec59 8b10 	vmov	r8, r9, d0
 8008fc8:	4616      	mov	r6, r2
 8008fca:	f7ff fc13 	bl	80087f4 <_Balloc>
 8008fce:	4604      	mov	r4, r0
 8008fd0:	b930      	cbnz	r0, 8008fe0 <__d2b+0x24>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	4b23      	ldr	r3, [pc, #140]	@ (8009064 <__d2b+0xa8>)
 8008fd6:	4824      	ldr	r0, [pc, #144]	@ (8009068 <__d2b+0xac>)
 8008fd8:	f240 310f 	movw	r1, #783	@ 0x30f
 8008fdc:	f001 f842 	bl	800a064 <__assert_func>
 8008fe0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008fe4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008fe8:	b10d      	cbz	r5, 8008fee <__d2b+0x32>
 8008fea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fee:	9301      	str	r3, [sp, #4]
 8008ff0:	f1b8 0300 	subs.w	r3, r8, #0
 8008ff4:	d023      	beq.n	800903e <__d2b+0x82>
 8008ff6:	4668      	mov	r0, sp
 8008ff8:	9300      	str	r3, [sp, #0]
 8008ffa:	f7ff fd0c 	bl	8008a16 <__lo0bits>
 8008ffe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009002:	b1d0      	cbz	r0, 800903a <__d2b+0x7e>
 8009004:	f1c0 0320 	rsb	r3, r0, #32
 8009008:	fa02 f303 	lsl.w	r3, r2, r3
 800900c:	430b      	orrs	r3, r1
 800900e:	40c2      	lsrs	r2, r0
 8009010:	6163      	str	r3, [r4, #20]
 8009012:	9201      	str	r2, [sp, #4]
 8009014:	9b01      	ldr	r3, [sp, #4]
 8009016:	61a3      	str	r3, [r4, #24]
 8009018:	2b00      	cmp	r3, #0
 800901a:	bf0c      	ite	eq
 800901c:	2201      	moveq	r2, #1
 800901e:	2202      	movne	r2, #2
 8009020:	6122      	str	r2, [r4, #16]
 8009022:	b1a5      	cbz	r5, 800904e <__d2b+0x92>
 8009024:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009028:	4405      	add	r5, r0
 800902a:	603d      	str	r5, [r7, #0]
 800902c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009030:	6030      	str	r0, [r6, #0]
 8009032:	4620      	mov	r0, r4
 8009034:	b003      	add	sp, #12
 8009036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800903a:	6161      	str	r1, [r4, #20]
 800903c:	e7ea      	b.n	8009014 <__d2b+0x58>
 800903e:	a801      	add	r0, sp, #4
 8009040:	f7ff fce9 	bl	8008a16 <__lo0bits>
 8009044:	9b01      	ldr	r3, [sp, #4]
 8009046:	6163      	str	r3, [r4, #20]
 8009048:	3020      	adds	r0, #32
 800904a:	2201      	movs	r2, #1
 800904c:	e7e8      	b.n	8009020 <__d2b+0x64>
 800904e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009052:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009056:	6038      	str	r0, [r7, #0]
 8009058:	6918      	ldr	r0, [r3, #16]
 800905a:	f7ff fcbd 	bl	80089d8 <__hi0bits>
 800905e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009062:	e7e5      	b.n	8009030 <__d2b+0x74>
 8009064:	0800a7af 	.word	0x0800a7af
 8009068:	0800a820 	.word	0x0800a820

0800906c <__ratio>:
 800906c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009070:	b085      	sub	sp, #20
 8009072:	e9cd 1000 	strd	r1, r0, [sp]
 8009076:	a902      	add	r1, sp, #8
 8009078:	f7ff ff56 	bl	8008f28 <__b2d>
 800907c:	9800      	ldr	r0, [sp, #0]
 800907e:	a903      	add	r1, sp, #12
 8009080:	ec55 4b10 	vmov	r4, r5, d0
 8009084:	f7ff ff50 	bl	8008f28 <__b2d>
 8009088:	9b01      	ldr	r3, [sp, #4]
 800908a:	6919      	ldr	r1, [r3, #16]
 800908c:	9b00      	ldr	r3, [sp, #0]
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	1ac9      	subs	r1, r1, r3
 8009092:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009096:	1a9b      	subs	r3, r3, r2
 8009098:	ec5b ab10 	vmov	sl, fp, d0
 800909c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	bfce      	itee	gt
 80090a4:	462a      	movgt	r2, r5
 80090a6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80090aa:	465a      	movle	r2, fp
 80090ac:	462f      	mov	r7, r5
 80090ae:	46d9      	mov	r9, fp
 80090b0:	bfcc      	ite	gt
 80090b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80090b6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80090ba:	464b      	mov	r3, r9
 80090bc:	4652      	mov	r2, sl
 80090be:	4620      	mov	r0, r4
 80090c0:	4639      	mov	r1, r7
 80090c2:	f7f7 fbd3 	bl	800086c <__aeabi_ddiv>
 80090c6:	ec41 0b10 	vmov	d0, r0, r1
 80090ca:	b005      	add	sp, #20
 80090cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090d0 <__copybits>:
 80090d0:	3901      	subs	r1, #1
 80090d2:	b570      	push	{r4, r5, r6, lr}
 80090d4:	1149      	asrs	r1, r1, #5
 80090d6:	6914      	ldr	r4, [r2, #16]
 80090d8:	3101      	adds	r1, #1
 80090da:	f102 0314 	add.w	r3, r2, #20
 80090de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80090e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80090e6:	1f05      	subs	r5, r0, #4
 80090e8:	42a3      	cmp	r3, r4
 80090ea:	d30c      	bcc.n	8009106 <__copybits+0x36>
 80090ec:	1aa3      	subs	r3, r4, r2
 80090ee:	3b11      	subs	r3, #17
 80090f0:	f023 0303 	bic.w	r3, r3, #3
 80090f4:	3211      	adds	r2, #17
 80090f6:	42a2      	cmp	r2, r4
 80090f8:	bf88      	it	hi
 80090fa:	2300      	movhi	r3, #0
 80090fc:	4418      	add	r0, r3
 80090fe:	2300      	movs	r3, #0
 8009100:	4288      	cmp	r0, r1
 8009102:	d305      	bcc.n	8009110 <__copybits+0x40>
 8009104:	bd70      	pop	{r4, r5, r6, pc}
 8009106:	f853 6b04 	ldr.w	r6, [r3], #4
 800910a:	f845 6f04 	str.w	r6, [r5, #4]!
 800910e:	e7eb      	b.n	80090e8 <__copybits+0x18>
 8009110:	f840 3b04 	str.w	r3, [r0], #4
 8009114:	e7f4      	b.n	8009100 <__copybits+0x30>

08009116 <__any_on>:
 8009116:	f100 0214 	add.w	r2, r0, #20
 800911a:	6900      	ldr	r0, [r0, #16]
 800911c:	114b      	asrs	r3, r1, #5
 800911e:	4298      	cmp	r0, r3
 8009120:	b510      	push	{r4, lr}
 8009122:	db11      	blt.n	8009148 <__any_on+0x32>
 8009124:	dd0a      	ble.n	800913c <__any_on+0x26>
 8009126:	f011 011f 	ands.w	r1, r1, #31
 800912a:	d007      	beq.n	800913c <__any_on+0x26>
 800912c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009130:	fa24 f001 	lsr.w	r0, r4, r1
 8009134:	fa00 f101 	lsl.w	r1, r0, r1
 8009138:	428c      	cmp	r4, r1
 800913a:	d10b      	bne.n	8009154 <__any_on+0x3e>
 800913c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009140:	4293      	cmp	r3, r2
 8009142:	d803      	bhi.n	800914c <__any_on+0x36>
 8009144:	2000      	movs	r0, #0
 8009146:	bd10      	pop	{r4, pc}
 8009148:	4603      	mov	r3, r0
 800914a:	e7f7      	b.n	800913c <__any_on+0x26>
 800914c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009150:	2900      	cmp	r1, #0
 8009152:	d0f5      	beq.n	8009140 <__any_on+0x2a>
 8009154:	2001      	movs	r0, #1
 8009156:	e7f6      	b.n	8009146 <__any_on+0x30>

08009158 <_malloc_usable_size_r>:
 8009158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800915c:	1f18      	subs	r0, r3, #4
 800915e:	2b00      	cmp	r3, #0
 8009160:	bfbc      	itt	lt
 8009162:	580b      	ldrlt	r3, [r1, r0]
 8009164:	18c0      	addlt	r0, r0, r3
 8009166:	4770      	bx	lr

08009168 <__ascii_wctomb>:
 8009168:	4603      	mov	r3, r0
 800916a:	4608      	mov	r0, r1
 800916c:	b141      	cbz	r1, 8009180 <__ascii_wctomb+0x18>
 800916e:	2aff      	cmp	r2, #255	@ 0xff
 8009170:	d904      	bls.n	800917c <__ascii_wctomb+0x14>
 8009172:	228a      	movs	r2, #138	@ 0x8a
 8009174:	601a      	str	r2, [r3, #0]
 8009176:	f04f 30ff 	mov.w	r0, #4294967295
 800917a:	4770      	bx	lr
 800917c:	700a      	strb	r2, [r1, #0]
 800917e:	2001      	movs	r0, #1
 8009180:	4770      	bx	lr

08009182 <__ssputs_r>:
 8009182:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009186:	688e      	ldr	r6, [r1, #8]
 8009188:	461f      	mov	r7, r3
 800918a:	42be      	cmp	r6, r7
 800918c:	680b      	ldr	r3, [r1, #0]
 800918e:	4682      	mov	sl, r0
 8009190:	460c      	mov	r4, r1
 8009192:	4690      	mov	r8, r2
 8009194:	d82d      	bhi.n	80091f2 <__ssputs_r+0x70>
 8009196:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800919a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800919e:	d026      	beq.n	80091ee <__ssputs_r+0x6c>
 80091a0:	6965      	ldr	r5, [r4, #20]
 80091a2:	6909      	ldr	r1, [r1, #16]
 80091a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091a8:	eba3 0901 	sub.w	r9, r3, r1
 80091ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091b0:	1c7b      	adds	r3, r7, #1
 80091b2:	444b      	add	r3, r9
 80091b4:	106d      	asrs	r5, r5, #1
 80091b6:	429d      	cmp	r5, r3
 80091b8:	bf38      	it	cc
 80091ba:	461d      	movcc	r5, r3
 80091bc:	0553      	lsls	r3, r2, #21
 80091be:	d527      	bpl.n	8009210 <__ssputs_r+0x8e>
 80091c0:	4629      	mov	r1, r5
 80091c2:	f7fc fa91 	bl	80056e8 <_malloc_r>
 80091c6:	4606      	mov	r6, r0
 80091c8:	b360      	cbz	r0, 8009224 <__ssputs_r+0xa2>
 80091ca:	6921      	ldr	r1, [r4, #16]
 80091cc:	464a      	mov	r2, r9
 80091ce:	f7fe f916 	bl	80073fe <memcpy>
 80091d2:	89a3      	ldrh	r3, [r4, #12]
 80091d4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80091d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091dc:	81a3      	strh	r3, [r4, #12]
 80091de:	6126      	str	r6, [r4, #16]
 80091e0:	6165      	str	r5, [r4, #20]
 80091e2:	444e      	add	r6, r9
 80091e4:	eba5 0509 	sub.w	r5, r5, r9
 80091e8:	6026      	str	r6, [r4, #0]
 80091ea:	60a5      	str	r5, [r4, #8]
 80091ec:	463e      	mov	r6, r7
 80091ee:	42be      	cmp	r6, r7
 80091f0:	d900      	bls.n	80091f4 <__ssputs_r+0x72>
 80091f2:	463e      	mov	r6, r7
 80091f4:	6820      	ldr	r0, [r4, #0]
 80091f6:	4632      	mov	r2, r6
 80091f8:	4641      	mov	r1, r8
 80091fa:	f000 fef6 	bl	8009fea <memmove>
 80091fe:	68a3      	ldr	r3, [r4, #8]
 8009200:	1b9b      	subs	r3, r3, r6
 8009202:	60a3      	str	r3, [r4, #8]
 8009204:	6823      	ldr	r3, [r4, #0]
 8009206:	4433      	add	r3, r6
 8009208:	6023      	str	r3, [r4, #0]
 800920a:	2000      	movs	r0, #0
 800920c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009210:	462a      	mov	r2, r5
 8009212:	f7fc fafd 	bl	8005810 <_realloc_r>
 8009216:	4606      	mov	r6, r0
 8009218:	2800      	cmp	r0, #0
 800921a:	d1e0      	bne.n	80091de <__ssputs_r+0x5c>
 800921c:	6921      	ldr	r1, [r4, #16]
 800921e:	4650      	mov	r0, sl
 8009220:	f7fe ff52 	bl	80080c8 <_free_r>
 8009224:	230c      	movs	r3, #12
 8009226:	f8ca 3000 	str.w	r3, [sl]
 800922a:	89a3      	ldrh	r3, [r4, #12]
 800922c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009230:	81a3      	strh	r3, [r4, #12]
 8009232:	f04f 30ff 	mov.w	r0, #4294967295
 8009236:	e7e9      	b.n	800920c <__ssputs_r+0x8a>

08009238 <_svfiprintf_r>:
 8009238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800923c:	4698      	mov	r8, r3
 800923e:	898b      	ldrh	r3, [r1, #12]
 8009240:	061b      	lsls	r3, r3, #24
 8009242:	b09d      	sub	sp, #116	@ 0x74
 8009244:	4607      	mov	r7, r0
 8009246:	460d      	mov	r5, r1
 8009248:	4614      	mov	r4, r2
 800924a:	d510      	bpl.n	800926e <_svfiprintf_r+0x36>
 800924c:	690b      	ldr	r3, [r1, #16]
 800924e:	b973      	cbnz	r3, 800926e <_svfiprintf_r+0x36>
 8009250:	2140      	movs	r1, #64	@ 0x40
 8009252:	f7fc fa49 	bl	80056e8 <_malloc_r>
 8009256:	6028      	str	r0, [r5, #0]
 8009258:	6128      	str	r0, [r5, #16]
 800925a:	b930      	cbnz	r0, 800926a <_svfiprintf_r+0x32>
 800925c:	230c      	movs	r3, #12
 800925e:	603b      	str	r3, [r7, #0]
 8009260:	f04f 30ff 	mov.w	r0, #4294967295
 8009264:	b01d      	add	sp, #116	@ 0x74
 8009266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926a:	2340      	movs	r3, #64	@ 0x40
 800926c:	616b      	str	r3, [r5, #20]
 800926e:	2300      	movs	r3, #0
 8009270:	9309      	str	r3, [sp, #36]	@ 0x24
 8009272:	2320      	movs	r3, #32
 8009274:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009278:	f8cd 800c 	str.w	r8, [sp, #12]
 800927c:	2330      	movs	r3, #48	@ 0x30
 800927e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800941c <_svfiprintf_r+0x1e4>
 8009282:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009286:	f04f 0901 	mov.w	r9, #1
 800928a:	4623      	mov	r3, r4
 800928c:	469a      	mov	sl, r3
 800928e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009292:	b10a      	cbz	r2, 8009298 <_svfiprintf_r+0x60>
 8009294:	2a25      	cmp	r2, #37	@ 0x25
 8009296:	d1f9      	bne.n	800928c <_svfiprintf_r+0x54>
 8009298:	ebba 0b04 	subs.w	fp, sl, r4
 800929c:	d00b      	beq.n	80092b6 <_svfiprintf_r+0x7e>
 800929e:	465b      	mov	r3, fp
 80092a0:	4622      	mov	r2, r4
 80092a2:	4629      	mov	r1, r5
 80092a4:	4638      	mov	r0, r7
 80092a6:	f7ff ff6c 	bl	8009182 <__ssputs_r>
 80092aa:	3001      	adds	r0, #1
 80092ac:	f000 80a7 	beq.w	80093fe <_svfiprintf_r+0x1c6>
 80092b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092b2:	445a      	add	r2, fp
 80092b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80092b6:	f89a 3000 	ldrb.w	r3, [sl]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f000 809f 	beq.w	80093fe <_svfiprintf_r+0x1c6>
 80092c0:	2300      	movs	r3, #0
 80092c2:	f04f 32ff 	mov.w	r2, #4294967295
 80092c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092ca:	f10a 0a01 	add.w	sl, sl, #1
 80092ce:	9304      	str	r3, [sp, #16]
 80092d0:	9307      	str	r3, [sp, #28]
 80092d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80092d8:	4654      	mov	r4, sl
 80092da:	2205      	movs	r2, #5
 80092dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092e0:	484e      	ldr	r0, [pc, #312]	@ (800941c <_svfiprintf_r+0x1e4>)
 80092e2:	f7f6 ff85 	bl	80001f0 <memchr>
 80092e6:	9a04      	ldr	r2, [sp, #16]
 80092e8:	b9d8      	cbnz	r0, 8009322 <_svfiprintf_r+0xea>
 80092ea:	06d0      	lsls	r0, r2, #27
 80092ec:	bf44      	itt	mi
 80092ee:	2320      	movmi	r3, #32
 80092f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092f4:	0711      	lsls	r1, r2, #28
 80092f6:	bf44      	itt	mi
 80092f8:	232b      	movmi	r3, #43	@ 0x2b
 80092fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009302:	2b2a      	cmp	r3, #42	@ 0x2a
 8009304:	d015      	beq.n	8009332 <_svfiprintf_r+0xfa>
 8009306:	9a07      	ldr	r2, [sp, #28]
 8009308:	4654      	mov	r4, sl
 800930a:	2000      	movs	r0, #0
 800930c:	f04f 0c0a 	mov.w	ip, #10
 8009310:	4621      	mov	r1, r4
 8009312:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009316:	3b30      	subs	r3, #48	@ 0x30
 8009318:	2b09      	cmp	r3, #9
 800931a:	d94b      	bls.n	80093b4 <_svfiprintf_r+0x17c>
 800931c:	b1b0      	cbz	r0, 800934c <_svfiprintf_r+0x114>
 800931e:	9207      	str	r2, [sp, #28]
 8009320:	e014      	b.n	800934c <_svfiprintf_r+0x114>
 8009322:	eba0 0308 	sub.w	r3, r0, r8
 8009326:	fa09 f303 	lsl.w	r3, r9, r3
 800932a:	4313      	orrs	r3, r2
 800932c:	9304      	str	r3, [sp, #16]
 800932e:	46a2      	mov	sl, r4
 8009330:	e7d2      	b.n	80092d8 <_svfiprintf_r+0xa0>
 8009332:	9b03      	ldr	r3, [sp, #12]
 8009334:	1d19      	adds	r1, r3, #4
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	9103      	str	r1, [sp, #12]
 800933a:	2b00      	cmp	r3, #0
 800933c:	bfbb      	ittet	lt
 800933e:	425b      	neglt	r3, r3
 8009340:	f042 0202 	orrlt.w	r2, r2, #2
 8009344:	9307      	strge	r3, [sp, #28]
 8009346:	9307      	strlt	r3, [sp, #28]
 8009348:	bfb8      	it	lt
 800934a:	9204      	strlt	r2, [sp, #16]
 800934c:	7823      	ldrb	r3, [r4, #0]
 800934e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009350:	d10a      	bne.n	8009368 <_svfiprintf_r+0x130>
 8009352:	7863      	ldrb	r3, [r4, #1]
 8009354:	2b2a      	cmp	r3, #42	@ 0x2a
 8009356:	d132      	bne.n	80093be <_svfiprintf_r+0x186>
 8009358:	9b03      	ldr	r3, [sp, #12]
 800935a:	1d1a      	adds	r2, r3, #4
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	9203      	str	r2, [sp, #12]
 8009360:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009364:	3402      	adds	r4, #2
 8009366:	9305      	str	r3, [sp, #20]
 8009368:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800942c <_svfiprintf_r+0x1f4>
 800936c:	7821      	ldrb	r1, [r4, #0]
 800936e:	2203      	movs	r2, #3
 8009370:	4650      	mov	r0, sl
 8009372:	f7f6 ff3d 	bl	80001f0 <memchr>
 8009376:	b138      	cbz	r0, 8009388 <_svfiprintf_r+0x150>
 8009378:	9b04      	ldr	r3, [sp, #16]
 800937a:	eba0 000a 	sub.w	r0, r0, sl
 800937e:	2240      	movs	r2, #64	@ 0x40
 8009380:	4082      	lsls	r2, r0
 8009382:	4313      	orrs	r3, r2
 8009384:	3401      	adds	r4, #1
 8009386:	9304      	str	r3, [sp, #16]
 8009388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800938c:	4824      	ldr	r0, [pc, #144]	@ (8009420 <_svfiprintf_r+0x1e8>)
 800938e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009392:	2206      	movs	r2, #6
 8009394:	f7f6 ff2c 	bl	80001f0 <memchr>
 8009398:	2800      	cmp	r0, #0
 800939a:	d036      	beq.n	800940a <_svfiprintf_r+0x1d2>
 800939c:	4b21      	ldr	r3, [pc, #132]	@ (8009424 <_svfiprintf_r+0x1ec>)
 800939e:	bb1b      	cbnz	r3, 80093e8 <_svfiprintf_r+0x1b0>
 80093a0:	9b03      	ldr	r3, [sp, #12]
 80093a2:	3307      	adds	r3, #7
 80093a4:	f023 0307 	bic.w	r3, r3, #7
 80093a8:	3308      	adds	r3, #8
 80093aa:	9303      	str	r3, [sp, #12]
 80093ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ae:	4433      	add	r3, r6
 80093b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80093b2:	e76a      	b.n	800928a <_svfiprintf_r+0x52>
 80093b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80093b8:	460c      	mov	r4, r1
 80093ba:	2001      	movs	r0, #1
 80093bc:	e7a8      	b.n	8009310 <_svfiprintf_r+0xd8>
 80093be:	2300      	movs	r3, #0
 80093c0:	3401      	adds	r4, #1
 80093c2:	9305      	str	r3, [sp, #20]
 80093c4:	4619      	mov	r1, r3
 80093c6:	f04f 0c0a 	mov.w	ip, #10
 80093ca:	4620      	mov	r0, r4
 80093cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093d0:	3a30      	subs	r2, #48	@ 0x30
 80093d2:	2a09      	cmp	r2, #9
 80093d4:	d903      	bls.n	80093de <_svfiprintf_r+0x1a6>
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d0c6      	beq.n	8009368 <_svfiprintf_r+0x130>
 80093da:	9105      	str	r1, [sp, #20]
 80093dc:	e7c4      	b.n	8009368 <_svfiprintf_r+0x130>
 80093de:	fb0c 2101 	mla	r1, ip, r1, r2
 80093e2:	4604      	mov	r4, r0
 80093e4:	2301      	movs	r3, #1
 80093e6:	e7f0      	b.n	80093ca <_svfiprintf_r+0x192>
 80093e8:	ab03      	add	r3, sp, #12
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	462a      	mov	r2, r5
 80093ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009428 <_svfiprintf_r+0x1f0>)
 80093f0:	a904      	add	r1, sp, #16
 80093f2:	4638      	mov	r0, r7
 80093f4:	f7fd f8e8 	bl	80065c8 <_printf_float>
 80093f8:	1c42      	adds	r2, r0, #1
 80093fa:	4606      	mov	r6, r0
 80093fc:	d1d6      	bne.n	80093ac <_svfiprintf_r+0x174>
 80093fe:	89ab      	ldrh	r3, [r5, #12]
 8009400:	065b      	lsls	r3, r3, #25
 8009402:	f53f af2d 	bmi.w	8009260 <_svfiprintf_r+0x28>
 8009406:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009408:	e72c      	b.n	8009264 <_svfiprintf_r+0x2c>
 800940a:	ab03      	add	r3, sp, #12
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	462a      	mov	r2, r5
 8009410:	4b05      	ldr	r3, [pc, #20]	@ (8009428 <_svfiprintf_r+0x1f0>)
 8009412:	a904      	add	r1, sp, #16
 8009414:	4638      	mov	r0, r7
 8009416:	f7fd fb6f 	bl	8006af8 <_printf_i>
 800941a:	e7ed      	b.n	80093f8 <_svfiprintf_r+0x1c0>
 800941c:	0800a978 	.word	0x0800a978
 8009420:	0800a982 	.word	0x0800a982
 8009424:	080065c9 	.word	0x080065c9
 8009428:	08009183 	.word	0x08009183
 800942c:	0800a97e 	.word	0x0800a97e

08009430 <_sungetc_r>:
 8009430:	b538      	push	{r3, r4, r5, lr}
 8009432:	1c4b      	adds	r3, r1, #1
 8009434:	4614      	mov	r4, r2
 8009436:	d103      	bne.n	8009440 <_sungetc_r+0x10>
 8009438:	f04f 35ff 	mov.w	r5, #4294967295
 800943c:	4628      	mov	r0, r5
 800943e:	bd38      	pop	{r3, r4, r5, pc}
 8009440:	8993      	ldrh	r3, [r2, #12]
 8009442:	f023 0320 	bic.w	r3, r3, #32
 8009446:	8193      	strh	r3, [r2, #12]
 8009448:	6853      	ldr	r3, [r2, #4]
 800944a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800944c:	b2cd      	uxtb	r5, r1
 800944e:	b18a      	cbz	r2, 8009474 <_sungetc_r+0x44>
 8009450:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009452:	429a      	cmp	r2, r3
 8009454:	dd08      	ble.n	8009468 <_sungetc_r+0x38>
 8009456:	6823      	ldr	r3, [r4, #0]
 8009458:	1e5a      	subs	r2, r3, #1
 800945a:	6022      	str	r2, [r4, #0]
 800945c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009460:	6863      	ldr	r3, [r4, #4]
 8009462:	3301      	adds	r3, #1
 8009464:	6063      	str	r3, [r4, #4]
 8009466:	e7e9      	b.n	800943c <_sungetc_r+0xc>
 8009468:	4621      	mov	r1, r4
 800946a:	f000 fd84 	bl	8009f76 <__submore>
 800946e:	2800      	cmp	r0, #0
 8009470:	d0f1      	beq.n	8009456 <_sungetc_r+0x26>
 8009472:	e7e1      	b.n	8009438 <_sungetc_r+0x8>
 8009474:	6921      	ldr	r1, [r4, #16]
 8009476:	6822      	ldr	r2, [r4, #0]
 8009478:	b141      	cbz	r1, 800948c <_sungetc_r+0x5c>
 800947a:	4291      	cmp	r1, r2
 800947c:	d206      	bcs.n	800948c <_sungetc_r+0x5c>
 800947e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8009482:	42a9      	cmp	r1, r5
 8009484:	d102      	bne.n	800948c <_sungetc_r+0x5c>
 8009486:	3a01      	subs	r2, #1
 8009488:	6022      	str	r2, [r4, #0]
 800948a:	e7ea      	b.n	8009462 <_sungetc_r+0x32>
 800948c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8009490:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009494:	6363      	str	r3, [r4, #52]	@ 0x34
 8009496:	2303      	movs	r3, #3
 8009498:	63a3      	str	r3, [r4, #56]	@ 0x38
 800949a:	4623      	mov	r3, r4
 800949c:	f803 5f46 	strb.w	r5, [r3, #70]!
 80094a0:	6023      	str	r3, [r4, #0]
 80094a2:	2301      	movs	r3, #1
 80094a4:	e7de      	b.n	8009464 <_sungetc_r+0x34>

080094a6 <__ssrefill_r>:
 80094a6:	b510      	push	{r4, lr}
 80094a8:	460c      	mov	r4, r1
 80094aa:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80094ac:	b169      	cbz	r1, 80094ca <__ssrefill_r+0x24>
 80094ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094b2:	4299      	cmp	r1, r3
 80094b4:	d001      	beq.n	80094ba <__ssrefill_r+0x14>
 80094b6:	f7fe fe07 	bl	80080c8 <_free_r>
 80094ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80094bc:	6063      	str	r3, [r4, #4]
 80094be:	2000      	movs	r0, #0
 80094c0:	6360      	str	r0, [r4, #52]	@ 0x34
 80094c2:	b113      	cbz	r3, 80094ca <__ssrefill_r+0x24>
 80094c4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80094c6:	6023      	str	r3, [r4, #0]
 80094c8:	bd10      	pop	{r4, pc}
 80094ca:	6923      	ldr	r3, [r4, #16]
 80094cc:	6023      	str	r3, [r4, #0]
 80094ce:	2300      	movs	r3, #0
 80094d0:	6063      	str	r3, [r4, #4]
 80094d2:	89a3      	ldrh	r3, [r4, #12]
 80094d4:	f043 0320 	orr.w	r3, r3, #32
 80094d8:	81a3      	strh	r3, [r4, #12]
 80094da:	f04f 30ff 	mov.w	r0, #4294967295
 80094de:	e7f3      	b.n	80094c8 <__ssrefill_r+0x22>

080094e0 <__ssvfiscanf_r>:
 80094e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094e4:	460c      	mov	r4, r1
 80094e6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80094ea:	2100      	movs	r1, #0
 80094ec:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80094f0:	49a5      	ldr	r1, [pc, #660]	@ (8009788 <__ssvfiscanf_r+0x2a8>)
 80094f2:	91a0      	str	r1, [sp, #640]	@ 0x280
 80094f4:	f10d 0804 	add.w	r8, sp, #4
 80094f8:	49a4      	ldr	r1, [pc, #656]	@ (800978c <__ssvfiscanf_r+0x2ac>)
 80094fa:	4fa5      	ldr	r7, [pc, #660]	@ (8009790 <__ssvfiscanf_r+0x2b0>)
 80094fc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8009500:	4606      	mov	r6, r0
 8009502:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	7813      	ldrb	r3, [r2, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	f000 8158 	beq.w	80097be <__ssvfiscanf_r+0x2de>
 800950e:	5cf9      	ldrb	r1, [r7, r3]
 8009510:	f011 0108 	ands.w	r1, r1, #8
 8009514:	f102 0501 	add.w	r5, r2, #1
 8009518:	d019      	beq.n	800954e <__ssvfiscanf_r+0x6e>
 800951a:	6863      	ldr	r3, [r4, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	dd0f      	ble.n	8009540 <__ssvfiscanf_r+0x60>
 8009520:	6823      	ldr	r3, [r4, #0]
 8009522:	781a      	ldrb	r2, [r3, #0]
 8009524:	5cba      	ldrb	r2, [r7, r2]
 8009526:	0712      	lsls	r2, r2, #28
 8009528:	d401      	bmi.n	800952e <__ssvfiscanf_r+0x4e>
 800952a:	462a      	mov	r2, r5
 800952c:	e7eb      	b.n	8009506 <__ssvfiscanf_r+0x26>
 800952e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009530:	3201      	adds	r2, #1
 8009532:	9245      	str	r2, [sp, #276]	@ 0x114
 8009534:	6862      	ldr	r2, [r4, #4]
 8009536:	3301      	adds	r3, #1
 8009538:	3a01      	subs	r2, #1
 800953a:	6062      	str	r2, [r4, #4]
 800953c:	6023      	str	r3, [r4, #0]
 800953e:	e7ec      	b.n	800951a <__ssvfiscanf_r+0x3a>
 8009540:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009542:	4621      	mov	r1, r4
 8009544:	4630      	mov	r0, r6
 8009546:	4798      	blx	r3
 8009548:	2800      	cmp	r0, #0
 800954a:	d0e9      	beq.n	8009520 <__ssvfiscanf_r+0x40>
 800954c:	e7ed      	b.n	800952a <__ssvfiscanf_r+0x4a>
 800954e:	2b25      	cmp	r3, #37	@ 0x25
 8009550:	d012      	beq.n	8009578 <__ssvfiscanf_r+0x98>
 8009552:	4699      	mov	r9, r3
 8009554:	6863      	ldr	r3, [r4, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	f340 8093 	ble.w	8009682 <__ssvfiscanf_r+0x1a2>
 800955c:	6822      	ldr	r2, [r4, #0]
 800955e:	7813      	ldrb	r3, [r2, #0]
 8009560:	454b      	cmp	r3, r9
 8009562:	f040 812c 	bne.w	80097be <__ssvfiscanf_r+0x2de>
 8009566:	6863      	ldr	r3, [r4, #4]
 8009568:	3b01      	subs	r3, #1
 800956a:	6063      	str	r3, [r4, #4]
 800956c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800956e:	3201      	adds	r2, #1
 8009570:	3301      	adds	r3, #1
 8009572:	6022      	str	r2, [r4, #0]
 8009574:	9345      	str	r3, [sp, #276]	@ 0x114
 8009576:	e7d8      	b.n	800952a <__ssvfiscanf_r+0x4a>
 8009578:	9141      	str	r1, [sp, #260]	@ 0x104
 800957a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800957c:	7853      	ldrb	r3, [r2, #1]
 800957e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009580:	bf02      	ittt	eq
 8009582:	2310      	moveq	r3, #16
 8009584:	1c95      	addeq	r5, r2, #2
 8009586:	9341      	streq	r3, [sp, #260]	@ 0x104
 8009588:	220a      	movs	r2, #10
 800958a:	46a9      	mov	r9, r5
 800958c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8009590:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009594:	2b09      	cmp	r3, #9
 8009596:	d91e      	bls.n	80095d6 <__ssvfiscanf_r+0xf6>
 8009598:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8009794 <__ssvfiscanf_r+0x2b4>
 800959c:	2203      	movs	r2, #3
 800959e:	4650      	mov	r0, sl
 80095a0:	f7f6 fe26 	bl	80001f0 <memchr>
 80095a4:	b138      	cbz	r0, 80095b6 <__ssvfiscanf_r+0xd6>
 80095a6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80095a8:	eba0 000a 	sub.w	r0, r0, sl
 80095ac:	2301      	movs	r3, #1
 80095ae:	4083      	lsls	r3, r0
 80095b0:	4313      	orrs	r3, r2
 80095b2:	9341      	str	r3, [sp, #260]	@ 0x104
 80095b4:	464d      	mov	r5, r9
 80095b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80095ba:	2b78      	cmp	r3, #120	@ 0x78
 80095bc:	d806      	bhi.n	80095cc <__ssvfiscanf_r+0xec>
 80095be:	2b57      	cmp	r3, #87	@ 0x57
 80095c0:	d810      	bhi.n	80095e4 <__ssvfiscanf_r+0x104>
 80095c2:	2b25      	cmp	r3, #37	@ 0x25
 80095c4:	d0c5      	beq.n	8009552 <__ssvfiscanf_r+0x72>
 80095c6:	d857      	bhi.n	8009678 <__ssvfiscanf_r+0x198>
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d065      	beq.n	8009698 <__ssvfiscanf_r+0x1b8>
 80095cc:	2303      	movs	r3, #3
 80095ce:	9347      	str	r3, [sp, #284]	@ 0x11c
 80095d0:	230a      	movs	r3, #10
 80095d2:	9342      	str	r3, [sp, #264]	@ 0x108
 80095d4:	e078      	b.n	80096c8 <__ssvfiscanf_r+0x1e8>
 80095d6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80095d8:	fb02 1103 	mla	r1, r2, r3, r1
 80095dc:	3930      	subs	r1, #48	@ 0x30
 80095de:	9143      	str	r1, [sp, #268]	@ 0x10c
 80095e0:	464d      	mov	r5, r9
 80095e2:	e7d2      	b.n	800958a <__ssvfiscanf_r+0xaa>
 80095e4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80095e8:	2a20      	cmp	r2, #32
 80095ea:	d8ef      	bhi.n	80095cc <__ssvfiscanf_r+0xec>
 80095ec:	a101      	add	r1, pc, #4	@ (adr r1, 80095f4 <__ssvfiscanf_r+0x114>)
 80095ee:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80095f2:	bf00      	nop
 80095f4:	080096a7 	.word	0x080096a7
 80095f8:	080095cd 	.word	0x080095cd
 80095fc:	080095cd 	.word	0x080095cd
 8009600:	08009701 	.word	0x08009701
 8009604:	080095cd 	.word	0x080095cd
 8009608:	080095cd 	.word	0x080095cd
 800960c:	080095cd 	.word	0x080095cd
 8009610:	080095cd 	.word	0x080095cd
 8009614:	080095cd 	.word	0x080095cd
 8009618:	080095cd 	.word	0x080095cd
 800961c:	080095cd 	.word	0x080095cd
 8009620:	08009717 	.word	0x08009717
 8009624:	080096fd 	.word	0x080096fd
 8009628:	0800967f 	.word	0x0800967f
 800962c:	0800967f 	.word	0x0800967f
 8009630:	0800967f 	.word	0x0800967f
 8009634:	080095cd 	.word	0x080095cd
 8009638:	080096b9 	.word	0x080096b9
 800963c:	080095cd 	.word	0x080095cd
 8009640:	080095cd 	.word	0x080095cd
 8009644:	080095cd 	.word	0x080095cd
 8009648:	080095cd 	.word	0x080095cd
 800964c:	08009727 	.word	0x08009727
 8009650:	080096c1 	.word	0x080096c1
 8009654:	0800969f 	.word	0x0800969f
 8009658:	080095cd 	.word	0x080095cd
 800965c:	080095cd 	.word	0x080095cd
 8009660:	08009723 	.word	0x08009723
 8009664:	080095cd 	.word	0x080095cd
 8009668:	080096fd 	.word	0x080096fd
 800966c:	080095cd 	.word	0x080095cd
 8009670:	080095cd 	.word	0x080095cd
 8009674:	080096a7 	.word	0x080096a7
 8009678:	3b45      	subs	r3, #69	@ 0x45
 800967a:	2b02      	cmp	r3, #2
 800967c:	d8a6      	bhi.n	80095cc <__ssvfiscanf_r+0xec>
 800967e:	2305      	movs	r3, #5
 8009680:	e021      	b.n	80096c6 <__ssvfiscanf_r+0x1e6>
 8009682:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009684:	4621      	mov	r1, r4
 8009686:	4630      	mov	r0, r6
 8009688:	4798      	blx	r3
 800968a:	2800      	cmp	r0, #0
 800968c:	f43f af66 	beq.w	800955c <__ssvfiscanf_r+0x7c>
 8009690:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009692:	2800      	cmp	r0, #0
 8009694:	f040 808b 	bne.w	80097ae <__ssvfiscanf_r+0x2ce>
 8009698:	f04f 30ff 	mov.w	r0, #4294967295
 800969c:	e08b      	b.n	80097b6 <__ssvfiscanf_r+0x2d6>
 800969e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80096a0:	f042 0220 	orr.w	r2, r2, #32
 80096a4:	9241      	str	r2, [sp, #260]	@ 0x104
 80096a6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80096a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80096ac:	9241      	str	r2, [sp, #260]	@ 0x104
 80096ae:	2210      	movs	r2, #16
 80096b0:	2b6e      	cmp	r3, #110	@ 0x6e
 80096b2:	9242      	str	r2, [sp, #264]	@ 0x108
 80096b4:	d902      	bls.n	80096bc <__ssvfiscanf_r+0x1dc>
 80096b6:	e005      	b.n	80096c4 <__ssvfiscanf_r+0x1e4>
 80096b8:	2300      	movs	r3, #0
 80096ba:	9342      	str	r3, [sp, #264]	@ 0x108
 80096bc:	2303      	movs	r3, #3
 80096be:	e002      	b.n	80096c6 <__ssvfiscanf_r+0x1e6>
 80096c0:	2308      	movs	r3, #8
 80096c2:	9342      	str	r3, [sp, #264]	@ 0x108
 80096c4:	2304      	movs	r3, #4
 80096c6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80096c8:	6863      	ldr	r3, [r4, #4]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	dd39      	ble.n	8009742 <__ssvfiscanf_r+0x262>
 80096ce:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80096d0:	0659      	lsls	r1, r3, #25
 80096d2:	d404      	bmi.n	80096de <__ssvfiscanf_r+0x1fe>
 80096d4:	6823      	ldr	r3, [r4, #0]
 80096d6:	781a      	ldrb	r2, [r3, #0]
 80096d8:	5cba      	ldrb	r2, [r7, r2]
 80096da:	0712      	lsls	r2, r2, #28
 80096dc:	d438      	bmi.n	8009750 <__ssvfiscanf_r+0x270>
 80096de:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	dc47      	bgt.n	8009774 <__ssvfiscanf_r+0x294>
 80096e4:	466b      	mov	r3, sp
 80096e6:	4622      	mov	r2, r4
 80096e8:	a941      	add	r1, sp, #260	@ 0x104
 80096ea:	4630      	mov	r0, r6
 80096ec:	f000 f9ae 	bl	8009a4c <_scanf_chars>
 80096f0:	2801      	cmp	r0, #1
 80096f2:	d064      	beq.n	80097be <__ssvfiscanf_r+0x2de>
 80096f4:	2802      	cmp	r0, #2
 80096f6:	f47f af18 	bne.w	800952a <__ssvfiscanf_r+0x4a>
 80096fa:	e7c9      	b.n	8009690 <__ssvfiscanf_r+0x1b0>
 80096fc:	220a      	movs	r2, #10
 80096fe:	e7d7      	b.n	80096b0 <__ssvfiscanf_r+0x1d0>
 8009700:	4629      	mov	r1, r5
 8009702:	4640      	mov	r0, r8
 8009704:	f000 fbfe 	bl	8009f04 <__sccl>
 8009708:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800970a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800970e:	9341      	str	r3, [sp, #260]	@ 0x104
 8009710:	4605      	mov	r5, r0
 8009712:	2301      	movs	r3, #1
 8009714:	e7d7      	b.n	80096c6 <__ssvfiscanf_r+0x1e6>
 8009716:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009718:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800971c:	9341      	str	r3, [sp, #260]	@ 0x104
 800971e:	2300      	movs	r3, #0
 8009720:	e7d1      	b.n	80096c6 <__ssvfiscanf_r+0x1e6>
 8009722:	2302      	movs	r3, #2
 8009724:	e7cf      	b.n	80096c6 <__ssvfiscanf_r+0x1e6>
 8009726:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8009728:	06c3      	lsls	r3, r0, #27
 800972a:	f53f aefe 	bmi.w	800952a <__ssvfiscanf_r+0x4a>
 800972e:	9b00      	ldr	r3, [sp, #0]
 8009730:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009732:	1d19      	adds	r1, r3, #4
 8009734:	9100      	str	r1, [sp, #0]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	07c0      	lsls	r0, r0, #31
 800973a:	bf4c      	ite	mi
 800973c:	801a      	strhmi	r2, [r3, #0]
 800973e:	601a      	strpl	r2, [r3, #0]
 8009740:	e6f3      	b.n	800952a <__ssvfiscanf_r+0x4a>
 8009742:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009744:	4621      	mov	r1, r4
 8009746:	4630      	mov	r0, r6
 8009748:	4798      	blx	r3
 800974a:	2800      	cmp	r0, #0
 800974c:	d0bf      	beq.n	80096ce <__ssvfiscanf_r+0x1ee>
 800974e:	e79f      	b.n	8009690 <__ssvfiscanf_r+0x1b0>
 8009750:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009752:	3201      	adds	r2, #1
 8009754:	9245      	str	r2, [sp, #276]	@ 0x114
 8009756:	6862      	ldr	r2, [r4, #4]
 8009758:	3a01      	subs	r2, #1
 800975a:	2a00      	cmp	r2, #0
 800975c:	6062      	str	r2, [r4, #4]
 800975e:	dd02      	ble.n	8009766 <__ssvfiscanf_r+0x286>
 8009760:	3301      	adds	r3, #1
 8009762:	6023      	str	r3, [r4, #0]
 8009764:	e7b6      	b.n	80096d4 <__ssvfiscanf_r+0x1f4>
 8009766:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009768:	4621      	mov	r1, r4
 800976a:	4630      	mov	r0, r6
 800976c:	4798      	blx	r3
 800976e:	2800      	cmp	r0, #0
 8009770:	d0b0      	beq.n	80096d4 <__ssvfiscanf_r+0x1f4>
 8009772:	e78d      	b.n	8009690 <__ssvfiscanf_r+0x1b0>
 8009774:	2b04      	cmp	r3, #4
 8009776:	dc0f      	bgt.n	8009798 <__ssvfiscanf_r+0x2b8>
 8009778:	466b      	mov	r3, sp
 800977a:	4622      	mov	r2, r4
 800977c:	a941      	add	r1, sp, #260	@ 0x104
 800977e:	4630      	mov	r0, r6
 8009780:	f000 f9be 	bl	8009b00 <_scanf_i>
 8009784:	e7b4      	b.n	80096f0 <__ssvfiscanf_r+0x210>
 8009786:	bf00      	nop
 8009788:	08009431 	.word	0x08009431
 800978c:	080094a7 	.word	0x080094a7
 8009790:	0800a5f9 	.word	0x0800a5f9
 8009794:	0800a97e 	.word	0x0800a97e
 8009798:	4b0a      	ldr	r3, [pc, #40]	@ (80097c4 <__ssvfiscanf_r+0x2e4>)
 800979a:	2b00      	cmp	r3, #0
 800979c:	f43f aec5 	beq.w	800952a <__ssvfiscanf_r+0x4a>
 80097a0:	466b      	mov	r3, sp
 80097a2:	4622      	mov	r2, r4
 80097a4:	a941      	add	r1, sp, #260	@ 0x104
 80097a6:	4630      	mov	r0, r6
 80097a8:	f3af 8000 	nop.w
 80097ac:	e7a0      	b.n	80096f0 <__ssvfiscanf_r+0x210>
 80097ae:	89a3      	ldrh	r3, [r4, #12]
 80097b0:	065b      	lsls	r3, r3, #25
 80097b2:	f53f af71 	bmi.w	8009698 <__ssvfiscanf_r+0x1b8>
 80097b6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80097ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097be:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80097c0:	e7f9      	b.n	80097b6 <__ssvfiscanf_r+0x2d6>
 80097c2:	bf00      	nop
 80097c4:	00000000 	.word	0x00000000

080097c8 <__sfputc_r>:
 80097c8:	6893      	ldr	r3, [r2, #8]
 80097ca:	3b01      	subs	r3, #1
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	b410      	push	{r4}
 80097d0:	6093      	str	r3, [r2, #8]
 80097d2:	da08      	bge.n	80097e6 <__sfputc_r+0x1e>
 80097d4:	6994      	ldr	r4, [r2, #24]
 80097d6:	42a3      	cmp	r3, r4
 80097d8:	db01      	blt.n	80097de <__sfputc_r+0x16>
 80097da:	290a      	cmp	r1, #10
 80097dc:	d103      	bne.n	80097e6 <__sfputc_r+0x1e>
 80097de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097e2:	f7fd bcd6 	b.w	8007192 <__swbuf_r>
 80097e6:	6813      	ldr	r3, [r2, #0]
 80097e8:	1c58      	adds	r0, r3, #1
 80097ea:	6010      	str	r0, [r2, #0]
 80097ec:	7019      	strb	r1, [r3, #0]
 80097ee:	4608      	mov	r0, r1
 80097f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <__sfputs_r>:
 80097f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f8:	4606      	mov	r6, r0
 80097fa:	460f      	mov	r7, r1
 80097fc:	4614      	mov	r4, r2
 80097fe:	18d5      	adds	r5, r2, r3
 8009800:	42ac      	cmp	r4, r5
 8009802:	d101      	bne.n	8009808 <__sfputs_r+0x12>
 8009804:	2000      	movs	r0, #0
 8009806:	e007      	b.n	8009818 <__sfputs_r+0x22>
 8009808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800980c:	463a      	mov	r2, r7
 800980e:	4630      	mov	r0, r6
 8009810:	f7ff ffda 	bl	80097c8 <__sfputc_r>
 8009814:	1c43      	adds	r3, r0, #1
 8009816:	d1f3      	bne.n	8009800 <__sfputs_r+0xa>
 8009818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800981c <_vfiprintf_r>:
 800981c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009820:	460d      	mov	r5, r1
 8009822:	b09d      	sub	sp, #116	@ 0x74
 8009824:	4614      	mov	r4, r2
 8009826:	4698      	mov	r8, r3
 8009828:	4606      	mov	r6, r0
 800982a:	b118      	cbz	r0, 8009834 <_vfiprintf_r+0x18>
 800982c:	6a03      	ldr	r3, [r0, #32]
 800982e:	b90b      	cbnz	r3, 8009834 <_vfiprintf_r+0x18>
 8009830:	f7fd fb0e 	bl	8006e50 <__sinit>
 8009834:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009836:	07d9      	lsls	r1, r3, #31
 8009838:	d405      	bmi.n	8009846 <_vfiprintf_r+0x2a>
 800983a:	89ab      	ldrh	r3, [r5, #12]
 800983c:	059a      	lsls	r2, r3, #22
 800983e:	d402      	bmi.n	8009846 <_vfiprintf_r+0x2a>
 8009840:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009842:	f7fd fdda 	bl	80073fa <__retarget_lock_acquire_recursive>
 8009846:	89ab      	ldrh	r3, [r5, #12]
 8009848:	071b      	lsls	r3, r3, #28
 800984a:	d501      	bpl.n	8009850 <_vfiprintf_r+0x34>
 800984c:	692b      	ldr	r3, [r5, #16]
 800984e:	b99b      	cbnz	r3, 8009878 <_vfiprintf_r+0x5c>
 8009850:	4629      	mov	r1, r5
 8009852:	4630      	mov	r0, r6
 8009854:	f7fd fcdc 	bl	8007210 <__swsetup_r>
 8009858:	b170      	cbz	r0, 8009878 <_vfiprintf_r+0x5c>
 800985a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800985c:	07dc      	lsls	r4, r3, #31
 800985e:	d504      	bpl.n	800986a <_vfiprintf_r+0x4e>
 8009860:	f04f 30ff 	mov.w	r0, #4294967295
 8009864:	b01d      	add	sp, #116	@ 0x74
 8009866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800986a:	89ab      	ldrh	r3, [r5, #12]
 800986c:	0598      	lsls	r0, r3, #22
 800986e:	d4f7      	bmi.n	8009860 <_vfiprintf_r+0x44>
 8009870:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009872:	f7fd fdc3 	bl	80073fc <__retarget_lock_release_recursive>
 8009876:	e7f3      	b.n	8009860 <_vfiprintf_r+0x44>
 8009878:	2300      	movs	r3, #0
 800987a:	9309      	str	r3, [sp, #36]	@ 0x24
 800987c:	2320      	movs	r3, #32
 800987e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009882:	f8cd 800c 	str.w	r8, [sp, #12]
 8009886:	2330      	movs	r3, #48	@ 0x30
 8009888:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009a38 <_vfiprintf_r+0x21c>
 800988c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009890:	f04f 0901 	mov.w	r9, #1
 8009894:	4623      	mov	r3, r4
 8009896:	469a      	mov	sl, r3
 8009898:	f813 2b01 	ldrb.w	r2, [r3], #1
 800989c:	b10a      	cbz	r2, 80098a2 <_vfiprintf_r+0x86>
 800989e:	2a25      	cmp	r2, #37	@ 0x25
 80098a0:	d1f9      	bne.n	8009896 <_vfiprintf_r+0x7a>
 80098a2:	ebba 0b04 	subs.w	fp, sl, r4
 80098a6:	d00b      	beq.n	80098c0 <_vfiprintf_r+0xa4>
 80098a8:	465b      	mov	r3, fp
 80098aa:	4622      	mov	r2, r4
 80098ac:	4629      	mov	r1, r5
 80098ae:	4630      	mov	r0, r6
 80098b0:	f7ff ffa1 	bl	80097f6 <__sfputs_r>
 80098b4:	3001      	adds	r0, #1
 80098b6:	f000 80a7 	beq.w	8009a08 <_vfiprintf_r+0x1ec>
 80098ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098bc:	445a      	add	r2, fp
 80098be:	9209      	str	r2, [sp, #36]	@ 0x24
 80098c0:	f89a 3000 	ldrb.w	r3, [sl]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f000 809f 	beq.w	8009a08 <_vfiprintf_r+0x1ec>
 80098ca:	2300      	movs	r3, #0
 80098cc:	f04f 32ff 	mov.w	r2, #4294967295
 80098d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098d4:	f10a 0a01 	add.w	sl, sl, #1
 80098d8:	9304      	str	r3, [sp, #16]
 80098da:	9307      	str	r3, [sp, #28]
 80098dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80098e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80098e2:	4654      	mov	r4, sl
 80098e4:	2205      	movs	r2, #5
 80098e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098ea:	4853      	ldr	r0, [pc, #332]	@ (8009a38 <_vfiprintf_r+0x21c>)
 80098ec:	f7f6 fc80 	bl	80001f0 <memchr>
 80098f0:	9a04      	ldr	r2, [sp, #16]
 80098f2:	b9d8      	cbnz	r0, 800992c <_vfiprintf_r+0x110>
 80098f4:	06d1      	lsls	r1, r2, #27
 80098f6:	bf44      	itt	mi
 80098f8:	2320      	movmi	r3, #32
 80098fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098fe:	0713      	lsls	r3, r2, #28
 8009900:	bf44      	itt	mi
 8009902:	232b      	movmi	r3, #43	@ 0x2b
 8009904:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009908:	f89a 3000 	ldrb.w	r3, [sl]
 800990c:	2b2a      	cmp	r3, #42	@ 0x2a
 800990e:	d015      	beq.n	800993c <_vfiprintf_r+0x120>
 8009910:	9a07      	ldr	r2, [sp, #28]
 8009912:	4654      	mov	r4, sl
 8009914:	2000      	movs	r0, #0
 8009916:	f04f 0c0a 	mov.w	ip, #10
 800991a:	4621      	mov	r1, r4
 800991c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009920:	3b30      	subs	r3, #48	@ 0x30
 8009922:	2b09      	cmp	r3, #9
 8009924:	d94b      	bls.n	80099be <_vfiprintf_r+0x1a2>
 8009926:	b1b0      	cbz	r0, 8009956 <_vfiprintf_r+0x13a>
 8009928:	9207      	str	r2, [sp, #28]
 800992a:	e014      	b.n	8009956 <_vfiprintf_r+0x13a>
 800992c:	eba0 0308 	sub.w	r3, r0, r8
 8009930:	fa09 f303 	lsl.w	r3, r9, r3
 8009934:	4313      	orrs	r3, r2
 8009936:	9304      	str	r3, [sp, #16]
 8009938:	46a2      	mov	sl, r4
 800993a:	e7d2      	b.n	80098e2 <_vfiprintf_r+0xc6>
 800993c:	9b03      	ldr	r3, [sp, #12]
 800993e:	1d19      	adds	r1, r3, #4
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	9103      	str	r1, [sp, #12]
 8009944:	2b00      	cmp	r3, #0
 8009946:	bfbb      	ittet	lt
 8009948:	425b      	neglt	r3, r3
 800994a:	f042 0202 	orrlt.w	r2, r2, #2
 800994e:	9307      	strge	r3, [sp, #28]
 8009950:	9307      	strlt	r3, [sp, #28]
 8009952:	bfb8      	it	lt
 8009954:	9204      	strlt	r2, [sp, #16]
 8009956:	7823      	ldrb	r3, [r4, #0]
 8009958:	2b2e      	cmp	r3, #46	@ 0x2e
 800995a:	d10a      	bne.n	8009972 <_vfiprintf_r+0x156>
 800995c:	7863      	ldrb	r3, [r4, #1]
 800995e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009960:	d132      	bne.n	80099c8 <_vfiprintf_r+0x1ac>
 8009962:	9b03      	ldr	r3, [sp, #12]
 8009964:	1d1a      	adds	r2, r3, #4
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	9203      	str	r2, [sp, #12]
 800996a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800996e:	3402      	adds	r4, #2
 8009970:	9305      	str	r3, [sp, #20]
 8009972:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009a48 <_vfiprintf_r+0x22c>
 8009976:	7821      	ldrb	r1, [r4, #0]
 8009978:	2203      	movs	r2, #3
 800997a:	4650      	mov	r0, sl
 800997c:	f7f6 fc38 	bl	80001f0 <memchr>
 8009980:	b138      	cbz	r0, 8009992 <_vfiprintf_r+0x176>
 8009982:	9b04      	ldr	r3, [sp, #16]
 8009984:	eba0 000a 	sub.w	r0, r0, sl
 8009988:	2240      	movs	r2, #64	@ 0x40
 800998a:	4082      	lsls	r2, r0
 800998c:	4313      	orrs	r3, r2
 800998e:	3401      	adds	r4, #1
 8009990:	9304      	str	r3, [sp, #16]
 8009992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009996:	4829      	ldr	r0, [pc, #164]	@ (8009a3c <_vfiprintf_r+0x220>)
 8009998:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800999c:	2206      	movs	r2, #6
 800999e:	f7f6 fc27 	bl	80001f0 <memchr>
 80099a2:	2800      	cmp	r0, #0
 80099a4:	d03f      	beq.n	8009a26 <_vfiprintf_r+0x20a>
 80099a6:	4b26      	ldr	r3, [pc, #152]	@ (8009a40 <_vfiprintf_r+0x224>)
 80099a8:	bb1b      	cbnz	r3, 80099f2 <_vfiprintf_r+0x1d6>
 80099aa:	9b03      	ldr	r3, [sp, #12]
 80099ac:	3307      	adds	r3, #7
 80099ae:	f023 0307 	bic.w	r3, r3, #7
 80099b2:	3308      	adds	r3, #8
 80099b4:	9303      	str	r3, [sp, #12]
 80099b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099b8:	443b      	add	r3, r7
 80099ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80099bc:	e76a      	b.n	8009894 <_vfiprintf_r+0x78>
 80099be:	fb0c 3202 	mla	r2, ip, r2, r3
 80099c2:	460c      	mov	r4, r1
 80099c4:	2001      	movs	r0, #1
 80099c6:	e7a8      	b.n	800991a <_vfiprintf_r+0xfe>
 80099c8:	2300      	movs	r3, #0
 80099ca:	3401      	adds	r4, #1
 80099cc:	9305      	str	r3, [sp, #20]
 80099ce:	4619      	mov	r1, r3
 80099d0:	f04f 0c0a 	mov.w	ip, #10
 80099d4:	4620      	mov	r0, r4
 80099d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099da:	3a30      	subs	r2, #48	@ 0x30
 80099dc:	2a09      	cmp	r2, #9
 80099de:	d903      	bls.n	80099e8 <_vfiprintf_r+0x1cc>
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d0c6      	beq.n	8009972 <_vfiprintf_r+0x156>
 80099e4:	9105      	str	r1, [sp, #20]
 80099e6:	e7c4      	b.n	8009972 <_vfiprintf_r+0x156>
 80099e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80099ec:	4604      	mov	r4, r0
 80099ee:	2301      	movs	r3, #1
 80099f0:	e7f0      	b.n	80099d4 <_vfiprintf_r+0x1b8>
 80099f2:	ab03      	add	r3, sp, #12
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	462a      	mov	r2, r5
 80099f8:	4b12      	ldr	r3, [pc, #72]	@ (8009a44 <_vfiprintf_r+0x228>)
 80099fa:	a904      	add	r1, sp, #16
 80099fc:	4630      	mov	r0, r6
 80099fe:	f7fc fde3 	bl	80065c8 <_printf_float>
 8009a02:	4607      	mov	r7, r0
 8009a04:	1c78      	adds	r0, r7, #1
 8009a06:	d1d6      	bne.n	80099b6 <_vfiprintf_r+0x19a>
 8009a08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a0a:	07d9      	lsls	r1, r3, #31
 8009a0c:	d405      	bmi.n	8009a1a <_vfiprintf_r+0x1fe>
 8009a0e:	89ab      	ldrh	r3, [r5, #12]
 8009a10:	059a      	lsls	r2, r3, #22
 8009a12:	d402      	bmi.n	8009a1a <_vfiprintf_r+0x1fe>
 8009a14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a16:	f7fd fcf1 	bl	80073fc <__retarget_lock_release_recursive>
 8009a1a:	89ab      	ldrh	r3, [r5, #12]
 8009a1c:	065b      	lsls	r3, r3, #25
 8009a1e:	f53f af1f 	bmi.w	8009860 <_vfiprintf_r+0x44>
 8009a22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a24:	e71e      	b.n	8009864 <_vfiprintf_r+0x48>
 8009a26:	ab03      	add	r3, sp, #12
 8009a28:	9300      	str	r3, [sp, #0]
 8009a2a:	462a      	mov	r2, r5
 8009a2c:	4b05      	ldr	r3, [pc, #20]	@ (8009a44 <_vfiprintf_r+0x228>)
 8009a2e:	a904      	add	r1, sp, #16
 8009a30:	4630      	mov	r0, r6
 8009a32:	f7fd f861 	bl	8006af8 <_printf_i>
 8009a36:	e7e4      	b.n	8009a02 <_vfiprintf_r+0x1e6>
 8009a38:	0800a978 	.word	0x0800a978
 8009a3c:	0800a982 	.word	0x0800a982
 8009a40:	080065c9 	.word	0x080065c9
 8009a44:	080097f7 	.word	0x080097f7
 8009a48:	0800a97e 	.word	0x0800a97e

08009a4c <_scanf_chars>:
 8009a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a50:	4615      	mov	r5, r2
 8009a52:	688a      	ldr	r2, [r1, #8]
 8009a54:	4680      	mov	r8, r0
 8009a56:	460c      	mov	r4, r1
 8009a58:	b932      	cbnz	r2, 8009a68 <_scanf_chars+0x1c>
 8009a5a:	698a      	ldr	r2, [r1, #24]
 8009a5c:	2a00      	cmp	r2, #0
 8009a5e:	bf14      	ite	ne
 8009a60:	f04f 32ff 	movne.w	r2, #4294967295
 8009a64:	2201      	moveq	r2, #1
 8009a66:	608a      	str	r2, [r1, #8]
 8009a68:	6822      	ldr	r2, [r4, #0]
 8009a6a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8009afc <_scanf_chars+0xb0>
 8009a6e:	06d1      	lsls	r1, r2, #27
 8009a70:	bf5f      	itttt	pl
 8009a72:	681a      	ldrpl	r2, [r3, #0]
 8009a74:	1d11      	addpl	r1, r2, #4
 8009a76:	6019      	strpl	r1, [r3, #0]
 8009a78:	6816      	ldrpl	r6, [r2, #0]
 8009a7a:	2700      	movs	r7, #0
 8009a7c:	69a0      	ldr	r0, [r4, #24]
 8009a7e:	b188      	cbz	r0, 8009aa4 <_scanf_chars+0x58>
 8009a80:	2801      	cmp	r0, #1
 8009a82:	d107      	bne.n	8009a94 <_scanf_chars+0x48>
 8009a84:	682b      	ldr	r3, [r5, #0]
 8009a86:	781a      	ldrb	r2, [r3, #0]
 8009a88:	6963      	ldr	r3, [r4, #20]
 8009a8a:	5c9b      	ldrb	r3, [r3, r2]
 8009a8c:	b953      	cbnz	r3, 8009aa4 <_scanf_chars+0x58>
 8009a8e:	2f00      	cmp	r7, #0
 8009a90:	d031      	beq.n	8009af6 <_scanf_chars+0xaa>
 8009a92:	e022      	b.n	8009ada <_scanf_chars+0x8e>
 8009a94:	2802      	cmp	r0, #2
 8009a96:	d120      	bne.n	8009ada <_scanf_chars+0x8e>
 8009a98:	682b      	ldr	r3, [r5, #0]
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009aa0:	071b      	lsls	r3, r3, #28
 8009aa2:	d41a      	bmi.n	8009ada <_scanf_chars+0x8e>
 8009aa4:	6823      	ldr	r3, [r4, #0]
 8009aa6:	06da      	lsls	r2, r3, #27
 8009aa8:	bf5e      	ittt	pl
 8009aaa:	682b      	ldrpl	r3, [r5, #0]
 8009aac:	781b      	ldrbpl	r3, [r3, #0]
 8009aae:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009ab2:	682a      	ldr	r2, [r5, #0]
 8009ab4:	686b      	ldr	r3, [r5, #4]
 8009ab6:	3201      	adds	r2, #1
 8009ab8:	602a      	str	r2, [r5, #0]
 8009aba:	68a2      	ldr	r2, [r4, #8]
 8009abc:	3b01      	subs	r3, #1
 8009abe:	3a01      	subs	r2, #1
 8009ac0:	606b      	str	r3, [r5, #4]
 8009ac2:	3701      	adds	r7, #1
 8009ac4:	60a2      	str	r2, [r4, #8]
 8009ac6:	b142      	cbz	r2, 8009ada <_scanf_chars+0x8e>
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	dcd7      	bgt.n	8009a7c <_scanf_chars+0x30>
 8009acc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009ad0:	4629      	mov	r1, r5
 8009ad2:	4640      	mov	r0, r8
 8009ad4:	4798      	blx	r3
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d0d0      	beq.n	8009a7c <_scanf_chars+0x30>
 8009ada:	6823      	ldr	r3, [r4, #0]
 8009adc:	f013 0310 	ands.w	r3, r3, #16
 8009ae0:	d105      	bne.n	8009aee <_scanf_chars+0xa2>
 8009ae2:	68e2      	ldr	r2, [r4, #12]
 8009ae4:	3201      	adds	r2, #1
 8009ae6:	60e2      	str	r2, [r4, #12]
 8009ae8:	69a2      	ldr	r2, [r4, #24]
 8009aea:	b102      	cbz	r2, 8009aee <_scanf_chars+0xa2>
 8009aec:	7033      	strb	r3, [r6, #0]
 8009aee:	6923      	ldr	r3, [r4, #16]
 8009af0:	443b      	add	r3, r7
 8009af2:	6123      	str	r3, [r4, #16]
 8009af4:	2000      	movs	r0, #0
 8009af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009afa:	bf00      	nop
 8009afc:	0800a5f9 	.word	0x0800a5f9

08009b00 <_scanf_i>:
 8009b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b04:	4698      	mov	r8, r3
 8009b06:	4b74      	ldr	r3, [pc, #464]	@ (8009cd8 <_scanf_i+0x1d8>)
 8009b08:	460c      	mov	r4, r1
 8009b0a:	4682      	mov	sl, r0
 8009b0c:	4616      	mov	r6, r2
 8009b0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009b12:	b087      	sub	sp, #28
 8009b14:	ab03      	add	r3, sp, #12
 8009b16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009b1a:	4b70      	ldr	r3, [pc, #448]	@ (8009cdc <_scanf_i+0x1dc>)
 8009b1c:	69a1      	ldr	r1, [r4, #24]
 8009b1e:	4a70      	ldr	r2, [pc, #448]	@ (8009ce0 <_scanf_i+0x1e0>)
 8009b20:	2903      	cmp	r1, #3
 8009b22:	bf08      	it	eq
 8009b24:	461a      	moveq	r2, r3
 8009b26:	68a3      	ldr	r3, [r4, #8]
 8009b28:	9201      	str	r2, [sp, #4]
 8009b2a:	1e5a      	subs	r2, r3, #1
 8009b2c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009b30:	bf88      	it	hi
 8009b32:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009b36:	4627      	mov	r7, r4
 8009b38:	bf82      	ittt	hi
 8009b3a:	eb03 0905 	addhi.w	r9, r3, r5
 8009b3e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009b42:	60a3      	strhi	r3, [r4, #8]
 8009b44:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009b48:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8009b4c:	bf98      	it	ls
 8009b4e:	f04f 0900 	movls.w	r9, #0
 8009b52:	6023      	str	r3, [r4, #0]
 8009b54:	463d      	mov	r5, r7
 8009b56:	f04f 0b00 	mov.w	fp, #0
 8009b5a:	6831      	ldr	r1, [r6, #0]
 8009b5c:	ab03      	add	r3, sp, #12
 8009b5e:	7809      	ldrb	r1, [r1, #0]
 8009b60:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009b64:	2202      	movs	r2, #2
 8009b66:	f7f6 fb43 	bl	80001f0 <memchr>
 8009b6a:	b328      	cbz	r0, 8009bb8 <_scanf_i+0xb8>
 8009b6c:	f1bb 0f01 	cmp.w	fp, #1
 8009b70:	d159      	bne.n	8009c26 <_scanf_i+0x126>
 8009b72:	6862      	ldr	r2, [r4, #4]
 8009b74:	b92a      	cbnz	r2, 8009b82 <_scanf_i+0x82>
 8009b76:	6822      	ldr	r2, [r4, #0]
 8009b78:	2108      	movs	r1, #8
 8009b7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b7e:	6061      	str	r1, [r4, #4]
 8009b80:	6022      	str	r2, [r4, #0]
 8009b82:	6822      	ldr	r2, [r4, #0]
 8009b84:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8009b88:	6022      	str	r2, [r4, #0]
 8009b8a:	68a2      	ldr	r2, [r4, #8]
 8009b8c:	1e51      	subs	r1, r2, #1
 8009b8e:	60a1      	str	r1, [r4, #8]
 8009b90:	b192      	cbz	r2, 8009bb8 <_scanf_i+0xb8>
 8009b92:	6832      	ldr	r2, [r6, #0]
 8009b94:	1c51      	adds	r1, r2, #1
 8009b96:	6031      	str	r1, [r6, #0]
 8009b98:	7812      	ldrb	r2, [r2, #0]
 8009b9a:	f805 2b01 	strb.w	r2, [r5], #1
 8009b9e:	6872      	ldr	r2, [r6, #4]
 8009ba0:	3a01      	subs	r2, #1
 8009ba2:	2a00      	cmp	r2, #0
 8009ba4:	6072      	str	r2, [r6, #4]
 8009ba6:	dc07      	bgt.n	8009bb8 <_scanf_i+0xb8>
 8009ba8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8009bac:	4631      	mov	r1, r6
 8009bae:	4650      	mov	r0, sl
 8009bb0:	4790      	blx	r2
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	f040 8085 	bne.w	8009cc2 <_scanf_i+0x1c2>
 8009bb8:	f10b 0b01 	add.w	fp, fp, #1
 8009bbc:	f1bb 0f03 	cmp.w	fp, #3
 8009bc0:	d1cb      	bne.n	8009b5a <_scanf_i+0x5a>
 8009bc2:	6863      	ldr	r3, [r4, #4]
 8009bc4:	b90b      	cbnz	r3, 8009bca <_scanf_i+0xca>
 8009bc6:	230a      	movs	r3, #10
 8009bc8:	6063      	str	r3, [r4, #4]
 8009bca:	6863      	ldr	r3, [r4, #4]
 8009bcc:	4945      	ldr	r1, [pc, #276]	@ (8009ce4 <_scanf_i+0x1e4>)
 8009bce:	6960      	ldr	r0, [r4, #20]
 8009bd0:	1ac9      	subs	r1, r1, r3
 8009bd2:	f000 f997 	bl	8009f04 <__sccl>
 8009bd6:	f04f 0b00 	mov.w	fp, #0
 8009bda:	68a3      	ldr	r3, [r4, #8]
 8009bdc:	6822      	ldr	r2, [r4, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d03d      	beq.n	8009c5e <_scanf_i+0x15e>
 8009be2:	6831      	ldr	r1, [r6, #0]
 8009be4:	6960      	ldr	r0, [r4, #20]
 8009be6:	f891 c000 	ldrb.w	ip, [r1]
 8009bea:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	d035      	beq.n	8009c5e <_scanf_i+0x15e>
 8009bf2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8009bf6:	d124      	bne.n	8009c42 <_scanf_i+0x142>
 8009bf8:	0510      	lsls	r0, r2, #20
 8009bfa:	d522      	bpl.n	8009c42 <_scanf_i+0x142>
 8009bfc:	f10b 0b01 	add.w	fp, fp, #1
 8009c00:	f1b9 0f00 	cmp.w	r9, #0
 8009c04:	d003      	beq.n	8009c0e <_scanf_i+0x10e>
 8009c06:	3301      	adds	r3, #1
 8009c08:	f109 39ff 	add.w	r9, r9, #4294967295
 8009c0c:	60a3      	str	r3, [r4, #8]
 8009c0e:	6873      	ldr	r3, [r6, #4]
 8009c10:	3b01      	subs	r3, #1
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	6073      	str	r3, [r6, #4]
 8009c16:	dd1b      	ble.n	8009c50 <_scanf_i+0x150>
 8009c18:	6833      	ldr	r3, [r6, #0]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	6033      	str	r3, [r6, #0]
 8009c1e:	68a3      	ldr	r3, [r4, #8]
 8009c20:	3b01      	subs	r3, #1
 8009c22:	60a3      	str	r3, [r4, #8]
 8009c24:	e7d9      	b.n	8009bda <_scanf_i+0xda>
 8009c26:	f1bb 0f02 	cmp.w	fp, #2
 8009c2a:	d1ae      	bne.n	8009b8a <_scanf_i+0x8a>
 8009c2c:	6822      	ldr	r2, [r4, #0]
 8009c2e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8009c32:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009c36:	d1bf      	bne.n	8009bb8 <_scanf_i+0xb8>
 8009c38:	2110      	movs	r1, #16
 8009c3a:	6061      	str	r1, [r4, #4]
 8009c3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009c40:	e7a2      	b.n	8009b88 <_scanf_i+0x88>
 8009c42:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8009c46:	6022      	str	r2, [r4, #0]
 8009c48:	780b      	ldrb	r3, [r1, #0]
 8009c4a:	f805 3b01 	strb.w	r3, [r5], #1
 8009c4e:	e7de      	b.n	8009c0e <_scanf_i+0x10e>
 8009c50:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009c54:	4631      	mov	r1, r6
 8009c56:	4650      	mov	r0, sl
 8009c58:	4798      	blx	r3
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	d0df      	beq.n	8009c1e <_scanf_i+0x11e>
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	05d9      	lsls	r1, r3, #23
 8009c62:	d50d      	bpl.n	8009c80 <_scanf_i+0x180>
 8009c64:	42bd      	cmp	r5, r7
 8009c66:	d909      	bls.n	8009c7c <_scanf_i+0x17c>
 8009c68:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009c6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009c70:	4632      	mov	r2, r6
 8009c72:	4650      	mov	r0, sl
 8009c74:	4798      	blx	r3
 8009c76:	f105 39ff 	add.w	r9, r5, #4294967295
 8009c7a:	464d      	mov	r5, r9
 8009c7c:	42bd      	cmp	r5, r7
 8009c7e:	d028      	beq.n	8009cd2 <_scanf_i+0x1d2>
 8009c80:	6822      	ldr	r2, [r4, #0]
 8009c82:	f012 0210 	ands.w	r2, r2, #16
 8009c86:	d113      	bne.n	8009cb0 <_scanf_i+0x1b0>
 8009c88:	702a      	strb	r2, [r5, #0]
 8009c8a:	6863      	ldr	r3, [r4, #4]
 8009c8c:	9e01      	ldr	r6, [sp, #4]
 8009c8e:	4639      	mov	r1, r7
 8009c90:	4650      	mov	r0, sl
 8009c92:	47b0      	blx	r6
 8009c94:	f8d8 3000 	ldr.w	r3, [r8]
 8009c98:	6821      	ldr	r1, [r4, #0]
 8009c9a:	1d1a      	adds	r2, r3, #4
 8009c9c:	f8c8 2000 	str.w	r2, [r8]
 8009ca0:	f011 0f20 	tst.w	r1, #32
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	d00f      	beq.n	8009cc8 <_scanf_i+0x1c8>
 8009ca8:	6018      	str	r0, [r3, #0]
 8009caa:	68e3      	ldr	r3, [r4, #12]
 8009cac:	3301      	adds	r3, #1
 8009cae:	60e3      	str	r3, [r4, #12]
 8009cb0:	6923      	ldr	r3, [r4, #16]
 8009cb2:	1bed      	subs	r5, r5, r7
 8009cb4:	445d      	add	r5, fp
 8009cb6:	442b      	add	r3, r5
 8009cb8:	6123      	str	r3, [r4, #16]
 8009cba:	2000      	movs	r0, #0
 8009cbc:	b007      	add	sp, #28
 8009cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc2:	f04f 0b00 	mov.w	fp, #0
 8009cc6:	e7ca      	b.n	8009c5e <_scanf_i+0x15e>
 8009cc8:	07ca      	lsls	r2, r1, #31
 8009cca:	bf4c      	ite	mi
 8009ccc:	8018      	strhmi	r0, [r3, #0]
 8009cce:	6018      	strpl	r0, [r3, #0]
 8009cd0:	e7eb      	b.n	8009caa <_scanf_i+0x1aa>
 8009cd2:	2001      	movs	r0, #1
 8009cd4:	e7f2      	b.n	8009cbc <_scanf_i+0x1bc>
 8009cd6:	bf00      	nop
 8009cd8:	0800a570 	.word	0x0800a570
 8009cdc:	0800a1bd 	.word	0x0800a1bd
 8009ce0:	0800a29d 	.word	0x0800a29d
 8009ce4:	0800a999 	.word	0x0800a999

08009ce8 <__sflush_r>:
 8009ce8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf0:	0716      	lsls	r6, r2, #28
 8009cf2:	4605      	mov	r5, r0
 8009cf4:	460c      	mov	r4, r1
 8009cf6:	d454      	bmi.n	8009da2 <__sflush_r+0xba>
 8009cf8:	684b      	ldr	r3, [r1, #4]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	dc02      	bgt.n	8009d04 <__sflush_r+0x1c>
 8009cfe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	dd48      	ble.n	8009d96 <__sflush_r+0xae>
 8009d04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d06:	2e00      	cmp	r6, #0
 8009d08:	d045      	beq.n	8009d96 <__sflush_r+0xae>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009d10:	682f      	ldr	r7, [r5, #0]
 8009d12:	6a21      	ldr	r1, [r4, #32]
 8009d14:	602b      	str	r3, [r5, #0]
 8009d16:	d030      	beq.n	8009d7a <__sflush_r+0x92>
 8009d18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009d1a:	89a3      	ldrh	r3, [r4, #12]
 8009d1c:	0759      	lsls	r1, r3, #29
 8009d1e:	d505      	bpl.n	8009d2c <__sflush_r+0x44>
 8009d20:	6863      	ldr	r3, [r4, #4]
 8009d22:	1ad2      	subs	r2, r2, r3
 8009d24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009d26:	b10b      	cbz	r3, 8009d2c <__sflush_r+0x44>
 8009d28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009d2a:	1ad2      	subs	r2, r2, r3
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d30:	6a21      	ldr	r1, [r4, #32]
 8009d32:	4628      	mov	r0, r5
 8009d34:	47b0      	blx	r6
 8009d36:	1c43      	adds	r3, r0, #1
 8009d38:	89a3      	ldrh	r3, [r4, #12]
 8009d3a:	d106      	bne.n	8009d4a <__sflush_r+0x62>
 8009d3c:	6829      	ldr	r1, [r5, #0]
 8009d3e:	291d      	cmp	r1, #29
 8009d40:	d82b      	bhi.n	8009d9a <__sflush_r+0xb2>
 8009d42:	4a2a      	ldr	r2, [pc, #168]	@ (8009dec <__sflush_r+0x104>)
 8009d44:	410a      	asrs	r2, r1
 8009d46:	07d6      	lsls	r6, r2, #31
 8009d48:	d427      	bmi.n	8009d9a <__sflush_r+0xb2>
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	6062      	str	r2, [r4, #4]
 8009d4e:	04d9      	lsls	r1, r3, #19
 8009d50:	6922      	ldr	r2, [r4, #16]
 8009d52:	6022      	str	r2, [r4, #0]
 8009d54:	d504      	bpl.n	8009d60 <__sflush_r+0x78>
 8009d56:	1c42      	adds	r2, r0, #1
 8009d58:	d101      	bne.n	8009d5e <__sflush_r+0x76>
 8009d5a:	682b      	ldr	r3, [r5, #0]
 8009d5c:	b903      	cbnz	r3, 8009d60 <__sflush_r+0x78>
 8009d5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009d60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d62:	602f      	str	r7, [r5, #0]
 8009d64:	b1b9      	cbz	r1, 8009d96 <__sflush_r+0xae>
 8009d66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d6a:	4299      	cmp	r1, r3
 8009d6c:	d002      	beq.n	8009d74 <__sflush_r+0x8c>
 8009d6e:	4628      	mov	r0, r5
 8009d70:	f7fe f9aa 	bl	80080c8 <_free_r>
 8009d74:	2300      	movs	r3, #0
 8009d76:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d78:	e00d      	b.n	8009d96 <__sflush_r+0xae>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	47b0      	blx	r6
 8009d80:	4602      	mov	r2, r0
 8009d82:	1c50      	adds	r0, r2, #1
 8009d84:	d1c9      	bne.n	8009d1a <__sflush_r+0x32>
 8009d86:	682b      	ldr	r3, [r5, #0]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d0c6      	beq.n	8009d1a <__sflush_r+0x32>
 8009d8c:	2b1d      	cmp	r3, #29
 8009d8e:	d001      	beq.n	8009d94 <__sflush_r+0xac>
 8009d90:	2b16      	cmp	r3, #22
 8009d92:	d11e      	bne.n	8009dd2 <__sflush_r+0xea>
 8009d94:	602f      	str	r7, [r5, #0]
 8009d96:	2000      	movs	r0, #0
 8009d98:	e022      	b.n	8009de0 <__sflush_r+0xf8>
 8009d9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d9e:	b21b      	sxth	r3, r3
 8009da0:	e01b      	b.n	8009dda <__sflush_r+0xf2>
 8009da2:	690f      	ldr	r7, [r1, #16]
 8009da4:	2f00      	cmp	r7, #0
 8009da6:	d0f6      	beq.n	8009d96 <__sflush_r+0xae>
 8009da8:	0793      	lsls	r3, r2, #30
 8009daa:	680e      	ldr	r6, [r1, #0]
 8009dac:	bf08      	it	eq
 8009dae:	694b      	ldreq	r3, [r1, #20]
 8009db0:	600f      	str	r7, [r1, #0]
 8009db2:	bf18      	it	ne
 8009db4:	2300      	movne	r3, #0
 8009db6:	eba6 0807 	sub.w	r8, r6, r7
 8009dba:	608b      	str	r3, [r1, #8]
 8009dbc:	f1b8 0f00 	cmp.w	r8, #0
 8009dc0:	dde9      	ble.n	8009d96 <__sflush_r+0xae>
 8009dc2:	6a21      	ldr	r1, [r4, #32]
 8009dc4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009dc6:	4643      	mov	r3, r8
 8009dc8:	463a      	mov	r2, r7
 8009dca:	4628      	mov	r0, r5
 8009dcc:	47b0      	blx	r6
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	dc08      	bgt.n	8009de4 <__sflush_r+0xfc>
 8009dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dda:	81a3      	strh	r3, [r4, #12]
 8009ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8009de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009de4:	4407      	add	r7, r0
 8009de6:	eba8 0800 	sub.w	r8, r8, r0
 8009dea:	e7e7      	b.n	8009dbc <__sflush_r+0xd4>
 8009dec:	dfbffffe 	.word	0xdfbffffe

08009df0 <_fflush_r>:
 8009df0:	b538      	push	{r3, r4, r5, lr}
 8009df2:	690b      	ldr	r3, [r1, #16]
 8009df4:	4605      	mov	r5, r0
 8009df6:	460c      	mov	r4, r1
 8009df8:	b913      	cbnz	r3, 8009e00 <_fflush_r+0x10>
 8009dfa:	2500      	movs	r5, #0
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	bd38      	pop	{r3, r4, r5, pc}
 8009e00:	b118      	cbz	r0, 8009e0a <_fflush_r+0x1a>
 8009e02:	6a03      	ldr	r3, [r0, #32]
 8009e04:	b90b      	cbnz	r3, 8009e0a <_fflush_r+0x1a>
 8009e06:	f7fd f823 	bl	8006e50 <__sinit>
 8009e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d0f3      	beq.n	8009dfa <_fflush_r+0xa>
 8009e12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009e14:	07d0      	lsls	r0, r2, #31
 8009e16:	d404      	bmi.n	8009e22 <_fflush_r+0x32>
 8009e18:	0599      	lsls	r1, r3, #22
 8009e1a:	d402      	bmi.n	8009e22 <_fflush_r+0x32>
 8009e1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e1e:	f7fd faec 	bl	80073fa <__retarget_lock_acquire_recursive>
 8009e22:	4628      	mov	r0, r5
 8009e24:	4621      	mov	r1, r4
 8009e26:	f7ff ff5f 	bl	8009ce8 <__sflush_r>
 8009e2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e2c:	07da      	lsls	r2, r3, #31
 8009e2e:	4605      	mov	r5, r0
 8009e30:	d4e4      	bmi.n	8009dfc <_fflush_r+0xc>
 8009e32:	89a3      	ldrh	r3, [r4, #12]
 8009e34:	059b      	lsls	r3, r3, #22
 8009e36:	d4e1      	bmi.n	8009dfc <_fflush_r+0xc>
 8009e38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e3a:	f7fd fadf 	bl	80073fc <__retarget_lock_release_recursive>
 8009e3e:	e7dd      	b.n	8009dfc <_fflush_r+0xc>

08009e40 <__swhatbuf_r>:
 8009e40:	b570      	push	{r4, r5, r6, lr}
 8009e42:	460c      	mov	r4, r1
 8009e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e48:	2900      	cmp	r1, #0
 8009e4a:	b096      	sub	sp, #88	@ 0x58
 8009e4c:	4615      	mov	r5, r2
 8009e4e:	461e      	mov	r6, r3
 8009e50:	da0d      	bge.n	8009e6e <__swhatbuf_r+0x2e>
 8009e52:	89a3      	ldrh	r3, [r4, #12]
 8009e54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e58:	f04f 0100 	mov.w	r1, #0
 8009e5c:	bf14      	ite	ne
 8009e5e:	2340      	movne	r3, #64	@ 0x40
 8009e60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009e64:	2000      	movs	r0, #0
 8009e66:	6031      	str	r1, [r6, #0]
 8009e68:	602b      	str	r3, [r5, #0]
 8009e6a:	b016      	add	sp, #88	@ 0x58
 8009e6c:	bd70      	pop	{r4, r5, r6, pc}
 8009e6e:	466a      	mov	r2, sp
 8009e70:	f000 f8d6 	bl	800a020 <_fstat_r>
 8009e74:	2800      	cmp	r0, #0
 8009e76:	dbec      	blt.n	8009e52 <__swhatbuf_r+0x12>
 8009e78:	9901      	ldr	r1, [sp, #4]
 8009e7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009e7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009e82:	4259      	negs	r1, r3
 8009e84:	4159      	adcs	r1, r3
 8009e86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e8a:	e7eb      	b.n	8009e64 <__swhatbuf_r+0x24>

08009e8c <__smakebuf_r>:
 8009e8c:	898b      	ldrh	r3, [r1, #12]
 8009e8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e90:	079d      	lsls	r5, r3, #30
 8009e92:	4606      	mov	r6, r0
 8009e94:	460c      	mov	r4, r1
 8009e96:	d507      	bpl.n	8009ea8 <__smakebuf_r+0x1c>
 8009e98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009e9c:	6023      	str	r3, [r4, #0]
 8009e9e:	6123      	str	r3, [r4, #16]
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	6163      	str	r3, [r4, #20]
 8009ea4:	b003      	add	sp, #12
 8009ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ea8:	ab01      	add	r3, sp, #4
 8009eaa:	466a      	mov	r2, sp
 8009eac:	f7ff ffc8 	bl	8009e40 <__swhatbuf_r>
 8009eb0:	9f00      	ldr	r7, [sp, #0]
 8009eb2:	4605      	mov	r5, r0
 8009eb4:	4639      	mov	r1, r7
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	f7fb fc16 	bl	80056e8 <_malloc_r>
 8009ebc:	b948      	cbnz	r0, 8009ed2 <__smakebuf_r+0x46>
 8009ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ec2:	059a      	lsls	r2, r3, #22
 8009ec4:	d4ee      	bmi.n	8009ea4 <__smakebuf_r+0x18>
 8009ec6:	f023 0303 	bic.w	r3, r3, #3
 8009eca:	f043 0302 	orr.w	r3, r3, #2
 8009ece:	81a3      	strh	r3, [r4, #12]
 8009ed0:	e7e2      	b.n	8009e98 <__smakebuf_r+0xc>
 8009ed2:	89a3      	ldrh	r3, [r4, #12]
 8009ed4:	6020      	str	r0, [r4, #0]
 8009ed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009eda:	81a3      	strh	r3, [r4, #12]
 8009edc:	9b01      	ldr	r3, [sp, #4]
 8009ede:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ee2:	b15b      	cbz	r3, 8009efc <__smakebuf_r+0x70>
 8009ee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ee8:	4630      	mov	r0, r6
 8009eea:	f000 f8ab 	bl	800a044 <_isatty_r>
 8009eee:	b128      	cbz	r0, 8009efc <__smakebuf_r+0x70>
 8009ef0:	89a3      	ldrh	r3, [r4, #12]
 8009ef2:	f023 0303 	bic.w	r3, r3, #3
 8009ef6:	f043 0301 	orr.w	r3, r3, #1
 8009efa:	81a3      	strh	r3, [r4, #12]
 8009efc:	89a3      	ldrh	r3, [r4, #12]
 8009efe:	431d      	orrs	r5, r3
 8009f00:	81a5      	strh	r5, [r4, #12]
 8009f02:	e7cf      	b.n	8009ea4 <__smakebuf_r+0x18>

08009f04 <__sccl>:
 8009f04:	b570      	push	{r4, r5, r6, lr}
 8009f06:	780b      	ldrb	r3, [r1, #0]
 8009f08:	4604      	mov	r4, r0
 8009f0a:	2b5e      	cmp	r3, #94	@ 0x5e
 8009f0c:	bf0b      	itete	eq
 8009f0e:	784b      	ldrbeq	r3, [r1, #1]
 8009f10:	1c4a      	addne	r2, r1, #1
 8009f12:	1c8a      	addeq	r2, r1, #2
 8009f14:	2100      	movne	r1, #0
 8009f16:	bf08      	it	eq
 8009f18:	2101      	moveq	r1, #1
 8009f1a:	3801      	subs	r0, #1
 8009f1c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009f20:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009f24:	42a8      	cmp	r0, r5
 8009f26:	d1fb      	bne.n	8009f20 <__sccl+0x1c>
 8009f28:	b90b      	cbnz	r3, 8009f2e <__sccl+0x2a>
 8009f2a:	1e50      	subs	r0, r2, #1
 8009f2c:	bd70      	pop	{r4, r5, r6, pc}
 8009f2e:	f081 0101 	eor.w	r1, r1, #1
 8009f32:	54e1      	strb	r1, [r4, r3]
 8009f34:	4610      	mov	r0, r2
 8009f36:	4602      	mov	r2, r0
 8009f38:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009f3c:	2d2d      	cmp	r5, #45	@ 0x2d
 8009f3e:	d005      	beq.n	8009f4c <__sccl+0x48>
 8009f40:	2d5d      	cmp	r5, #93	@ 0x5d
 8009f42:	d016      	beq.n	8009f72 <__sccl+0x6e>
 8009f44:	2d00      	cmp	r5, #0
 8009f46:	d0f1      	beq.n	8009f2c <__sccl+0x28>
 8009f48:	462b      	mov	r3, r5
 8009f4a:	e7f2      	b.n	8009f32 <__sccl+0x2e>
 8009f4c:	7846      	ldrb	r6, [r0, #1]
 8009f4e:	2e5d      	cmp	r6, #93	@ 0x5d
 8009f50:	d0fa      	beq.n	8009f48 <__sccl+0x44>
 8009f52:	42b3      	cmp	r3, r6
 8009f54:	dcf8      	bgt.n	8009f48 <__sccl+0x44>
 8009f56:	3002      	adds	r0, #2
 8009f58:	461a      	mov	r2, r3
 8009f5a:	3201      	adds	r2, #1
 8009f5c:	4296      	cmp	r6, r2
 8009f5e:	54a1      	strb	r1, [r4, r2]
 8009f60:	dcfb      	bgt.n	8009f5a <__sccl+0x56>
 8009f62:	1af2      	subs	r2, r6, r3
 8009f64:	3a01      	subs	r2, #1
 8009f66:	1c5d      	adds	r5, r3, #1
 8009f68:	42b3      	cmp	r3, r6
 8009f6a:	bfa8      	it	ge
 8009f6c:	2200      	movge	r2, #0
 8009f6e:	18ab      	adds	r3, r5, r2
 8009f70:	e7e1      	b.n	8009f36 <__sccl+0x32>
 8009f72:	4610      	mov	r0, r2
 8009f74:	e7da      	b.n	8009f2c <__sccl+0x28>

08009f76 <__submore>:
 8009f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009f7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f82:	4299      	cmp	r1, r3
 8009f84:	d11d      	bne.n	8009fc2 <__submore+0x4c>
 8009f86:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009f8a:	f7fb fbad 	bl	80056e8 <_malloc_r>
 8009f8e:	b918      	cbnz	r0, 8009f98 <__submore+0x22>
 8009f90:	f04f 30ff 	mov.w	r0, #4294967295
 8009f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f9c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009f9e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8009fa2:	6360      	str	r0, [r4, #52]	@ 0x34
 8009fa4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8009fa8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009fac:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8009fb0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009fb4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8009fb8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8009fbc:	6020      	str	r0, [r4, #0]
 8009fbe:	2000      	movs	r0, #0
 8009fc0:	e7e8      	b.n	8009f94 <__submore+0x1e>
 8009fc2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009fc4:	0077      	lsls	r7, r6, #1
 8009fc6:	463a      	mov	r2, r7
 8009fc8:	f7fb fc22 	bl	8005810 <_realloc_r>
 8009fcc:	4605      	mov	r5, r0
 8009fce:	2800      	cmp	r0, #0
 8009fd0:	d0de      	beq.n	8009f90 <__submore+0x1a>
 8009fd2:	eb00 0806 	add.w	r8, r0, r6
 8009fd6:	4601      	mov	r1, r0
 8009fd8:	4632      	mov	r2, r6
 8009fda:	4640      	mov	r0, r8
 8009fdc:	f7fd fa0f 	bl	80073fe <memcpy>
 8009fe0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009fe4:	f8c4 8000 	str.w	r8, [r4]
 8009fe8:	e7e9      	b.n	8009fbe <__submore+0x48>

08009fea <memmove>:
 8009fea:	4288      	cmp	r0, r1
 8009fec:	b510      	push	{r4, lr}
 8009fee:	eb01 0402 	add.w	r4, r1, r2
 8009ff2:	d902      	bls.n	8009ffa <memmove+0x10>
 8009ff4:	4284      	cmp	r4, r0
 8009ff6:	4623      	mov	r3, r4
 8009ff8:	d807      	bhi.n	800a00a <memmove+0x20>
 8009ffa:	1e43      	subs	r3, r0, #1
 8009ffc:	42a1      	cmp	r1, r4
 8009ffe:	d008      	beq.n	800a012 <memmove+0x28>
 800a000:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a004:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a008:	e7f8      	b.n	8009ffc <memmove+0x12>
 800a00a:	4402      	add	r2, r0
 800a00c:	4601      	mov	r1, r0
 800a00e:	428a      	cmp	r2, r1
 800a010:	d100      	bne.n	800a014 <memmove+0x2a>
 800a012:	bd10      	pop	{r4, pc}
 800a014:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a018:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a01c:	e7f7      	b.n	800a00e <memmove+0x24>
	...

0800a020 <_fstat_r>:
 800a020:	b538      	push	{r3, r4, r5, lr}
 800a022:	4d07      	ldr	r5, [pc, #28]	@ (800a040 <_fstat_r+0x20>)
 800a024:	2300      	movs	r3, #0
 800a026:	4604      	mov	r4, r0
 800a028:	4608      	mov	r0, r1
 800a02a:	4611      	mov	r1, r2
 800a02c:	602b      	str	r3, [r5, #0]
 800a02e:	f7f9 fc97 	bl	8003960 <_fstat>
 800a032:	1c43      	adds	r3, r0, #1
 800a034:	d102      	bne.n	800a03c <_fstat_r+0x1c>
 800a036:	682b      	ldr	r3, [r5, #0]
 800a038:	b103      	cbz	r3, 800a03c <_fstat_r+0x1c>
 800a03a:	6023      	str	r3, [r4, #0]
 800a03c:	bd38      	pop	{r3, r4, r5, pc}
 800a03e:	bf00      	nop
 800a040:	200003e0 	.word	0x200003e0

0800a044 <_isatty_r>:
 800a044:	b538      	push	{r3, r4, r5, lr}
 800a046:	4d06      	ldr	r5, [pc, #24]	@ (800a060 <_isatty_r+0x1c>)
 800a048:	2300      	movs	r3, #0
 800a04a:	4604      	mov	r4, r0
 800a04c:	4608      	mov	r0, r1
 800a04e:	602b      	str	r3, [r5, #0]
 800a050:	f7f9 fc96 	bl	8003980 <_isatty>
 800a054:	1c43      	adds	r3, r0, #1
 800a056:	d102      	bne.n	800a05e <_isatty_r+0x1a>
 800a058:	682b      	ldr	r3, [r5, #0]
 800a05a:	b103      	cbz	r3, 800a05e <_isatty_r+0x1a>
 800a05c:	6023      	str	r3, [r4, #0]
 800a05e:	bd38      	pop	{r3, r4, r5, pc}
 800a060:	200003e0 	.word	0x200003e0

0800a064 <__assert_func>:
 800a064:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a066:	4614      	mov	r4, r2
 800a068:	461a      	mov	r2, r3
 800a06a:	4b09      	ldr	r3, [pc, #36]	@ (800a090 <__assert_func+0x2c>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4605      	mov	r5, r0
 800a070:	68d8      	ldr	r0, [r3, #12]
 800a072:	b954      	cbnz	r4, 800a08a <__assert_func+0x26>
 800a074:	4b07      	ldr	r3, [pc, #28]	@ (800a094 <__assert_func+0x30>)
 800a076:	461c      	mov	r4, r3
 800a078:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a07c:	9100      	str	r1, [sp, #0]
 800a07e:	462b      	mov	r3, r5
 800a080:	4905      	ldr	r1, [pc, #20]	@ (800a098 <__assert_func+0x34>)
 800a082:	f7fc fefd 	bl	8006e80 <fiprintf>
 800a086:	f000 f90b 	bl	800a2a0 <abort>
 800a08a:	4b04      	ldr	r3, [pc, #16]	@ (800a09c <__assert_func+0x38>)
 800a08c:	e7f4      	b.n	800a078 <__assert_func+0x14>
 800a08e:	bf00      	nop
 800a090:	20000190 	.word	0x20000190
 800a094:	0800a9df 	.word	0x0800a9df
 800a098:	0800a9b1 	.word	0x0800a9b1
 800a09c:	0800a9a4 	.word	0x0800a9a4

0800a0a0 <_calloc_r>:
 800a0a0:	b570      	push	{r4, r5, r6, lr}
 800a0a2:	fba1 5402 	umull	r5, r4, r1, r2
 800a0a6:	b93c      	cbnz	r4, 800a0b8 <_calloc_r+0x18>
 800a0a8:	4629      	mov	r1, r5
 800a0aa:	f7fb fb1d 	bl	80056e8 <_malloc_r>
 800a0ae:	4606      	mov	r6, r0
 800a0b0:	b928      	cbnz	r0, 800a0be <_calloc_r+0x1e>
 800a0b2:	2600      	movs	r6, #0
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	bd70      	pop	{r4, r5, r6, pc}
 800a0b8:	220c      	movs	r2, #12
 800a0ba:	6002      	str	r2, [r0, #0]
 800a0bc:	e7f9      	b.n	800a0b2 <_calloc_r+0x12>
 800a0be:	462a      	mov	r2, r5
 800a0c0:	4621      	mov	r1, r4
 800a0c2:	f7fd f8fb 	bl	80072bc <memset>
 800a0c6:	e7f5      	b.n	800a0b4 <_calloc_r+0x14>

0800a0c8 <_strtol_l.constprop.0>:
 800a0c8:	2b24      	cmp	r3, #36	@ 0x24
 800a0ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0ce:	4686      	mov	lr, r0
 800a0d0:	4690      	mov	r8, r2
 800a0d2:	d801      	bhi.n	800a0d8 <_strtol_l.constprop.0+0x10>
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d106      	bne.n	800a0e6 <_strtol_l.constprop.0+0x1e>
 800a0d8:	f7fd f964 	bl	80073a4 <__errno>
 800a0dc:	2316      	movs	r3, #22
 800a0de:	6003      	str	r3, [r0, #0]
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0e6:	4834      	ldr	r0, [pc, #208]	@ (800a1b8 <_strtol_l.constprop.0+0xf0>)
 800a0e8:	460d      	mov	r5, r1
 800a0ea:	462a      	mov	r2, r5
 800a0ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0f0:	5d06      	ldrb	r6, [r0, r4]
 800a0f2:	f016 0608 	ands.w	r6, r6, #8
 800a0f6:	d1f8      	bne.n	800a0ea <_strtol_l.constprop.0+0x22>
 800a0f8:	2c2d      	cmp	r4, #45	@ 0x2d
 800a0fa:	d12d      	bne.n	800a158 <_strtol_l.constprop.0+0x90>
 800a0fc:	782c      	ldrb	r4, [r5, #0]
 800a0fe:	2601      	movs	r6, #1
 800a100:	1c95      	adds	r5, r2, #2
 800a102:	f033 0210 	bics.w	r2, r3, #16
 800a106:	d109      	bne.n	800a11c <_strtol_l.constprop.0+0x54>
 800a108:	2c30      	cmp	r4, #48	@ 0x30
 800a10a:	d12a      	bne.n	800a162 <_strtol_l.constprop.0+0x9a>
 800a10c:	782a      	ldrb	r2, [r5, #0]
 800a10e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a112:	2a58      	cmp	r2, #88	@ 0x58
 800a114:	d125      	bne.n	800a162 <_strtol_l.constprop.0+0x9a>
 800a116:	786c      	ldrb	r4, [r5, #1]
 800a118:	2310      	movs	r3, #16
 800a11a:	3502      	adds	r5, #2
 800a11c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a120:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a124:	2200      	movs	r2, #0
 800a126:	fbbc f9f3 	udiv	r9, ip, r3
 800a12a:	4610      	mov	r0, r2
 800a12c:	fb03 ca19 	mls	sl, r3, r9, ip
 800a130:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a134:	2f09      	cmp	r7, #9
 800a136:	d81b      	bhi.n	800a170 <_strtol_l.constprop.0+0xa8>
 800a138:	463c      	mov	r4, r7
 800a13a:	42a3      	cmp	r3, r4
 800a13c:	dd27      	ble.n	800a18e <_strtol_l.constprop.0+0xc6>
 800a13e:	1c57      	adds	r7, r2, #1
 800a140:	d007      	beq.n	800a152 <_strtol_l.constprop.0+0x8a>
 800a142:	4581      	cmp	r9, r0
 800a144:	d320      	bcc.n	800a188 <_strtol_l.constprop.0+0xc0>
 800a146:	d101      	bne.n	800a14c <_strtol_l.constprop.0+0x84>
 800a148:	45a2      	cmp	sl, r4
 800a14a:	db1d      	blt.n	800a188 <_strtol_l.constprop.0+0xc0>
 800a14c:	fb00 4003 	mla	r0, r0, r3, r4
 800a150:	2201      	movs	r2, #1
 800a152:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a156:	e7eb      	b.n	800a130 <_strtol_l.constprop.0+0x68>
 800a158:	2c2b      	cmp	r4, #43	@ 0x2b
 800a15a:	bf04      	itt	eq
 800a15c:	782c      	ldrbeq	r4, [r5, #0]
 800a15e:	1c95      	addeq	r5, r2, #2
 800a160:	e7cf      	b.n	800a102 <_strtol_l.constprop.0+0x3a>
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1da      	bne.n	800a11c <_strtol_l.constprop.0+0x54>
 800a166:	2c30      	cmp	r4, #48	@ 0x30
 800a168:	bf0c      	ite	eq
 800a16a:	2308      	moveq	r3, #8
 800a16c:	230a      	movne	r3, #10
 800a16e:	e7d5      	b.n	800a11c <_strtol_l.constprop.0+0x54>
 800a170:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a174:	2f19      	cmp	r7, #25
 800a176:	d801      	bhi.n	800a17c <_strtol_l.constprop.0+0xb4>
 800a178:	3c37      	subs	r4, #55	@ 0x37
 800a17a:	e7de      	b.n	800a13a <_strtol_l.constprop.0+0x72>
 800a17c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a180:	2f19      	cmp	r7, #25
 800a182:	d804      	bhi.n	800a18e <_strtol_l.constprop.0+0xc6>
 800a184:	3c57      	subs	r4, #87	@ 0x57
 800a186:	e7d8      	b.n	800a13a <_strtol_l.constprop.0+0x72>
 800a188:	f04f 32ff 	mov.w	r2, #4294967295
 800a18c:	e7e1      	b.n	800a152 <_strtol_l.constprop.0+0x8a>
 800a18e:	1c53      	adds	r3, r2, #1
 800a190:	d108      	bne.n	800a1a4 <_strtol_l.constprop.0+0xdc>
 800a192:	2322      	movs	r3, #34	@ 0x22
 800a194:	f8ce 3000 	str.w	r3, [lr]
 800a198:	4660      	mov	r0, ip
 800a19a:	f1b8 0f00 	cmp.w	r8, #0
 800a19e:	d0a0      	beq.n	800a0e2 <_strtol_l.constprop.0+0x1a>
 800a1a0:	1e69      	subs	r1, r5, #1
 800a1a2:	e006      	b.n	800a1b2 <_strtol_l.constprop.0+0xea>
 800a1a4:	b106      	cbz	r6, 800a1a8 <_strtol_l.constprop.0+0xe0>
 800a1a6:	4240      	negs	r0, r0
 800a1a8:	f1b8 0f00 	cmp.w	r8, #0
 800a1ac:	d099      	beq.n	800a0e2 <_strtol_l.constprop.0+0x1a>
 800a1ae:	2a00      	cmp	r2, #0
 800a1b0:	d1f6      	bne.n	800a1a0 <_strtol_l.constprop.0+0xd8>
 800a1b2:	f8c8 1000 	str.w	r1, [r8]
 800a1b6:	e794      	b.n	800a0e2 <_strtol_l.constprop.0+0x1a>
 800a1b8:	0800a5f9 	.word	0x0800a5f9

0800a1bc <_strtol_r>:
 800a1bc:	f7ff bf84 	b.w	800a0c8 <_strtol_l.constprop.0>

0800a1c0 <_strtoul_l.constprop.0>:
 800a1c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1c4:	4e34      	ldr	r6, [pc, #208]	@ (800a298 <_strtoul_l.constprop.0+0xd8>)
 800a1c6:	4686      	mov	lr, r0
 800a1c8:	460d      	mov	r5, r1
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a1d0:	5d37      	ldrb	r7, [r6, r4]
 800a1d2:	f017 0708 	ands.w	r7, r7, #8
 800a1d6:	d1f8      	bne.n	800a1ca <_strtoul_l.constprop.0+0xa>
 800a1d8:	2c2d      	cmp	r4, #45	@ 0x2d
 800a1da:	d12f      	bne.n	800a23c <_strtoul_l.constprop.0+0x7c>
 800a1dc:	782c      	ldrb	r4, [r5, #0]
 800a1de:	2701      	movs	r7, #1
 800a1e0:	1c85      	adds	r5, r0, #2
 800a1e2:	f033 0010 	bics.w	r0, r3, #16
 800a1e6:	d109      	bne.n	800a1fc <_strtoul_l.constprop.0+0x3c>
 800a1e8:	2c30      	cmp	r4, #48	@ 0x30
 800a1ea:	d12c      	bne.n	800a246 <_strtoul_l.constprop.0+0x86>
 800a1ec:	7828      	ldrb	r0, [r5, #0]
 800a1ee:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a1f2:	2858      	cmp	r0, #88	@ 0x58
 800a1f4:	d127      	bne.n	800a246 <_strtoul_l.constprop.0+0x86>
 800a1f6:	786c      	ldrb	r4, [r5, #1]
 800a1f8:	2310      	movs	r3, #16
 800a1fa:	3502      	adds	r5, #2
 800a1fc:	f04f 38ff 	mov.w	r8, #4294967295
 800a200:	2600      	movs	r6, #0
 800a202:	fbb8 f8f3 	udiv	r8, r8, r3
 800a206:	fb03 f908 	mul.w	r9, r3, r8
 800a20a:	ea6f 0909 	mvn.w	r9, r9
 800a20e:	4630      	mov	r0, r6
 800a210:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a214:	f1bc 0f09 	cmp.w	ip, #9
 800a218:	d81c      	bhi.n	800a254 <_strtoul_l.constprop.0+0x94>
 800a21a:	4664      	mov	r4, ip
 800a21c:	42a3      	cmp	r3, r4
 800a21e:	dd2a      	ble.n	800a276 <_strtoul_l.constprop.0+0xb6>
 800a220:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a224:	d007      	beq.n	800a236 <_strtoul_l.constprop.0+0x76>
 800a226:	4580      	cmp	r8, r0
 800a228:	d322      	bcc.n	800a270 <_strtoul_l.constprop.0+0xb0>
 800a22a:	d101      	bne.n	800a230 <_strtoul_l.constprop.0+0x70>
 800a22c:	45a1      	cmp	r9, r4
 800a22e:	db1f      	blt.n	800a270 <_strtoul_l.constprop.0+0xb0>
 800a230:	fb00 4003 	mla	r0, r0, r3, r4
 800a234:	2601      	movs	r6, #1
 800a236:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a23a:	e7e9      	b.n	800a210 <_strtoul_l.constprop.0+0x50>
 800a23c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a23e:	bf04      	itt	eq
 800a240:	782c      	ldrbeq	r4, [r5, #0]
 800a242:	1c85      	addeq	r5, r0, #2
 800a244:	e7cd      	b.n	800a1e2 <_strtoul_l.constprop.0+0x22>
 800a246:	2b00      	cmp	r3, #0
 800a248:	d1d8      	bne.n	800a1fc <_strtoul_l.constprop.0+0x3c>
 800a24a:	2c30      	cmp	r4, #48	@ 0x30
 800a24c:	bf0c      	ite	eq
 800a24e:	2308      	moveq	r3, #8
 800a250:	230a      	movne	r3, #10
 800a252:	e7d3      	b.n	800a1fc <_strtoul_l.constprop.0+0x3c>
 800a254:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a258:	f1bc 0f19 	cmp.w	ip, #25
 800a25c:	d801      	bhi.n	800a262 <_strtoul_l.constprop.0+0xa2>
 800a25e:	3c37      	subs	r4, #55	@ 0x37
 800a260:	e7dc      	b.n	800a21c <_strtoul_l.constprop.0+0x5c>
 800a262:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a266:	f1bc 0f19 	cmp.w	ip, #25
 800a26a:	d804      	bhi.n	800a276 <_strtoul_l.constprop.0+0xb6>
 800a26c:	3c57      	subs	r4, #87	@ 0x57
 800a26e:	e7d5      	b.n	800a21c <_strtoul_l.constprop.0+0x5c>
 800a270:	f04f 36ff 	mov.w	r6, #4294967295
 800a274:	e7df      	b.n	800a236 <_strtoul_l.constprop.0+0x76>
 800a276:	1c73      	adds	r3, r6, #1
 800a278:	d106      	bne.n	800a288 <_strtoul_l.constprop.0+0xc8>
 800a27a:	2322      	movs	r3, #34	@ 0x22
 800a27c:	f8ce 3000 	str.w	r3, [lr]
 800a280:	4630      	mov	r0, r6
 800a282:	b932      	cbnz	r2, 800a292 <_strtoul_l.constprop.0+0xd2>
 800a284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a288:	b107      	cbz	r7, 800a28c <_strtoul_l.constprop.0+0xcc>
 800a28a:	4240      	negs	r0, r0
 800a28c:	2a00      	cmp	r2, #0
 800a28e:	d0f9      	beq.n	800a284 <_strtoul_l.constprop.0+0xc4>
 800a290:	b106      	cbz	r6, 800a294 <_strtoul_l.constprop.0+0xd4>
 800a292:	1e69      	subs	r1, r5, #1
 800a294:	6011      	str	r1, [r2, #0]
 800a296:	e7f5      	b.n	800a284 <_strtoul_l.constprop.0+0xc4>
 800a298:	0800a5f9 	.word	0x0800a5f9

0800a29c <_strtoul_r>:
 800a29c:	f7ff bf90 	b.w	800a1c0 <_strtoul_l.constprop.0>

0800a2a0 <abort>:
 800a2a0:	b508      	push	{r3, lr}
 800a2a2:	2006      	movs	r0, #6
 800a2a4:	f000 f82c 	bl	800a300 <raise>
 800a2a8:	2001      	movs	r0, #1
 800a2aa:	f7f9 fb09 	bl	80038c0 <_exit>

0800a2ae <_raise_r>:
 800a2ae:	291f      	cmp	r1, #31
 800a2b0:	b538      	push	{r3, r4, r5, lr}
 800a2b2:	4605      	mov	r5, r0
 800a2b4:	460c      	mov	r4, r1
 800a2b6:	d904      	bls.n	800a2c2 <_raise_r+0x14>
 800a2b8:	2316      	movs	r3, #22
 800a2ba:	6003      	str	r3, [r0, #0]
 800a2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c0:	bd38      	pop	{r3, r4, r5, pc}
 800a2c2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a2c4:	b112      	cbz	r2, 800a2cc <_raise_r+0x1e>
 800a2c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2ca:	b94b      	cbnz	r3, 800a2e0 <_raise_r+0x32>
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	f000 f831 	bl	800a334 <_getpid_r>
 800a2d2:	4622      	mov	r2, r4
 800a2d4:	4601      	mov	r1, r0
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2dc:	f000 b818 	b.w	800a310 <_kill_r>
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d00a      	beq.n	800a2fa <_raise_r+0x4c>
 800a2e4:	1c59      	adds	r1, r3, #1
 800a2e6:	d103      	bne.n	800a2f0 <_raise_r+0x42>
 800a2e8:	2316      	movs	r3, #22
 800a2ea:	6003      	str	r3, [r0, #0]
 800a2ec:	2001      	movs	r0, #1
 800a2ee:	e7e7      	b.n	800a2c0 <_raise_r+0x12>
 800a2f0:	2100      	movs	r1, #0
 800a2f2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	4798      	blx	r3
 800a2fa:	2000      	movs	r0, #0
 800a2fc:	e7e0      	b.n	800a2c0 <_raise_r+0x12>
	...

0800a300 <raise>:
 800a300:	4b02      	ldr	r3, [pc, #8]	@ (800a30c <raise+0xc>)
 800a302:	4601      	mov	r1, r0
 800a304:	6818      	ldr	r0, [r3, #0]
 800a306:	f7ff bfd2 	b.w	800a2ae <_raise_r>
 800a30a:	bf00      	nop
 800a30c:	20000190 	.word	0x20000190

0800a310 <_kill_r>:
 800a310:	b538      	push	{r3, r4, r5, lr}
 800a312:	4d07      	ldr	r5, [pc, #28]	@ (800a330 <_kill_r+0x20>)
 800a314:	2300      	movs	r3, #0
 800a316:	4604      	mov	r4, r0
 800a318:	4608      	mov	r0, r1
 800a31a:	4611      	mov	r1, r2
 800a31c:	602b      	str	r3, [r5, #0]
 800a31e:	f7f9 fabf 	bl	80038a0 <_kill>
 800a322:	1c43      	adds	r3, r0, #1
 800a324:	d102      	bne.n	800a32c <_kill_r+0x1c>
 800a326:	682b      	ldr	r3, [r5, #0]
 800a328:	b103      	cbz	r3, 800a32c <_kill_r+0x1c>
 800a32a:	6023      	str	r3, [r4, #0]
 800a32c:	bd38      	pop	{r3, r4, r5, pc}
 800a32e:	bf00      	nop
 800a330:	200003e0 	.word	0x200003e0

0800a334 <_getpid_r>:
 800a334:	f7f9 baac 	b.w	8003890 <_getpid>

0800a338 <_init>:
 800a338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a33a:	bf00      	nop
 800a33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a33e:	bc08      	pop	{r3}
 800a340:	469e      	mov	lr, r3
 800a342:	4770      	bx	lr

0800a344 <_fini>:
 800a344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a346:	bf00      	nop
 800a348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a34a:	bc08      	pop	{r3}
 800a34c:	469e      	mov	lr, r3
 800a34e:	4770      	bx	lr
